
Nucleo_L476RG_XBLE1_SampleApp_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000783c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000738  080079cc  080079cc  000179cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008104  08008104  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08008104  08008104  00018104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800810c  0800810c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800810c  0800810c  0001810c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008110  08008110  00018110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08008114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000052c  200001f4  08008308  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000720  08008308  00020720  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021d1b  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b06  00000000  00000000  00041f3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001320  00000000  00000000  00045a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011a0  00000000  00000000  00046d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002bd01  00000000  00000000  00047f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012e5d  00000000  00000000  00073c09  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f7255  00000000  00000000  00086a66  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017dcbb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005680  00000000  00000000  0017dd38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080079b4 	.word	0x080079b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	080079b4 	.word	0x080079b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", ms/(60*60*1000)%24, ms/(60*1000)%60, (ms/1000)%60, ms%1000);
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08e      	sub	sp, #56	; 0x38
 8000584:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  uint8_t CLIENT_BDADDR[] = {0xbb, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8000586:	4a73      	ldr	r2, [pc, #460]	; (8000754 <MX_BlueNRG_MS_Init+0x1d4>)
 8000588:	f107 031c 	add.w	r3, r7, #28
 800058c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000590:	6018      	str	r0, [r3, #0]
 8000592:	3304      	adds	r3, #4
 8000594:	8019      	strh	r1, [r3, #0]
  uint8_t SERVER_BDADDR[] = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8000596:	4a70      	ldr	r2, [pc, #448]	; (8000758 <MX_BlueNRG_MS_Init+0x1d8>)
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005a0:	6018      	str	r0, [r3, #0]
 80005a2:	3304      	adds	r3, #4
 80005a4:	8019      	strh	r1, [r3, #0]

  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 80005a6:	f000 f8fd 	bl	80007a4 <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 80005aa:	2000      	movs	r0, #0
 80005ac:	f001 fc58 	bl	8001e60 <BSP_PB_GetState>
 80005b0:	4603      	mov	r3, r0
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	4b69      	ldr	r3, [pc, #420]	; (800075c <MX_BlueNRG_MS_Init+0x1dc>)
 80005b6:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 80005b8:	2100      	movs	r1, #0
 80005ba:	4869      	ldr	r0, [pc, #420]	; (8000760 <MX_BlueNRG_MS_Init+0x1e0>)
 80005bc:	f005 fe22 	bl	8006204 <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 80005c0:	1cba      	adds	r2, r7, #2
 80005c2:	1d7b      	adds	r3, r7, #5
 80005c4:	4611      	mov	r1, r2
 80005c6:	4618      	mov	r0, r3
 80005c8:	f005 fc92 	bl	8005ef0 <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 80005cc:	f005 fcd4 	bl	8005f78 <hci_reset>

  HAL_Delay(100);
 80005d0:	2064      	movs	r0, #100	; 0x64
 80005d2:	f001 fde3 	bl	800219c <HAL_Delay>

  printf("HWver %d, FWver %d\n", hwVersion, fwVersion);
 80005d6:	797b      	ldrb	r3, [r7, #5]
 80005d8:	4619      	mov	r1, r3
 80005da:	887b      	ldrh	r3, [r7, #2]
 80005dc:	461a      	mov	r2, r3
 80005de:	4861      	ldr	r0, [pc, #388]	; (8000764 <MX_BlueNRG_MS_Init+0x1e4>)
 80005e0:	f006 fba4 	bl	8006d2c <iprintf>

  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 80005e4:	797b      	ldrb	r3, [r7, #5]
 80005e6:	2b30      	cmp	r3, #48	; 0x30
 80005e8:	d902      	bls.n	80005f0 <MX_BlueNRG_MS_Init+0x70>
    bnrg_expansion_board = IDB05A1;
 80005ea:	4b5f      	ldr	r3, [pc, #380]	; (8000768 <MX_BlueNRG_MS_Init+0x1e8>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	701a      	strb	r2, [r3, #0]
  }

  if (BLE_Role == CLIENT) {
 80005f0:	4b5e      	ldr	r3, [pc, #376]	; (800076c <MX_BlueNRG_MS_Init+0x1ec>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d109      	bne.n	800060c <MX_BlueNRG_MS_Init+0x8c>
    BLUENRG_memcpy(bdaddr, CLIENT_BDADDR, sizeof(CLIENT_BDADDR));
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	f107 021c 	add.w	r2, r7, #28
 8000600:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000604:	6018      	str	r0, [r3, #0]
 8000606:	3304      	adds	r3, #4
 8000608:	8019      	strh	r1, [r3, #0]
 800060a:	e008      	b.n	800061e <MX_BlueNRG_MS_Init+0x9e>
  } else {
    BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	f107 0214 	add.w	r2, r7, #20
 8000614:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000618:	6018      	str	r0, [r3, #0]
 800061a:	3304      	adds	r3, #4
 800061c:	8019      	strh	r1, [r3, #0]
  }

  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	461a      	mov	r2, r3
 8000624:	2106      	movs	r1, #6
 8000626:	2000      	movs	r0, #0
 8000628:	f005 fbc9 	bl	8005dbe <aci_hal_write_config_data>
 800062c:	4603      	mov	r3, r0
 800062e:	627b      	str	r3, [r7, #36]	; 0x24
                                  CONFIG_DATA_PUBADDR_LEN,
                                  bdaddr);
  if (ret) {
 8000630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000632:	2b00      	cmp	r3, #0
 8000634:	d003      	beq.n	800063e <MX_BlueNRG_MS_Init+0xbe>
    printf("Setting BD_ADDR failed 0x%02x.\n", ret);
 8000636:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000638:	484d      	ldr	r0, [pc, #308]	; (8000770 <MX_BlueNRG_MS_Init+0x1f0>)
 800063a:	f006 fb77 	bl	8006d2c <iprintf>
  }

  ret = aci_gatt_init();
 800063e:	f005 f859 	bl	80056f4 <aci_gatt_init>
 8000642:	4603      	mov	r3, r0
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
  if (ret) {
 8000646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000648:	2b00      	cmp	r3, #0
 800064a:	d002      	beq.n	8000652 <MX_BlueNRG_MS_Init+0xd2>
    printf("GATT_Init failed.\n");
 800064c:	4849      	ldr	r0, [pc, #292]	; (8000774 <MX_BlueNRG_MS_Init+0x1f4>)
 800064e:	f006 fbf5 	bl	8006e3c <puts>
  }

  if (BLE_Role == SERVER) {
 8000652:	4b46      	ldr	r3, [pc, #280]	; (800076c <MX_BlueNRG_MS_Init+0x1ec>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d11e      	bne.n	8000698 <MX_BlueNRG_MS_Init+0x118>
    if (bnrg_expansion_board == IDB05A1) {
 800065a:	4b43      	ldr	r3, [pc, #268]	; (8000768 <MX_BlueNRG_MS_Init+0x1e8>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d10f      	bne.n	8000682 <MX_BlueNRG_MS_Init+0x102>
      ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000662:	f107 020a 	add.w	r2, r7, #10
 8000666:	1dbb      	adds	r3, r7, #6
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	4613      	mov	r3, r2
 8000672:	2207      	movs	r2, #7
 8000674:	2100      	movs	r1, #0
 8000676:	2001      	movs	r0, #1
 8000678:	f004 fe08 	bl	800528c <aci_gap_init_IDB05A1>
 800067c:	4603      	mov	r3, r0
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
 8000680:	e028      	b.n	80006d4 <MX_BlueNRG_MS_Init+0x154>
    }
    else {
      ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000682:	1dbb      	adds	r3, r7, #6
 8000684:	f107 0208 	add.w	r2, r7, #8
 8000688:	f107 010a 	add.w	r1, r7, #10
 800068c:	2001      	movs	r0, #1
 800068e:	f004 fe4d 	bl	800532c <aci_gap_init_IDB04A1>
 8000692:	4603      	mov	r3, r0
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
 8000696:	e01d      	b.n	80006d4 <MX_BlueNRG_MS_Init+0x154>
    }
  }
  else {
    if (bnrg_expansion_board == IDB05A1) {
 8000698:	4b33      	ldr	r3, [pc, #204]	; (8000768 <MX_BlueNRG_MS_Init+0x1e8>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d10f      	bne.n	80006c0 <MX_BlueNRG_MS_Init+0x140>
      ret = aci_gap_init_IDB05A1(GAP_CENTRAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80006a0:	f107 020a 	add.w	r2, r7, #10
 80006a4:	1dbb      	adds	r3, r7, #6
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	f107 0308 	add.w	r3, r7, #8
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	4613      	mov	r3, r2
 80006b0:	2207      	movs	r2, #7
 80006b2:	2100      	movs	r1, #0
 80006b4:	2004      	movs	r0, #4
 80006b6:	f004 fde9 	bl	800528c <aci_gap_init_IDB05A1>
 80006ba:	4603      	mov	r3, r0
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
 80006be:	e009      	b.n	80006d4 <MX_BlueNRG_MS_Init+0x154>
    }
    else {
      ret = aci_gap_init_IDB04A1(GAP_CENTRAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80006c0:	1dbb      	adds	r3, r7, #6
 80006c2:	f107 0208 	add.w	r2, r7, #8
 80006c6:	f107 010a 	add.w	r1, r7, #10
 80006ca:	2003      	movs	r0, #3
 80006cc:	f004 fe2e 	bl	800532c <aci_gap_init_IDB04A1>
 80006d0:	4603      	mov	r3, r0
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  if (ret != BLE_STATUS_SUCCESS) {
 80006d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d002      	beq.n	80006e0 <MX_BlueNRG_MS_Init+0x160>
    printf("GAP_Init failed.\n");
 80006da:	4827      	ldr	r0, [pc, #156]	; (8000778 <MX_BlueNRG_MS_Init+0x1f8>)
 80006dc:	f006 fbae 	bl	8006e3c <puts>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 80006e0:	2301      	movs	r3, #1
 80006e2:	9303      	str	r3, [sp, #12]
 80006e4:	4b25      	ldr	r3, [pc, #148]	; (800077c <MX_BlueNRG_MS_Init+0x1fc>)
 80006e6:	9302      	str	r3, [sp, #8]
 80006e8:	2300      	movs	r3, #0
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	2310      	movs	r3, #16
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2307      	movs	r3, #7
 80006f2:	2200      	movs	r2, #0
 80006f4:	2100      	movs	r1, #0
 80006f6:	2001      	movs	r0, #1
 80006f8:	f004 ff51 	bl	800559e <aci_gap_set_auth_requirement>
 80006fc:	4603      	mov	r3, r0
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret == BLE_STATUS_SUCCESS) {
 8000700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000702:	2b00      	cmp	r3, #0
 8000704:	d102      	bne.n	800070c <MX_BlueNRG_MS_Init+0x18c>
    printf("BLE Stack Initialized.\n");
 8000706:	481e      	ldr	r0, [pc, #120]	; (8000780 <MX_BlueNRG_MS_Init+0x200>)
 8000708:	f006 fb98 	bl	8006e3c <puts>
  }

  if (BLE_Role == SERVER) {
 800070c:	4b17      	ldr	r3, [pc, #92]	; (800076c <MX_BlueNRG_MS_Init+0x1ec>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d111      	bne.n	8000738 <MX_BlueNRG_MS_Init+0x1b8>
    printf("SERVER: BLE Stack Initialized\n");
 8000714:	481b      	ldr	r0, [pc, #108]	; (8000784 <MX_BlueNRG_MS_Init+0x204>)
 8000716:	f006 fb91 	bl	8006e3c <puts>
    ret = Add_Sample_Service();
 800071a:	f000 f933 	bl	8000984 <Add_Sample_Service>
 800071e:	4603      	mov	r3, r0
 8000720:	627b      	str	r3, [r7, #36]	; 0x24

    if (ret == BLE_STATUS_SUCCESS)
 8000722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000724:	2b00      	cmp	r3, #0
 8000726:	d103      	bne.n	8000730 <MX_BlueNRG_MS_Init+0x1b0>
      printf("Service added successfully.\n");
 8000728:	4817      	ldr	r0, [pc, #92]	; (8000788 <MX_BlueNRG_MS_Init+0x208>)
 800072a:	f006 fb87 	bl	8006e3c <puts>
 800072e:	e006      	b.n	800073e <MX_BlueNRG_MS_Init+0x1be>
    else
      printf("Error while adding service.\n");
 8000730:	4816      	ldr	r0, [pc, #88]	; (800078c <MX_BlueNRG_MS_Init+0x20c>)
 8000732:	f006 fb83 	bl	8006e3c <puts>
 8000736:	e002      	b.n	800073e <MX_BlueNRG_MS_Init+0x1be>

  } else {
    printf("CLIENT: BLE Stack Initialized\n");
 8000738:	4815      	ldr	r0, [pc, #84]	; (8000790 <MX_BlueNRG_MS_Init+0x210>)
 800073a:	f006 fb7f 	bl	8006e3c <puts>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 800073e:	2104      	movs	r1, #4
 8000740:	2001      	movs	r0, #1
 8000742:	f005 fba4 	bl	8005e8e <aci_hal_set_tx_power_level>
 8000746:	4603      	mov	r3, r0
 8000748:	627b      	str	r3, [r7, #36]	; 0x24

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 800074a:	bf00      	nop
 800074c:	3728      	adds	r7, #40	; 0x28
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	08007ab8 	.word	0x08007ab8
 8000758:	08007ac0 	.word	0x08007ac0
 800075c:	20000000 	.word	0x20000000
 8000760:	08001031 	.word	0x08001031
 8000764:	080079cc 	.word	0x080079cc
 8000768:	20000210 	.word	0x20000210
 800076c:	20000001 	.word	0x20000001
 8000770:	080079e0 	.word	0x080079e0
 8000774:	08007a00 	.word	0x08007a00
 8000778:	08007a14 	.word	0x08007a14
 800077c:	0001e240 	.word	0x0001e240
 8000780:	08007a28 	.word	0x08007a28
 8000784:	08007a40 	.word	0x08007a40
 8000788:	08007a60 	.word	0x08007a60
 800078c:	08007a7c 	.word	0x08007a7c
 8000790:	08007a98 	.word	0x08007a98

08000794 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 8000798:	f000 f812 	bl	80007c0 <User_Process>
  hci_user_evt_proc();
 800079c:	f005 feac 	bl	80064f8 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80007a8:	2101      	movs	r1, #1
 80007aa:	2000      	movs	r0, #0
 80007ac:	f001 fb04 	bl	8001db8 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 80007b0:	2000      	movs	r0, #0
 80007b2:	f001 fa6f 	bl	8001c94 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f001 fbb0 	bl	8001f1c <BSP_COM_Init>
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}

080007c0 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 80007c0:	b5b0      	push	{r4, r5, r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
  if (set_connectable)
 80007c6:	4b3d      	ldr	r3, [pc, #244]	; (80008bc <User_Process+0xfc>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d00b      	beq.n	80007e8 <User_Process+0x28>
  {
    /* Establish connection with remote device */
    Make_Connection();
 80007d0:	f000 f972 	bl	8000ab8 <Make_Connection>
    set_connectable = FALSE;
 80007d4:	4b39      	ldr	r3, [pc, #228]	; (80008bc <User_Process+0xfc>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]
    user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 80007da:	2000      	movs	r0, #0
 80007dc:	f001 fb40 	bl	8001e60 <BSP_PB_GetState>
 80007e0:	4603      	mov	r3, r0
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	4b36      	ldr	r3, [pc, #216]	; (80008c0 <User_Process+0x100>)
 80007e6:	701a      	strb	r2, [r3, #0]
  }

  if (BLE_Role == CLIENT)
 80007e8:	4b36      	ldr	r3, [pc, #216]	; (80008c4 <User_Process+0x104>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d12e      	bne.n	800084e <User_Process+0x8e>
  {
    /* Start TX handle Characteristic dynamic discovery if not yet done */
    if (connected && !end_read_tx_char_handle){
 80007f0:	4b35      	ldr	r3, [pc, #212]	; (80008c8 <User_Process+0x108>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d007      	beq.n	8000808 <User_Process+0x48>
 80007f8:	4b34      	ldr	r3, [pc, #208]	; (80008cc <User_Process+0x10c>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d102      	bne.n	8000808 <User_Process+0x48>
      startReadTXCharHandle();
 8000802:	f000 f9e7 	bl	8000bd4 <startReadTXCharHandle>
 8000806:	e00a      	b.n	800081e <User_Process+0x5e>
    }
    /* Start RX handle Characteristic dynamic discovery if not yet done */
    else if (connected && !end_read_rx_char_handle){
 8000808:	4b2f      	ldr	r3, [pc, #188]	; (80008c8 <User_Process+0x108>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d006      	beq.n	800081e <User_Process+0x5e>
 8000810:	4b2f      	ldr	r3, [pc, #188]	; (80008d0 <User_Process+0x110>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2b00      	cmp	r3, #0
 8000818:	d101      	bne.n	800081e <User_Process+0x5e>
      startReadRXCharHandle();
 800081a:	f000 fa15 	bl	8000c48 <startReadRXCharHandle>
    }

    if (connected && end_read_tx_char_handle && end_read_rx_char_handle && !notification_enabled)
 800081e:	4b2a      	ldr	r3, [pc, #168]	; (80008c8 <User_Process+0x108>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d013      	beq.n	800084e <User_Process+0x8e>
 8000826:	4b29      	ldr	r3, [pc, #164]	; (80008cc <User_Process+0x10c>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	b2db      	uxtb	r3, r3
 800082c:	2b00      	cmp	r3, #0
 800082e:	d00e      	beq.n	800084e <User_Process+0x8e>
 8000830:	4b27      	ldr	r3, [pc, #156]	; (80008d0 <User_Process+0x110>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	2b00      	cmp	r3, #0
 8000838:	d009      	beq.n	800084e <User_Process+0x8e>
 800083a:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <User_Process+0x114>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b00      	cmp	r3, #0
 8000842:	d104      	bne.n	800084e <User_Process+0x8e>
    {
      BSP_LED_Off(LED2); //end of the connection and chars discovery phase
 8000844:	2000      	movs	r0, #0
 8000846:	f001 fa4d 	bl	8001ce4 <BSP_LED_Off>
      enableNotification();
 800084a:	f000 fab1 	bl	8000db0 <enableNotification>
    }
  }

  /* Check if the User Button has been pushed */
  if (user_button_pressed)
 800084e:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <User_Process+0x118>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	b2db      	uxtb	r3, r3
 8000854:	2b00      	cmp	r3, #0
 8000856:	d02c      	beq.n	80008b2 <User_Process+0xf2>
  {
    /* Debouncing */
    HAL_Delay(50);
 8000858:	2032      	movs	r0, #50	; 0x32
 800085a:	f001 fc9f 	bl	800219c <HAL_Delay>

    /* Wait until the User Button is released */
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);
 800085e:	bf00      	nop
 8000860:	2000      	movs	r0, #0
 8000862:	f001 fafd 	bl	8001e60 <BSP_PB_GetState>
 8000866:	4602      	mov	r2, r0
 8000868:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <User_Process+0x100>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2b00      	cmp	r3, #0
 8000870:	bf0c      	ite	eq
 8000872:	2301      	moveq	r3, #1
 8000874:	2300      	movne	r3, #0
 8000876:	b2db      	uxtb	r3, r3
 8000878:	429a      	cmp	r2, r3
 800087a:	d0f1      	beq.n	8000860 <User_Process+0xa0>

    /* Debouncing */
    HAL_Delay(50);
 800087c:	2032      	movs	r0, #50	; 0x32
 800087e:	f001 fc8d 	bl	800219c <HAL_Delay>

    if (connected && notification_enabled)
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <User_Process+0x108>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d010      	beq.n	80008ac <User_Process+0xec>
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <User_Process+0x114>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2b00      	cmp	r3, #0
 8000892:	d00b      	beq.n	80008ac <User_Process+0xec>
    {
      /* Send a toggle command to the remote device */
      uint8_t data[20] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J'};
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <User_Process+0x11c>)
 8000896:	1d3c      	adds	r4, r7, #4
 8000898:	461d      	mov	r5, r3
 800089a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800089c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800089e:	682b      	ldr	r3, [r5, #0]
 80008a0:	6023      	str	r3, [r4, #0]
      sendData(data, sizeof(data));
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2114      	movs	r1, #20
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 fa2e 	bl	8000d08 <sendData>
                                * is called in main().
                                * E.g. it can be enabled for debugging. */
    }

    /* Reset the User Button flag */
    user_button_pressed = 0;
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <User_Process+0x118>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
  }
}
 80008b2:	bf00      	nop
 80008b4:	3718      	adds	r7, #24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bdb0      	pop	{r4, r5, r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000002 	.word	0x20000002
 80008c0:	20000000 	.word	0x20000000
 80008c4:	20000001 	.word	0x20000001
 80008c8:	20000214 	.word	0x20000214
 80008cc:	2000021d 	.word	0x2000021d
 80008d0:	2000021e 	.word	0x2000021e
 80008d4:	2000021a 	.word	0x2000021a
 80008d8:	20000211 	.word	0x20000211
 80008dc:	08007ac8 	.word	0x08007ac8

080008e0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 80008ea:	4b04      	ldr	r3, [pc, #16]	; (80008fc <BSP_PB_Callback+0x1c>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	701a      	strb	r2, [r3, #0]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	20000211 	.word	0x20000211

08000900 <BLE_str2uuid>:
 * @}
 */

/* USER CODE BEGIN 0 */

HAL_StatusTypeDef BLE_str2uuid(char *uuid128, uint8_t *uuid){
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
int strCounter=0;      // need two counters: one for uuid string and
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
int hexCounter=15;      // another one for destination uuid array (size=16)
 800090e:	230f      	movs	r3, #15
 8000910:	613b      	str	r3, [r7, #16]

while (strCounter<strlen(uuid128)){
 8000912:	e02b      	b.n	800096c <BLE_str2uuid+0x6c>
     // convert the character to string
     char str[2];
     str[0] = uuid128[strCounter++];
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	1c5a      	adds	r2, r3, #1
 8000918:	617a      	str	r2, [r7, #20]
 800091a:	461a      	mov	r2, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4413      	add	r3, r2
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	733b      	strb	r3, [r7, #12]
     if (str[0] == '-') continue;  //go to the next element
 8000924:	7b3b      	ldrb	r3, [r7, #12]
 8000926:	2b2d      	cmp	r3, #45	; 0x2d
 8000928:	d100      	bne.n	800092c <BLE_str2uuid+0x2c>
 800092a:	e01f      	b.n	800096c <BLE_str2uuid+0x6c>
     do {
        str[1] = uuid128[strCounter++ ];
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	1c5a      	adds	r2, r3, #1
 8000930:	617a      	str	r2, [r7, #20]
 8000932:	461a      	mov	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4413      	add	r3, r2
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	737b      	strb	r3, [r7, #13]
        }
     while (str[1] == '-');
 800093c:	7b7b      	ldrb	r3, [r7, #13]
 800093e:	2b2d      	cmp	r3, #45	; 0x2d
 8000940:	d0f4      	beq.n	800092c <BLE_str2uuid+0x2c>

     if (hexCounter<0) return HAL_ERROR;
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	2b00      	cmp	r3, #0
 8000946:	da01      	bge.n	800094c <BLE_str2uuid+0x4c>
 8000948:	2301      	movs	r3, #1
 800094a:	e017      	b.n	800097c <BLE_str2uuid+0x7c>
     // convert string to int base 16
     uuid[hexCounter--]= (uint8_t) strtol(str, NULL, 16);
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	2210      	movs	r2, #16
 8000952:	2100      	movs	r1, #0
 8000954:	4618      	mov	r0, r3
 8000956:	f006 fb5b 	bl	8007010 <strtol>
 800095a:	4601      	mov	r1, r0
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	1e5a      	subs	r2, r3, #1
 8000960:	613a      	str	r2, [r7, #16]
 8000962:	461a      	mov	r2, r3
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	4413      	add	r3, r2
 8000968:	b2ca      	uxtb	r2, r1
 800096a:	701a      	strb	r2, [r3, #0]
while (strCounter<strlen(uuid128)){
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f7ff fc2f 	bl	80001d0 <strlen>
 8000972:	4602      	mov	r2, r0
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	429a      	cmp	r2, r3
 8000978:	d8cc      	bhi.n	8000914 <BLE_str2uuid+0x14>
}
return HAL_OK;
 800097a:	2300      	movs	r3, #0
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <Add_Sample_Service>:
 * @brief  Add a sample service using a vendor specific profile
 * @param  None
 * @retval Status
 */
tBleStatus Add_Sample_Service(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b094      	sub	sp, #80	; 0x50
 8000988:	af06      	add	r7, sp, #24
//  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
//  const uint8_t charUuidTX  [16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
//  const uint8_t charUuidRX  [16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};

  uint8_t service_uuid[16];
  BLE_str2uuid("D973F2E0-B19E-11E2-9E96-0800200C9A66", service_uuid);
 800098a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098e:	4619      	mov	r1, r3
 8000990:	483e      	ldr	r0, [pc, #248]	; (8000a8c <Add_Sample_Service+0x108>)
 8000992:	f7ff ffb5 	bl	8000900 <BLE_str2uuid>
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid, PRIMARY_SERVICE, 7, &sampleServHandle); /* original is 9?? */
 8000996:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800099a:	4b3d      	ldr	r3, [pc, #244]	; (8000a90 <Add_Sample_Service+0x10c>)
 800099c:	9300      	str	r3, [sp, #0]
 800099e:	2307      	movs	r3, #7
 80009a0:	2201      	movs	r2, #1
 80009a2:	2002      	movs	r0, #2
 80009a4:	f004 fec9 	bl	800573a <aci_gatt_add_serv>
 80009a8:	4603      	mov	r3, r0
 80009aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80009ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d153      	bne.n	8000a5e <Add_Sample_Service+0xda>

  uint8_t charUuidTX[16];
  BLE_str2uuid("D973F2E1-B19E-11E2-9E96-0800200C9A66", charUuidTX);
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4619      	mov	r1, r3
 80009bc:	4835      	ldr	r0, [pc, #212]	; (8000a94 <Add_Sample_Service+0x110>)
 80009be:	f7ff ff9f 	bl	8000900 <BLE_str2uuid>
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidTX, 20, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 80009c2:	4b33      	ldr	r3, [pc, #204]	; (8000a90 <Add_Sample_Service+0x10c>)
 80009c4:	8818      	ldrh	r0, [r3, #0]
 80009c6:	f107 0214 	add.w	r2, r7, #20
 80009ca:	4b33      	ldr	r3, [pc, #204]	; (8000a98 <Add_Sample_Service+0x114>)
 80009cc:	9305      	str	r3, [sp, #20]
 80009ce:	2301      	movs	r3, #1
 80009d0:	9304      	str	r3, [sp, #16]
 80009d2:	2310      	movs	r3, #16
 80009d4:	9303      	str	r3, [sp, #12]
 80009d6:	2300      	movs	r3, #0
 80009d8:	9302      	str	r3, [sp, #8]
 80009da:	2300      	movs	r3, #0
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	2310      	movs	r3, #16
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	2314      	movs	r3, #20
 80009e4:	2102      	movs	r1, #2
 80009e6:	f004 ff34 	bl	8005852 <aci_gatt_add_char>
 80009ea:	4603      	mov	r3, r0
 80009ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                           16, 1, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80009f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d134      	bne.n	8000a62 <Add_Sample_Service+0xde>

  uint8_t charUuidRX[16];
  BLE_str2uuid("D973F2E2-B19E-11E2-9E96-0800200C9A66", charUuidRX);
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	4619      	mov	r1, r3
 80009fc:	4827      	ldr	r0, [pc, #156]	; (8000a9c <Add_Sample_Service+0x118>)
 80009fe:	f7ff ff7f 	bl	8000900 <BLE_str2uuid>
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidRX, 20, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 8000a02:	4b23      	ldr	r3, [pc, #140]	; (8000a90 <Add_Sample_Service+0x10c>)
 8000a04:	8818      	ldrh	r0, [r3, #0]
 8000a06:	1d3a      	adds	r2, r7, #4
 8000a08:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <Add_Sample_Service+0x11c>)
 8000a0a:	9305      	str	r3, [sp, #20]
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	9304      	str	r3, [sp, #16]
 8000a10:	2310      	movs	r3, #16
 8000a12:	9303      	str	r3, [sp, #12]
 8000a14:	2301      	movs	r3, #1
 8000a16:	9302      	str	r3, [sp, #8]
 8000a18:	2300      	movs	r3, #0
 8000a1a:	9301      	str	r3, [sp, #4]
 8000a1c:	230c      	movs	r3, #12
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2314      	movs	r3, #20
 8000a22:	2102      	movs	r1, #2
 8000a24:	f004 ff15 	bl	8005852 <aci_gatt_add_char>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                           16, 1, &RXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000a2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d117      	bne.n	8000a66 <Add_Sample_Service+0xe2>

  PRINT_MESG_DBG("Sample Service added.\nTX Char Handle %04X, RX Char Handle %04X\n", TXCharHandle, RXCharHandle);
 8000a36:	481b      	ldr	r0, [pc, #108]	; (8000aa4 <Add_Sample_Service+0x120>)
 8000a38:	f005 fedd 	bl	80067f6 <DbgTraceGetFileName>
 8000a3c:	4601      	mov	r1, r0
 8000a3e:	23a6      	movs	r3, #166	; 0xa6
 8000a40:	4a19      	ldr	r2, [pc, #100]	; (8000aa8 <Add_Sample_Service+0x124>)
 8000a42:	481a      	ldr	r0, [pc, #104]	; (8000aac <Add_Sample_Service+0x128>)
 8000a44:	f006 f972 	bl	8006d2c <iprintf>
 8000a48:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <Add_Sample_Service+0x114>)
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <Add_Sample_Service+0x11c>)
 8000a50:	881b      	ldrh	r3, [r3, #0]
 8000a52:	461a      	mov	r2, r3
 8000a54:	4816      	ldr	r0, [pc, #88]	; (8000ab0 <Add_Sample_Service+0x12c>)
 8000a56:	f006 f969 	bl	8006d2c <iprintf>
  return BLE_STATUS_SUCCESS;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	e011      	b.n	8000a82 <Add_Sample_Service+0xfe>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000a5e:	bf00      	nop
 8000a60:	e002      	b.n	8000a68 <Add_Sample_Service+0xe4>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000a62:	bf00      	nop
 8000a64:	e000      	b.n	8000a68 <Add_Sample_Service+0xe4>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000a66:	bf00      	nop

fail:
  PRINT_MESG_DBG("Error while adding Sample Service.\n");
 8000a68:	480e      	ldr	r0, [pc, #56]	; (8000aa4 <Add_Sample_Service+0x120>)
 8000a6a:	f005 fec4 	bl	80067f6 <DbgTraceGetFileName>
 8000a6e:	4601      	mov	r1, r0
 8000a70:	23aa      	movs	r3, #170	; 0xaa
 8000a72:	4a0d      	ldr	r2, [pc, #52]	; (8000aa8 <Add_Sample_Service+0x124>)
 8000a74:	480d      	ldr	r0, [pc, #52]	; (8000aac <Add_Sample_Service+0x128>)
 8000a76:	f006 f959 	bl	8006d2c <iprintf>
 8000a7a:	480e      	ldr	r0, [pc, #56]	; (8000ab4 <Add_Sample_Service+0x130>)
 8000a7c:	f006 f9de 	bl	8006e3c <puts>
  return BLE_STATUS_ERROR ;
 8000a80:	2347      	movs	r3, #71	; 0x47
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3738      	adds	r7, #56	; 0x38
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	08007adc 	.word	0x08007adc
 8000a90:	20000616 	.word	0x20000616
 8000a94:	08007b04 	.word	0x08007b04
 8000a98:	20000614 	.word	0x20000614
 8000a9c:	08007b2c 	.word	0x08007b2c
 8000aa0:	20000618 	.word	0x20000618
 8000aa4:	08007b54 	.word	0x08007b54
 8000aa8:	08007e68 	.word	0x08007e68
 8000aac:	08007b78 	.word	0x08007b78
 8000ab0:	08007b8c 	.word	0x08007b8c
 8000ab4:	08007bcc 	.word	0x08007bcc

08000ab8 <Make_Connection>:
 * @brief  Make the device connectable
 * @param  None
 * @retval None
 */
void Make_Connection(void)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b08f      	sub	sp, #60	; 0x3c
 8000abc:	af08      	add	r7, sp, #32
  tBleStatus ret;

  if(BLE_Role == CLIENT) {
 8000abe:	4b3b      	ldr	r3, [pc, #236]	; (8000bac <Make_Connection+0xf4>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d133      	bne.n	8000b2e <Make_Connection+0x76>

    printf("Client Create Connection\n");
 8000ac6:	483a      	ldr	r0, [pc, #232]	; (8000bb0 <Make_Connection+0xf8>)
 8000ac8:	f006 f9b8 	bl	8006e3c <puts>
    tBDAddr bdaddr = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8000acc:	4a39      	ldr	r2, [pc, #228]	; (8000bb4 <Make_Connection+0xfc>)
 8000ace:	f107 0310 	add.w	r3, r7, #16
 8000ad2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ad6:	6018      	str	r0, [r3, #0]
 8000ad8:	3304      	adds	r3, #4
 8000ada:	8019      	strh	r1, [r3, #0]

    BSP_LED_On(LED2); //To indicate the start of the connection and discovery phase
 8000adc:	2000      	movs	r0, #0
 8000ade:	f001 f8eb 	bl	8001cb8 <BSP_LED_On>

    /*
    Scan_Interval, Scan_Window, Peer_Address_Type, Peer_Address, Own_Address_Type, Conn_Interval_Min,
    Conn_Interval_Max, Conn_Latency, Supervision_Timeout, Conn_Len_Min, Conn_Len_Max
    */
    ret = aci_gap_create_connection(SCAN_P, SCAN_L, PUBLIC_ADDR, bdaddr, PUBLIC_ADDR, CONN_P1, CONN_P2, 0,
 8000ae2:	f107 0210 	add.w	r2, r7, #16
 8000ae6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000aea:	9306      	str	r3, [sp, #24]
 8000aec:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000af0:	9305      	str	r3, [sp, #20]
 8000af2:	233c      	movs	r3, #60	; 0x3c
 8000af4:	9304      	str	r3, [sp, #16]
 8000af6:	2300      	movs	r3, #0
 8000af8:	9303      	str	r3, [sp, #12]
 8000afa:	2328      	movs	r3, #40	; 0x28
 8000afc:	9302      	str	r3, [sp, #8]
 8000afe:	2328      	movs	r3, #40	; 0x28
 8000b00:	9301      	str	r3, [sp, #4]
 8000b02:	2300      	movs	r3, #0
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	4613      	mov	r3, r2
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b0e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000b12:	f004 fd9b 	bl	800564c <aci_gap_create_connection>
 8000b16:	4603      	mov	r3, r0
 8000b18:	75fb      	strb	r3, [r7, #23]
                                    SUPERV_TIMEOUT, CONN_L1 , CONN_L2);

    if (ret != 0){
 8000b1a:	7dfb      	ldrb	r3, [r7, #23]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d041      	beq.n	8000ba4 <Make_Connection+0xec>
      printf("Error while starting connection.\n");
 8000b20:	4825      	ldr	r0, [pc, #148]	; (8000bb8 <Make_Connection+0x100>)
 8000b22:	f006 f98b 	bl	8006e3c <puts>
      HAL_Delay(100);
 8000b26:	2064      	movs	r0, #100	; 0x64
 8000b28:	f001 fb38 	bl	800219c <HAL_Delay>
    */
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
                                   NO_WHITE_LIST_USE, 13, local_name, 0, NULL, 0, 0);
    PRINT_MESG_DBG("%d\n",ret);
  }
}
 8000b2c:	e03a      	b.n	8000ba4 <Make_Connection+0xec>
    const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'B','l','u','e','N','R','G','_','C','h','a','t'};
 8000b2e:	4b23      	ldr	r3, [pc, #140]	; (8000bbc <Make_Connection+0x104>)
 8000b30:	463c      	mov	r4, r7
 8000b32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b34:	c407      	stmia	r4!, {r0, r1, r2}
 8000b36:	7023      	strb	r3, [r4, #0]
    hci_le_set_scan_resp_data(0,NULL);
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f005 fa88 	bl	8006050 <hci_le_set_scan_resp_data>
    PRINT_MESG_DBG("General Discoverable Mode ");
 8000b40:	481f      	ldr	r0, [pc, #124]	; (8000bc0 <Make_Connection+0x108>)
 8000b42:	f005 fe58 	bl	80067f6 <DbgTraceGetFileName>
 8000b46:	4601      	mov	r1, r0
 8000b48:	23d1      	movs	r3, #209	; 0xd1
 8000b4a:	4a1e      	ldr	r2, [pc, #120]	; (8000bc4 <Make_Connection+0x10c>)
 8000b4c:	481e      	ldr	r0, [pc, #120]	; (8000bc8 <Make_Connection+0x110>)
 8000b4e:	f006 f8ed 	bl	8006d2c <iprintf>
 8000b52:	481e      	ldr	r0, [pc, #120]	; (8000bcc <Make_Connection+0x114>)
 8000b54:	f006 f8ea 	bl	8006d2c <iprintf>
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
 8000b58:	2300      	movs	r3, #0
 8000b5a:	9306      	str	r3, [sp, #24]
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	9305      	str	r3, [sp, #20]
 8000b60:	2300      	movs	r3, #0
 8000b62:	9304      	str	r3, [sp, #16]
 8000b64:	2300      	movs	r3, #0
 8000b66:	9303      	str	r3, [sp, #12]
 8000b68:	463b      	mov	r3, r7
 8000b6a:	9302      	str	r3, [sp, #8]
 8000b6c:	230d      	movs	r3, #13
 8000b6e:	9301      	str	r3, [sp, #4]
 8000b70:	2300      	movs	r3, #0
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	2300      	movs	r3, #0
 8000b76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f004 fc1e 	bl	80053c0 <aci_gap_set_discoverable>
 8000b84:	4603      	mov	r3, r0
 8000b86:	75fb      	strb	r3, [r7, #23]
    PRINT_MESG_DBG("%d\n",ret);
 8000b88:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <Make_Connection+0x108>)
 8000b8a:	f005 fe34 	bl	80067f6 <DbgTraceGetFileName>
 8000b8e:	4601      	mov	r1, r0
 8000b90:	23d9      	movs	r3, #217	; 0xd9
 8000b92:	4a0c      	ldr	r2, [pc, #48]	; (8000bc4 <Make_Connection+0x10c>)
 8000b94:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <Make_Connection+0x110>)
 8000b96:	f006 f8c9 	bl	8006d2c <iprintf>
 8000b9a:	7dfb      	ldrb	r3, [r7, #23]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <Make_Connection+0x118>)
 8000ba0:	f006 f8c4 	bl	8006d2c <iprintf>
}
 8000ba4:	bf00      	nop
 8000ba6:	371c      	adds	r7, #28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd90      	pop	{r4, r7, pc}
 8000bac:	20000001 	.word	0x20000001
 8000bb0:	08007bf0 	.word	0x08007bf0
 8000bb4:	08007c50 	.word	0x08007c50
 8000bb8:	08007c0c 	.word	0x08007c0c
 8000bbc:	08007c58 	.word	0x08007c58
 8000bc0:	08007b54 	.word	0x08007b54
 8000bc4:	08007e7c 	.word	0x08007e7c
 8000bc8:	08007b78 	.word	0x08007b78
 8000bcc:	08007c30 	.word	0x08007c30
 8000bd0:	08007c4c 	.word	0x08007c4c

08000bd4 <startReadTXCharHandle>:
 * @brief  Discovery TX characteristic handle by UUID 128 bits
 * @param  None
 * @retval None
 */
void startReadTXCharHandle(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af02      	add	r7, sp, #8
  if (!start_read_tx_char_handle)
 8000bda:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <startReadTXCharHandle+0x58>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d11e      	bne.n	8000c22 <startReadTXCharHandle+0x4e>
  {
    PRINT_MESG_DBG("Start reading TX Char Handle\n");
 8000be4:	4812      	ldr	r0, [pc, #72]	; (8000c30 <startReadTXCharHandle+0x5c>)
 8000be6:	f005 fe06 	bl	80067f6 <DbgTraceGetFileName>
 8000bea:	4601      	mov	r1, r0
 8000bec:	23e6      	movs	r3, #230	; 0xe6
 8000bee:	4a11      	ldr	r2, [pc, #68]	; (8000c34 <startReadTXCharHandle+0x60>)
 8000bf0:	4811      	ldr	r0, [pc, #68]	; (8000c38 <startReadTXCharHandle+0x64>)
 8000bf2:	f006 f89b 	bl	8006d2c <iprintf>
 8000bf6:	4811      	ldr	r0, [pc, #68]	; (8000c3c <startReadTXCharHandle+0x68>)
 8000bf8:	f006 f920 	bl	8006e3c <puts>

   // const uint8_t charUuid128_TX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
    uint8_t charUuid128_TX[16];
    BLE_str2uuid("D973F2E1-B19E-11E2-9E96-0800200C9A66", charUuid128_TX);
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	4619      	mov	r1, r3
 8000c00:	480f      	ldr	r0, [pc, #60]	; (8000c40 <startReadTXCharHandle+0x6c>)
 8000c02:	f7ff fe7d 	bl	8000900 <BLE_str2uuid>
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_TX);
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <startReadTXCharHandle+0x70>)
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	b298      	uxth	r0, r3
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	2302      	movs	r3, #2
 8000c12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c16:	2101      	movs	r1, #1
 8000c18:	f004 ff80 	bl	8005b1c <aci_gatt_disc_charac_by_uuid>
    start_read_tx_char_handle = TRUE;
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <startReadTXCharHandle+0x58>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
  }
}
 8000c22:	bf00      	nop
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	2000021b 	.word	0x2000021b
 8000c30:	08007b54 	.word	0x08007b54
 8000c34:	08007e8c 	.word	0x08007e8c
 8000c38:	08007b78 	.word	0x08007b78
 8000c3c:	08007c68 	.word	0x08007c68
 8000c40:	08007b04 	.word	0x08007b04
 8000c44:	20000218 	.word	0x20000218

08000c48 <startReadRXCharHandle>:
 * @brief  Discovery RX characteristic handle by UUID 128 bits
 * @param  None
 * @retval None
 */
void startReadRXCharHandle(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af02      	add	r7, sp, #8
  if (!start_read_rx_char_handle)
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <startReadRXCharHandle+0x58>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d11e      	bne.n	8000c96 <startReadRXCharHandle+0x4e>
  {
    PRINT_MESG_DBG("Start reading RX Char Handle\n");
 8000c58:	4812      	ldr	r0, [pc, #72]	; (8000ca4 <startReadRXCharHandle+0x5c>)
 8000c5a:	f005 fdcc 	bl	80067f6 <DbgTraceGetFileName>
 8000c5e:	4601      	mov	r1, r0
 8000c60:	23f9      	movs	r3, #249	; 0xf9
 8000c62:	4a11      	ldr	r2, [pc, #68]	; (8000ca8 <startReadRXCharHandle+0x60>)
 8000c64:	4811      	ldr	r0, [pc, #68]	; (8000cac <startReadRXCharHandle+0x64>)
 8000c66:	f006 f861 	bl	8006d2c <iprintf>
 8000c6a:	4811      	ldr	r0, [pc, #68]	; (8000cb0 <startReadRXCharHandle+0x68>)
 8000c6c:	f006 f8e6 	bl	8006e3c <puts>

    //const uint8_t charUuid128_RX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
    uint8_t charUuid128_RX[16];
    BLE_str2uuid("D973F2E2-B19E-11E2-9E96-0800200C9A66", charUuid128_RX);
 8000c70:	463b      	mov	r3, r7
 8000c72:	4619      	mov	r1, r3
 8000c74:	480f      	ldr	r0, [pc, #60]	; (8000cb4 <startReadRXCharHandle+0x6c>)
 8000c76:	f7ff fe43 	bl	8000900 <BLE_str2uuid>
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_RX);
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <startReadRXCharHandle+0x70>)
 8000c7c:	881b      	ldrh	r3, [r3, #0]
 8000c7e:	b298      	uxth	r0, r3
 8000c80:	463b      	mov	r3, r7
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	2302      	movs	r3, #2
 8000c86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	f004 ff46 	bl	8005b1c <aci_gatt_disc_charac_by_uuid>
    start_read_rx_char_handle = TRUE;
 8000c90:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <startReadRXCharHandle+0x58>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	701a      	strb	r2, [r3, #0]
  }
}
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	2000021c 	.word	0x2000021c
 8000ca4:	08007b54 	.word	0x08007b54
 8000ca8:	08007ea4 	.word	0x08007ea4
 8000cac:	08007b78 	.word	0x08007b78
 8000cb0:	08007c88 	.word	0x08007c88
 8000cb4:	08007b2c 	.word	0x08007b2c
 8000cb8:	20000218 	.word	0x20000218

08000cbc <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	70fb      	strb	r3, [r7, #3]
  BSP_LED_Toggle(LED2);
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f001 f821 	bl	8001d10 <BSP_LED_Toggle>

  for(int i = 0; i < Nb_bytes; i++) {
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	e009      	b.n	8000ce8 <receiveData+0x2c>
    printf("%c", data_buffer[i]);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f006 f83d 	bl	8006d5c <putchar>
  for(int i = 0; i < Nb_bytes; i++) {
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	78fb      	ldrb	r3, [r7, #3]
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	dbf1      	blt.n	8000cd4 <receiveData+0x18>
  }
  fflush(stdout);
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <receiveData+0x48>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f005 fe5c 	bl	80069b4 <fflush>
}
 8000cfc:	bf00      	nop
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000024 	.word	0x20000024

08000d08 <sendData>:
 * @param  data_buffer : pointer to data to be sent
 * @param  Nb_bytes : number of bytes to send
 * @retval None
 */
void sendData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af02      	add	r7, sp, #8
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	70fb      	strb	r3, [r7, #3]
  if(BLE_Role == SERVER) {
 8000d14:	4b1c      	ldr	r3, [pc, #112]	; (8000d88 <sendData+0x80>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d118      	bne.n	8000d4e <sendData+0x46>
		PRINT_MESG_DBG("Send Data by Server\n");
 8000d1c:	481b      	ldr	r0, [pc, #108]	; (8000d8c <sendData+0x84>)
 8000d1e:	f005 fd6a 	bl	80067f6 <DbgTraceGetFileName>
 8000d22:	4601      	mov	r1, r0
 8000d24:	f44f 738f 	mov.w	r3, #286	; 0x11e
 8000d28:	4a19      	ldr	r2, [pc, #100]	; (8000d90 <sendData+0x88>)
 8000d2a:	481a      	ldr	r0, [pc, #104]	; (8000d94 <sendData+0x8c>)
 8000d2c:	f005 fffe 	bl	8006d2c <iprintf>
 8000d30:	4819      	ldr	r0, [pc, #100]	; (8000d98 <sendData+0x90>)
 8000d32:	f006 f883 	bl	8006e3c <puts>
    aci_gatt_update_char_value(sampleServHandle,TXCharHandle, 0, Nb_bytes, data_buffer);
 8000d36:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <sendData+0x94>)
 8000d38:	8818      	ldrh	r0, [r3, #0]
 8000d3a:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <sendData+0x98>)
 8000d3c:	8819      	ldrh	r1, [r3, #0]
 8000d3e:	78fa      	ldrb	r2, [r7, #3]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	4613      	mov	r3, r2
 8000d46:	2200      	movs	r2, #0
 8000d48:	f004 fe55 	bl	80059f6 <aci_gatt_update_char_value>
  }
  else {
	    PRINT_MESG_DBG("Send Data by Client\n");
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
  }
}
 8000d4c:	e017      	b.n	8000d7e <sendData+0x76>
	    PRINT_MESG_DBG("Send Data by Client\n");
 8000d4e:	480f      	ldr	r0, [pc, #60]	; (8000d8c <sendData+0x84>)
 8000d50:	f005 fd51 	bl	80067f6 <DbgTraceGetFileName>
 8000d54:	4601      	mov	r1, r0
 8000d56:	f44f 7391 	mov.w	r3, #290	; 0x122
 8000d5a:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <sendData+0x88>)
 8000d5c:	480d      	ldr	r0, [pc, #52]	; (8000d94 <sendData+0x8c>)
 8000d5e:	f005 ffe5 	bl	8006d2c <iprintf>
 8000d62:	4810      	ldr	r0, [pc, #64]	; (8000da4 <sendData+0x9c>)
 8000d64:	f006 f86a 	bl	8006e3c <puts>
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <sendData+0xa0>)
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	b298      	uxth	r0, r3
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <sendData+0xa4>)
 8000d70:	881b      	ldrh	r3, [r3, #0]
 8000d72:	3301      	adds	r3, #1
 8000d74:	b299      	uxth	r1, r3
 8000d76:	78fa      	ldrb	r2, [r7, #3]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f004 ffdb 	bl	8005d34 <aci_gatt_write_without_response>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000001 	.word	0x20000001
 8000d8c:	08007b54 	.word	0x08007b54
 8000d90:	08007ebc 	.word	0x08007ebc
 8000d94:	08007b78 	.word	0x08007b78
 8000d98:	08007ca8 	.word	0x08007ca8
 8000d9c:	20000616 	.word	0x20000616
 8000da0:	20000614 	.word	0x20000614
 8000da4:	08007cbc 	.word	0x08007cbc
 8000da8:	20000218 	.word	0x20000218
 8000dac:	20000612 	.word	0x20000612

08000db0 <enableNotification>:
 * @brief  Enable notification
 * @param  None
 * @retval None
 */
void enableNotification(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
  uint8_t client_char_conf_data[] = {0x01, 0x00}; // Enable notifications
 8000db6:	2301      	movs	r3, #1
 8000db8:	703b      	strb	r3, [r7, #0]
 8000dba:	2300      	movs	r3, #0
 8000dbc:	707b      	strb	r3, [r7, #1]

  uint32_t tickstart = HAL_GetTick();
 8000dbe:	f001 f9e1 	bl	8002184 <HAL_GetTick>
 8000dc2:	6078      	str	r0, [r7, #4]

  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 8000dc4:	e008      	b.n	8000dd8 <enableNotification+0x28>
    /* Radio is busy */
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8000dc6:	f001 f9dd 	bl	8002184 <HAL_GetTick>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	f242 7210 	movw	r2, #10000	; 0x2710
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d80e      	bhi.n	8000df6 <enableNotification+0x46>
  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <enableNotification+0x58>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	b298      	uxth	r0, r3
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <enableNotification+0x5c>)
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	3302      	adds	r3, #2
 8000de4:	b299      	uxth	r1, r3
 8000de6:	463b      	mov	r3, r7
 8000de8:	2202      	movs	r2, #2
 8000dea:	f004 ff26 	bl	8005c3a <aci_gatt_write_charac_descriptor>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b46      	cmp	r3, #70	; 0x46
 8000df2:	d0e8      	beq.n	8000dc6 <enableNotification+0x16>
 8000df4:	e000      	b.n	8000df8 <enableNotification+0x48>
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8000df6:	bf00      	nop
  }
  notification_enabled = TRUE;
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <enableNotification+0x60>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	701a      	strb	r2, [r3, #0]
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000218 	.word	0x20000218
 8000e0c:	20000610 	.word	0x20000610
 8000e10:	2000021a 	.word	0x2000021a

08000e14 <Attribute_Modified_CB>:
 * @param  data_length : size of the modified attribute data
 * @param  att_data : pointer to the modified attribute data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	603a      	str	r2, [r7, #0]
 8000e1e:	80fb      	strh	r3, [r7, #6]
 8000e20:	460b      	mov	r3, r1
 8000e22:	717b      	strb	r3, [r7, #5]
	PRINT_MESG_DBG("handle      %u\n", handle);
 8000e24:	4830      	ldr	r0, [pc, #192]	; (8000ee8 <Attribute_Modified_CB+0xd4>)
 8000e26:	f005 fce6 	bl	80067f6 <DbgTraceGetFileName>
 8000e2a:	4601      	mov	r1, r0
 8000e2c:	f44f 73a1 	mov.w	r3, #322	; 0x142
 8000e30:	4a2e      	ldr	r2, [pc, #184]	; (8000eec <Attribute_Modified_CB+0xd8>)
 8000e32:	482f      	ldr	r0, [pc, #188]	; (8000ef0 <Attribute_Modified_CB+0xdc>)
 8000e34:	f005 ff7a 	bl	8006d2c <iprintf>
 8000e38:	88fb      	ldrh	r3, [r7, #6]
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	482d      	ldr	r0, [pc, #180]	; (8000ef4 <Attribute_Modified_CB+0xe0>)
 8000e3e:	f005 ff75 	bl	8006d2c <iprintf>
	PRINT_MESG_DBG("data length %u\n", data_length);
 8000e42:	4829      	ldr	r0, [pc, #164]	; (8000ee8 <Attribute_Modified_CB+0xd4>)
 8000e44:	f005 fcd7 	bl	80067f6 <DbgTraceGetFileName>
 8000e48:	4601      	mov	r1, r0
 8000e4a:	f240 1343 	movw	r3, #323	; 0x143
 8000e4e:	4a27      	ldr	r2, [pc, #156]	; (8000eec <Attribute_Modified_CB+0xd8>)
 8000e50:	4827      	ldr	r0, [pc, #156]	; (8000ef0 <Attribute_Modified_CB+0xdc>)
 8000e52:	f005 ff6b 	bl	8006d2c <iprintf>
 8000e56:	797b      	ldrb	r3, [r7, #5]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4827      	ldr	r0, [pc, #156]	; (8000ef8 <Attribute_Modified_CB+0xe4>)
 8000e5c:	f005 ff66 	bl	8006d2c <iprintf>

  if(handle == RXCharHandle + 1){
 8000e60:	88fa      	ldrh	r2, [r7, #6]
 8000e62:	4b26      	ldr	r3, [pc, #152]	; (8000efc <Attribute_Modified_CB+0xe8>)
 8000e64:	881b      	ldrh	r3, [r3, #0]
 8000e66:	3301      	adds	r3, #1
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d11f      	bne.n	8000eac <Attribute_Modified_CB+0x98>
	PRINT_MESG_DBG("attribute RXChar modified by client\n");
 8000e6c:	481e      	ldr	r0, [pc, #120]	; (8000ee8 <Attribute_Modified_CB+0xd4>)
 8000e6e:	f005 fcc2 	bl	80067f6 <DbgTraceGetFileName>
 8000e72:	4601      	mov	r1, r0
 8000e74:	f44f 73a3 	mov.w	r3, #326	; 0x146
 8000e78:	4a1c      	ldr	r2, [pc, #112]	; (8000eec <Attribute_Modified_CB+0xd8>)
 8000e7a:	481d      	ldr	r0, [pc, #116]	; (8000ef0 <Attribute_Modified_CB+0xdc>)
 8000e7c:	f005 ff56 	bl	8006d2c <iprintf>
 8000e80:	481f      	ldr	r0, [pc, #124]	; (8000f00 <Attribute_Modified_CB+0xec>)
 8000e82:	f005 ffdb 	bl	8006e3c <puts>
	PRINT_MESG_DBG("receive Data from Client\n");
 8000e86:	4818      	ldr	r0, [pc, #96]	; (8000ee8 <Attribute_Modified_CB+0xd4>)
 8000e88:	f005 fcb5 	bl	80067f6 <DbgTraceGetFileName>
 8000e8c:	4601      	mov	r1, r0
 8000e8e:	f240 1347 	movw	r3, #327	; 0x147
 8000e92:	4a16      	ldr	r2, [pc, #88]	; (8000eec <Attribute_Modified_CB+0xd8>)
 8000e94:	4816      	ldr	r0, [pc, #88]	; (8000ef0 <Attribute_Modified_CB+0xdc>)
 8000e96:	f005 ff49 	bl	8006d2c <iprintf>
 8000e9a:	481a      	ldr	r0, [pc, #104]	; (8000f04 <Attribute_Modified_CB+0xf0>)
 8000e9c:	f005 ffce 	bl	8006e3c <puts>
    receiveData(att_data, data_length);
 8000ea0:	797b      	ldrb	r3, [r7, #5]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	6838      	ldr	r0, [r7, #0]
 8000ea6:	f7ff ff09 	bl	8000cbc <receiveData>
  } else if (handle == TXCharHandle + 2) {
		    PRINT_MESG_DBG("attribute TXChar modified by client\n");
            if(att_data[0] == 0x01) notification_enabled = TRUE;
            }
}
 8000eaa:	e019      	b.n	8000ee0 <Attribute_Modified_CB+0xcc>
  } else if (handle == TXCharHandle + 2) {
 8000eac:	88fa      	ldrh	r2, [r7, #6]
 8000eae:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <Attribute_Modified_CB+0xf4>)
 8000eb0:	881b      	ldrh	r3, [r3, #0]
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d113      	bne.n	8000ee0 <Attribute_Modified_CB+0xcc>
		    PRINT_MESG_DBG("attribute TXChar modified by client\n");
 8000eb8:	480b      	ldr	r0, [pc, #44]	; (8000ee8 <Attribute_Modified_CB+0xd4>)
 8000eba:	f005 fc9c 	bl	80067f6 <DbgTraceGetFileName>
 8000ebe:	4601      	mov	r1, r0
 8000ec0:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8000ec4:	4a09      	ldr	r2, [pc, #36]	; (8000eec <Attribute_Modified_CB+0xd8>)
 8000ec6:	480a      	ldr	r0, [pc, #40]	; (8000ef0 <Attribute_Modified_CB+0xdc>)
 8000ec8:	f005 ff30 	bl	8006d2c <iprintf>
 8000ecc:	480f      	ldr	r0, [pc, #60]	; (8000f0c <Attribute_Modified_CB+0xf8>)
 8000ece:	f005 ffb5 	bl	8006e3c <puts>
            if(att_data[0] == 0x01) notification_enabled = TRUE;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d102      	bne.n	8000ee0 <Attribute_Modified_CB+0xcc>
 8000eda:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <Attribute_Modified_CB+0xfc>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	701a      	strb	r2, [r3, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	08007b54 	.word	0x08007b54
 8000eec:	08007ec8 	.word	0x08007ec8
 8000ef0:	08007b78 	.word	0x08007b78
 8000ef4:	08007cd0 	.word	0x08007cd0
 8000ef8:	08007ce0 	.word	0x08007ce0
 8000efc:	20000618 	.word	0x20000618
 8000f00:	08007cf0 	.word	0x08007cf0
 8000f04:	08007d14 	.word	0x08007d14
 8000f08:	20000614 	.word	0x20000614
 8000f0c:	08007d30 	.word	0x08007d30
 8000f10:	2000021a 	.word	0x2000021a

08000f14 <GAP_ConnectionComplete_CB>:
 * @param  addr : Address of peer device
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <GAP_ConnectionComplete_CB+0x54>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8000f26:	4a11      	ldr	r2, [pc, #68]	; (8000f6c <GAP_ConnectionComplete_CB+0x58>)
 8000f28:	887b      	ldrh	r3, [r7, #2]
 8000f2a:	8013      	strh	r3, [r2, #0]

  printf("Connected to device:");
 8000f2c:	4810      	ldr	r0, [pc, #64]	; (8000f70 <GAP_ConnectionComplete_CB+0x5c>)
 8000f2e:	f005 fefd 	bl	8006d2c <iprintf>
  for(int i = 5; i > 0; i--){
 8000f32:	2305      	movs	r3, #5
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	e00a      	b.n	8000f4e <GAP_ConnectionComplete_CB+0x3a>
    printf("%02X-", addr[i]);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4619      	mov	r1, r3
 8000f42:	480c      	ldr	r0, [pc, #48]	; (8000f74 <GAP_ConnectionComplete_CB+0x60>)
 8000f44:	f005 fef2 	bl	8006d2c <iprintf>
  for(int i = 5; i > 0; i--){
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	dcf1      	bgt.n	8000f38 <GAP_ConnectionComplete_CB+0x24>
  }
  printf("%02X\n", addr[0]);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4807      	ldr	r0, [pc, #28]	; (8000f78 <GAP_ConnectionComplete_CB+0x64>)
 8000f5c:	f005 fee6 	bl	8006d2c <iprintf>
}
 8000f60:	bf00      	nop
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000214 	.word	0x20000214
 8000f6c:	20000218 	.word	0x20000218
 8000f70:	08007d54 	.word	0x08007d54
 8000f74:	08007d6c 	.word	0x08007d6c
 8000f78:	08007d74 	.word	0x08007d74

08000f7c <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  connected = FALSE;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <GAP_DisconnectionComplete_CB+0x38>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]

  printf("Disconnected\n");
 8000f86:	480c      	ldr	r0, [pc, #48]	; (8000fb8 <GAP_DisconnectionComplete_CB+0x3c>)
 8000f88:	f005 ff58 	bl	8006e3c <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <GAP_DisconnectionComplete_CB+0x40>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <GAP_DisconnectionComplete_CB+0x44>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
  start_read_tx_char_handle = FALSE;
 8000f98:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <GAP_DisconnectionComplete_CB+0x48>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
  start_read_rx_char_handle = FALSE;
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <GAP_DisconnectionComplete_CB+0x4c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
  end_read_tx_char_handle = FALSE;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <GAP_DisconnectionComplete_CB+0x50>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
  end_read_rx_char_handle = FALSE;
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <GAP_DisconnectionComplete_CB+0x54>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000214 	.word	0x20000214
 8000fb8:	08007d7c 	.word	0x08007d7c
 8000fbc:	20000002 	.word	0x20000002
 8000fc0:	2000021a 	.word	0x2000021a
 8000fc4:	2000021b 	.word	0x2000021b
 8000fc8:	2000021c 	.word	0x2000021c
 8000fcc:	2000021d 	.word	0x2000021d
 8000fd0:	2000021e 	.word	0x2000021e

08000fd4 <GATT_Notification_CB>:
 * @param  attr_len    Length of attribute value in the notification
 * @param  attr_value  Attribute value in the notification
 * @retval None
 */
void GATT_Notification_CB(uint16_t attr_handle, uint8_t attr_len, uint8_t *attr_value)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	603a      	str	r2, [r7, #0]
 8000fde:	80fb      	strh	r3, [r7, #6]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	717b      	strb	r3, [r7, #5]
  if (attr_handle == tx_handle+1) {
 8000fe4:	88fa      	ldrh	r2, [r7, #6]
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	; (800101c <GATT_Notification_CB+0x48>)
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	3301      	adds	r3, #1
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d111      	bne.n	8001014 <GATT_Notification_CB+0x40>
	PRINT_MESG_DBG("receive Data from Server\n");
 8000ff0:	480b      	ldr	r0, [pc, #44]	; (8001020 <GATT_Notification_CB+0x4c>)
 8000ff2:	f005 fc00 	bl	80067f6 <DbgTraceGetFileName>
 8000ff6:	4601      	mov	r1, r0
 8000ff8:	f44f 73bf 	mov.w	r3, #382	; 0x17e
 8000ffc:	4a09      	ldr	r2, [pc, #36]	; (8001024 <GATT_Notification_CB+0x50>)
 8000ffe:	480a      	ldr	r0, [pc, #40]	; (8001028 <GATT_Notification_CB+0x54>)
 8001000:	f005 fe94 	bl	8006d2c <iprintf>
 8001004:	4809      	ldr	r0, [pc, #36]	; (800102c <GATT_Notification_CB+0x58>)
 8001006:	f005 ff19 	bl	8006e3c <puts>
    receiveData(attr_value, attr_len);
 800100a:	797b      	ldrb	r3, [r7, #5]
 800100c:	4619      	mov	r1, r3
 800100e:	6838      	ldr	r0, [r7, #0]
 8001010:	f7ff fe54 	bl	8000cbc <receiveData>
  }
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000610 	.word	0x20000610
 8001020:	08007b54 	.word	0x08007b54
 8001024:	08007ee0 	.word	0x08007ee0
 8001028:	08007b78 	.word	0x08007b78
 800102c:	08007d8c 	.word	0x08007d8c

08001030 <user_notify>:
 *         parsed.
 * @param  pData  Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08c      	sub	sp, #48	; 0x30
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 800103c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800103e:	3301      	adds	r3, #1
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28

  if(hci_pckt->type != HCI_EVENT_PKT)
 8001042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b04      	cmp	r3, #4
 8001048:	f040 8115 	bne.w	8001276 <user_notify+0x246>
    return;

  switch(event_pckt->evt){
 800104c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b3e      	cmp	r3, #62	; 0x3e
 8001052:	d007      	beq.n	8001064 <user_notify+0x34>
 8001054:	2bff      	cmp	r3, #255	; 0xff
 8001056:	d01c      	beq.n	8001092 <user_notify+0x62>
 8001058:	2b05      	cmp	r3, #5
 800105a:	f040 810f 	bne.w	800127c <user_notify+0x24c>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 800105e:	f7ff ff8d 	bl	8000f7c <GAP_DisconnectionComplete_CB>
    }
    break;
 8001062:	e10b      	b.n	800127c <user_notify+0x24c>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8001064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001066:	3302      	adds	r3, #2
 8001068:	613b      	str	r3, [r7, #16]

      switch(evt->subevent){
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d000      	beq.n	8001074 <user_notify+0x44>
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
        }
        break;
      }
    }
    break;
 8001072:	e103      	b.n	800127c <user_notify+0x24c>
          evt_le_connection_complete *cc = (void *)evt->data;
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	3301      	adds	r3, #1
 8001078:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	1d5a      	adds	r2, r3, #5
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001084:	b29b      	uxth	r3, r3
 8001086:	4619      	mov	r1, r3
 8001088:	4610      	mov	r0, r2
 800108a:	f7ff ff43 	bl	8000f14 <GAP_ConnectionComplete_CB>
        break;
 800108e:	bf00      	nop
    break;
 8001090:	e0f4      	b.n	800127c <user_notify+0x24c>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8001092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001094:	3302      	adds	r3, #2
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
      switch(blue_evt->ecode){
 8001098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	b29b      	uxth	r3, r3
 800109e:	f6a3 4301 	subw	r3, r3, #3073	; 0xc01
 80010a2:	2b11      	cmp	r3, #17
 80010a4:	f200 80e9 	bhi.w	800127a <user_notify+0x24a>
 80010a8:	a201      	add	r2, pc, #4	; (adr r2, 80010b0 <user_notify+0x80>)
 80010aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ae:	bf00      	nop
 80010b0:	080010f9 	.word	0x080010f9
 80010b4:	0800127b 	.word	0x0800127b
 80010b8:	0800127b 	.word	0x0800127b
 80010bc:	0800127b 	.word	0x0800127b
 80010c0:	0800127b 	.word	0x0800127b
 80010c4:	0800127b 	.word	0x0800127b
 80010c8:	0800127b 	.word	0x0800127b
 80010cc:	0800127b 	.word	0x0800127b
 80010d0:	0800127b 	.word	0x0800127b
 80010d4:	0800127b 	.word	0x0800127b
 80010d8:	0800127b 	.word	0x0800127b
 80010dc:	0800127b 	.word	0x0800127b
 80010e0:	0800127b 	.word	0x0800127b
 80010e4:	0800127b 	.word	0x0800127b
 80010e8:	08001153 	.word	0x08001153
 80010ec:	08001213 	.word	0x08001213
 80010f0:	0800127b 	.word	0x0800127b
 80010f4:	0800118f 	.word	0x0800118f
      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
    	  /*
    	   Generated by the GATT server when a client modifies any attribute on the server, if event is enabled.
    	   */
        {
        	PRINT_MESG_DBG("EVT_BLUE_GATT_ATTRIBUTE_MODIFIED\n");
 80010f8:	4862      	ldr	r0, [pc, #392]	; (8001284 <user_notify+0x254>)
 80010fa:	f005 fb7c 	bl	80067f6 <DbgTraceGetFileName>
 80010fe:	4601      	mov	r1, r0
 8001100:	f44f 73da 	mov.w	r3, #436	; 0x1b4
 8001104:	4a60      	ldr	r2, [pc, #384]	; (8001288 <user_notify+0x258>)
 8001106:	4861      	ldr	r0, [pc, #388]	; (800128c <user_notify+0x25c>)
 8001108:	f005 fe10 	bl	8006d2c <iprintf>
 800110c:	4860      	ldr	r0, [pc, #384]	; (8001290 <user_notify+0x260>)
 800110e:	f005 fe95 	bl	8006e3c <puts>
          if (bnrg_expansion_board == IDB05A1) {
 8001112:	4b60      	ldr	r3, [pc, #384]	; (8001294 <user_notify+0x264>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d10d      	bne.n	8001136 <user_notify+0x106>
            evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
 800111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111c:	3302      	adds	r3, #2
 800111e:	617b      	str	r3, [r7, #20]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	885b      	ldrh	r3, [r3, #2]
 8001124:	b298      	uxth	r0, r3
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	7919      	ldrb	r1, [r3, #4]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	3307      	adds	r3, #7
 800112e:	461a      	mov	r2, r3
 8001130:	f7ff fe70 	bl	8000e14 <Attribute_Modified_CB>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
          }

        }
        break;
 8001134:	e09d      	b.n	8001272 <user_notify+0x242>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
 8001136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001138:	3302      	adds	r3, #2
 800113a:	61bb      	str	r3, [r7, #24]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	885b      	ldrh	r3, [r3, #2]
 8001140:	b298      	uxth	r0, r3
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	7919      	ldrb	r1, [r3, #4]
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	3305      	adds	r3, #5
 800114a:	461a      	mov	r2, r3
 800114c:	f7ff fe62 	bl	8000e14 <Attribute_Modified_CB>
        break;
 8001150:	e08f      	b.n	8001272 <user_notify+0x242>
      case EVT_BLUE_GATT_NOTIFICATION:
    	  /*
    	   * Generated by the GATT client when a server notifies any attribute on the client
    	   */
        {
        	PRINT_MESG_DBG("EVT_BLUE_GATT_NOTIFICATION\n");
 8001152:	484c      	ldr	r0, [pc, #304]	; (8001284 <user_notify+0x254>)
 8001154:	f005 fb4f 	bl	80067f6 <DbgTraceGetFileName>
 8001158:	4601      	mov	r1, r0
 800115a:	f240 13c5 	movw	r3, #453	; 0x1c5
 800115e:	4a4a      	ldr	r2, [pc, #296]	; (8001288 <user_notify+0x258>)
 8001160:	484a      	ldr	r0, [pc, #296]	; (800128c <user_notify+0x25c>)
 8001162:	f005 fde3 	bl	8006d2c <iprintf>
 8001166:	484c      	ldr	r0, [pc, #304]	; (8001298 <user_notify+0x268>)
 8001168:	f005 fe68 	bl	8006e3c <puts>
          evt_gatt_attr_notification *evt = (evt_gatt_attr_notification*)blue_evt->data;
 800116c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116e:	3302      	adds	r3, #2
 8001170:	61fb      	str	r3, [r7, #28]
          GATT_Notification_CB(evt->attr_handle, evt->event_data_length - 2, evt->attr_value);
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8001178:	b298      	uxth	r0, r3
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	789b      	ldrb	r3, [r3, #2]
 800117e:	3b02      	subs	r3, #2
 8001180:	b2d9      	uxtb	r1, r3
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3305      	adds	r3, #5
 8001186:	461a      	mov	r2, r3
 8001188:	f7ff ff24 	bl	8000fd4 <GATT_Notification_CB>
        }
        break;
 800118c:	e071      	b.n	8001272 <user_notify+0x242>
      case EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP:
        if(BLE_Role == CLIENT) {
 800118e:	4b43      	ldr	r3, [pc, #268]	; (800129c <user_notify+0x26c>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d16a      	bne.n	800126c <user_notify+0x23c>
        	PRINT_MESG_DBG("EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP\n");
 8001196:	483b      	ldr	r0, [pc, #236]	; (8001284 <user_notify+0x254>)
 8001198:	f005 fb2d 	bl	80067f6 <DbgTraceGetFileName>
 800119c:	4601      	mov	r1, r0
 800119e:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 80011a2:	4a39      	ldr	r2, [pc, #228]	; (8001288 <user_notify+0x258>)
 80011a4:	4839      	ldr	r0, [pc, #228]	; (800128c <user_notify+0x25c>)
 80011a6:	f005 fdc1 	bl	8006d2c <iprintf>
 80011aa:	483d      	ldr	r0, [pc, #244]	; (80012a0 <user_notify+0x270>)
 80011ac:	f005 fe46 	bl	8006e3c <puts>

          evt_gatt_disc_read_char_by_uuid_resp *resp = (void*)blue_evt->data;
 80011b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b2:	3302      	adds	r3, #2
 80011b4:	623b      	str	r3, [r7, #32]

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 80011b6:	4b3b      	ldr	r3, [pc, #236]	; (80012a4 <user_notify+0x274>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d011      	beq.n	80011e4 <user_notify+0x1b4>
 80011c0:	4b39      	ldr	r3, [pc, #228]	; (80012a8 <user_notify+0x278>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d10c      	bne.n	80011e4 <user_notify+0x1b4>
          {
            tx_handle = resp->attr_handle;
 80011ca:	6a3b      	ldr	r3, [r7, #32]
 80011cc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	4b36      	ldr	r3, [pc, #216]	; (80012ac <user_notify+0x27c>)
 80011d4:	801a      	strh	r2, [r3, #0]
            printf("TX Char Handle %04X\n", tx_handle);
 80011d6:	4b35      	ldr	r3, [pc, #212]	; (80012ac <user_notify+0x27c>)
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	4619      	mov	r1, r3
 80011dc:	4834      	ldr	r0, [pc, #208]	; (80012b0 <user_notify+0x280>)
 80011de:	f005 fda5 	bl	8006d2c <iprintf>
          {
            rx_handle = resp->attr_handle;
            printf("RX Char Handle %04X\n", rx_handle);
          }
        }
        break;
 80011e2:	e043      	b.n	800126c <user_notify+0x23c>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 80011e4:	4b33      	ldr	r3, [pc, #204]	; (80012b4 <user_notify+0x284>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d03e      	beq.n	800126c <user_notify+0x23c>
 80011ee:	4b32      	ldr	r3, [pc, #200]	; (80012b8 <user_notify+0x288>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d139      	bne.n	800126c <user_notify+0x23c>
            rx_handle = resp->attr_handle;
 80011f8:	6a3b      	ldr	r3, [r7, #32]
 80011fa:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80011fe:	b29a      	uxth	r2, r3
 8001200:	4b2e      	ldr	r3, [pc, #184]	; (80012bc <user_notify+0x28c>)
 8001202:	801a      	strh	r2, [r3, #0]
            printf("RX Char Handle %04X\n", rx_handle);
 8001204:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <user_notify+0x28c>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	4619      	mov	r1, r3
 800120a:	482d      	ldr	r0, [pc, #180]	; (80012c0 <user_notify+0x290>)
 800120c:	f005 fd8e 	bl	8006d2c <iprintf>
        break;
 8001210:	e02c      	b.n	800126c <user_notify+0x23c>

      case EVT_BLUE_GATT_PROCEDURE_COMPLETE:
    	  /*
    	   * Once the services are enumerated, the BLE stack sends the EVT_BLUE_GATT_PROCEDURE_COMPLETE event
    	   */
        if(BLE_Role == CLIENT) {
 8001212:	4b22      	ldr	r3, [pc, #136]	; (800129c <user_notify+0x26c>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d12a      	bne.n	8001270 <user_notify+0x240>
        	PRINT_MESG_DBG("EVT_BLUE_GATT_PROCEDURE_COMPLETE\n");
 800121a:	481a      	ldr	r0, [pc, #104]	; (8001284 <user_notify+0x254>)
 800121c:	f005 faeb 	bl	80067f6 <DbgTraceGetFileName>
 8001220:	4601      	mov	r1, r0
 8001222:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8001226:	4a18      	ldr	r2, [pc, #96]	; (8001288 <user_notify+0x258>)
 8001228:	4818      	ldr	r0, [pc, #96]	; (800128c <user_notify+0x25c>)
 800122a:	f005 fd7f 	bl	8006d2c <iprintf>
 800122e:	4825      	ldr	r0, [pc, #148]	; (80012c4 <user_notify+0x294>)
 8001230:	f005 fe04 	bl	8006e3c <puts>
          /* Wait for gatt procedure complete event trigger related to Discovery Charac by UUID */
          //evt_gatt_procedure_complete *pr = (void*)blue_evt->data;

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8001234:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <user_notify+0x274>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d008      	beq.n	8001250 <user_notify+0x220>
 800123e:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <user_notify+0x278>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	2b00      	cmp	r3, #0
 8001246:	d103      	bne.n	8001250 <user_notify+0x220>
          {
            end_read_tx_char_handle = TRUE;
 8001248:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <user_notify+0x278>)
 800124a:	2201      	movs	r2, #1
 800124c:	701a      	strb	r2, [r3, #0]
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            end_read_rx_char_handle = TRUE;
          }
        }
        break;
 800124e:	e00f      	b.n	8001270 <user_notify+0x240>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8001250:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <user_notify+0x284>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00a      	beq.n	8001270 <user_notify+0x240>
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <user_notify+0x288>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	d105      	bne.n	8001270 <user_notify+0x240>
            end_read_rx_char_handle = TRUE;
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <user_notify+0x288>)
 8001266:	2201      	movs	r2, #1
 8001268:	701a      	strb	r2, [r3, #0]
        break;
 800126a:	e001      	b.n	8001270 <user_notify+0x240>
        break;
 800126c:	bf00      	nop
 800126e:	e000      	b.n	8001272 <user_notify+0x242>
        break;
 8001270:	bf00      	nop
      }
    }
    break;
 8001272:	bf00      	nop
 8001274:	e001      	b.n	800127a <user_notify+0x24a>
    return;
 8001276:	bf00      	nop
 8001278:	e000      	b.n	800127c <user_notify+0x24c>
    break;
 800127a:	bf00      	nop
  }
}
 800127c:	3730      	adds	r7, #48	; 0x30
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	08007b54 	.word	0x08007b54
 8001288:	08007ef8 	.word	0x08007ef8
 800128c:	08007b78 	.word	0x08007b78
 8001290:	08007da8 	.word	0x08007da8
 8001294:	20000210 	.word	0x20000210
 8001298:	08007dcc 	.word	0x08007dcc
 800129c:	20000001 	.word	0x20000001
 80012a0:	08007de8 	.word	0x08007de8
 80012a4:	2000021b 	.word	0x2000021b
 80012a8:	2000021d 	.word	0x2000021d
 80012ac:	20000610 	.word	0x20000610
 80012b0:	08007e14 	.word	0x08007e14
 80012b4:	2000021c 	.word	0x2000021c
 80012b8:	2000021e 	.word	0x2000021e
 80012bc:	20000612 	.word	0x20000612
 80012c0:	08007e2c 	.word	0x08007e2c
 80012c4:	08007e44 	.word	0x08007e44

080012c8 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d0:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <HCI_TL_SPI_Init+0x88>)
 80012d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d4:	4a1e      	ldr	r2, [pc, #120]	; (8001350 <HCI_TL_SPI_Init+0x88>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012dc:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <HCI_TL_SPI_Init+0x88>)
 80012de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80012e8:	2301      	movs	r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <HCI_TL_SPI_Init+0x8c>)
 80012ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	4619      	mov	r1, r3
 80012fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fe:	f001 f8df 	bl	80024c0 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8001302:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001306:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001308:	2301      	movs	r3, #1
 800130a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8001314:	f107 030c 	add.w	r3, r7, #12
 8001318:	4619      	mov	r1, r3
 800131a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131e:	f001 f8cf 	bl	80024c0 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8001322:	2302      	movs	r3, #2
 8001324:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001326:	2301      	movs	r3, #1
 8001328:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2300      	movs	r3, #0
 8001330:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8001332:	f107 030c 	add.w	r3, r7, #12
 8001336:	4619      	mov	r1, r3
 8001338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133c:	f001 f8c0 	bl	80024c0 <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 8001340:	f000 faa8 	bl	8001894 <BSP_SPI1_Init>
 8001344:	4603      	mov	r3, r0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3720      	adds	r7, #32
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000
 8001354:	10110000 	.word	0x10110000

08001358 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 800135c:	2101      	movs	r1, #1
 800135e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001362:	f001 fa55 	bl	8002810 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8001366:	2102      	movs	r1, #2
 8001368:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136c:	f001 fa50 	bl	8002810 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8001370:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001378:	f001 fa4a 	bl	8002810 <HAL_GPIO_DeInit>
  return 0;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	bd80      	pop	{r7, pc}

08001382 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001386:	2201      	movs	r2, #1
 8001388:	2102      	movs	r1, #2
 800138a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138e:	f001 fb4b 	bl	8002a28 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139c:	f001 fb44 	bl	8002a28 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80013a0:	2005      	movs	r0, #5
 80013a2:	f000 fefb 	bl	800219c <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80013a6:	2201      	movs	r2, #1
 80013a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b0:	f001 fb3a 	bl	8002a28 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80013b4:	2005      	movs	r0, #5
 80013b6:	f000 fef1 	bl	800219c <HAL_Delay>
  return 0;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 80013d0:	23ff      	movs	r3, #255	; 0xff
 80013d2:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80013d4:	230b      	movs	r3, #11
 80013d6:	753b      	strb	r3, [r7, #20]
 80013d8:	2300      	movs	r3, #0
 80013da:	757b      	strb	r3, [r7, #21]
 80013dc:	2300      	movs	r3, #0
 80013de:	75bb      	strb	r3, [r7, #22]
 80013e0:	2300      	movs	r3, #0
 80013e2:	75fb      	strb	r3, [r7, #23]
 80013e4:	2300      	movs	r3, #0
 80013e6:	763b      	strb	r3, [r7, #24]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2102      	movs	r1, #2
 80013ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f0:	f001 fb1a 	bl	8002a28 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80013f4:	f107 010c 	add.w	r1, r7, #12
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	2205      	movs	r2, #5
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 fa78 	bl	80018f4 <BSP_SPI1_SendRecv>

  if(header_slave[0] == 0x02)
 8001404:	7b3b      	ldrb	r3, [r7, #12]
 8001406:	2b02      	cmp	r3, #2
 8001408:	d129      	bne.n	800145e <HCI_TL_SPI_Receive+0x9e>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 800140a:	7c3b      	ldrb	r3, [r7, #16]
 800140c:	021b      	lsls	r3, r3, #8
 800140e:	b21a      	sxth	r2, r3
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	b21b      	sxth	r3, r3
 8001414:	4313      	orrs	r3, r2
 8001416:	b21b      	sxth	r3, r3
 8001418:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 800141a:	8bfb      	ldrh	r3, [r7, #30]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d01e      	beq.n	800145e <HCI_TL_SPI_Receive+0x9e>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8001420:	8bfa      	ldrh	r2, [r7, #30]
 8001422:	887b      	ldrh	r3, [r7, #2]
 8001424:	429a      	cmp	r2, r3
 8001426:	d901      	bls.n	800142c <HCI_TL_SPI_Receive+0x6c>
        byte_count = size;
 8001428:	887b      	ldrh	r3, [r7, #2]
 800142a:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 800142c:	2300      	movs	r3, #0
 800142e:	777b      	strb	r3, [r7, #29]
 8001430:	e010      	b.n	8001454 <HCI_TL_SPI_Receive+0x94>
      {
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8001432:	f107 011b 	add.w	r1, r7, #27
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	2201      	movs	r2, #1
 800143c:	4618      	mov	r0, r3
 800143e:	f000 fa59 	bl	80018f4 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8001442:	7f7b      	ldrb	r3, [r7, #29]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	4413      	add	r3, r2
 8001448:	7efa      	ldrb	r2, [r7, #27]
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 800144e:	7f7b      	ldrb	r3, [r7, #29]
 8001450:	3301      	adds	r3, #1
 8001452:	777b      	strb	r3, [r7, #29]
 8001454:	7f7b      	ldrb	r3, [r7, #29]
 8001456:	b29b      	uxth	r3, r3
 8001458:	8bfa      	ldrh	r2, [r7, #30]
 800145a:	429a      	cmp	r2, r3
 800145c:	d8e9      	bhi.n	8001432 <HCI_TL_SPI_Receive+0x72>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800145e:	2201      	movs	r2, #1
 8001460:	2102      	movs	r1, #2
 8001462:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001466:	f001 fadf 	bl	8002a28 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 800146a:	7f7b      	ldrb	r3, [r7, #29]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3720      	adds	r7, #32
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001480:	230a      	movs	r3, #10
 8001482:	743b      	strb	r3, [r7, #16]
 8001484:	2300      	movs	r3, #0
 8001486:	747b      	strb	r3, [r7, #17]
 8001488:	2300      	movs	r3, #0
 800148a:	74bb      	strb	r3, [r7, #18]
 800148c:	2300      	movs	r3, #0
 800148e:	74fb      	strb	r3, [r7, #19]
 8001490:	2300      	movs	r3, #0
 8001492:	753b      	strb	r3, [r7, #20]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8001494:	f000 fe76 	bl	8002184 <HAL_GetTick>
 8001498:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	2102      	movs	r1, #2
 80014a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a6:	f001 fabf 	bl	8002a28 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80014aa:	f107 0108 	add.w	r1, r7, #8
 80014ae:	f107 0310 	add.w	r3, r7, #16
 80014b2:	2205      	movs	r2, #5
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 fa1d 	bl	80018f4 <BSP_SPI1_SendRecv>

    if(header_slave[0] == 0x02)
 80014ba:	7a3b      	ldrb	r3, [r7, #8]
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d10f      	bne.n	80014e0 <HCI_TL_SPI_Send+0x6c>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 80014c0:	7a7b      	ldrb	r3, [r7, #9]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	887a      	ldrh	r2, [r7, #2]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d806      	bhi.n	80014d8 <HCI_TL_SPI_Send+0x64>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80014ca:	887b      	ldrh	r3, [r7, #2]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4912      	ldr	r1, [pc, #72]	; (8001518 <HCI_TL_SPI_Send+0xa4>)
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f000 fa0f 	bl	80018f4 <BSP_SPI1_SendRecv>
 80014d6:	e006      	b.n	80014e6 <HCI_TL_SPI_Send+0x72>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 80014d8:	f06f 0301 	mvn.w	r3, #1
 80014dc:	61fb      	str	r3, [r7, #28]
 80014de:	e002      	b.n	80014e6 <HCI_TL_SPI_Send+0x72>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 80014e0:	f04f 33ff 	mov.w	r3, #4294967295
 80014e4:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80014e6:	2201      	movs	r2, #1
 80014e8:	2102      	movs	r1, #2
 80014ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ee:	f001 fa9b 	bl	8002a28 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80014f2:	f000 fe47 	bl	8002184 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b0f      	cmp	r3, #15
 80014fe:	d903      	bls.n	8001508 <HCI_TL_SPI_Send+0x94>
    {
      result = -3;
 8001500:	f06f 0302 	mvn.w	r3, #2
 8001504:	61fb      	str	r3, [r7, #28]
      break;
 8001506:	e002      	b.n	800150e <HCI_TL_SPI_Send+0x9a>
    }
  } while(result < 0);
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	2b00      	cmp	r3, #0
 800150c:	dbc5      	blt.n	800149a <HCI_TL_SPI_Send+0x26>

  return result;
 800150e:	69fb      	ldr	r3, [r7, #28]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3720      	adds	r7, #32
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000220 	.word	0x20000220

0800151c <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001520:	2101      	movs	r1, #1
 8001522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001526:	f001 fa67 	bl	80029f8 <HAL_GPIO_ReadPin>
 800152a:	4603      	mov	r3, r0
 800152c:	2b01      	cmp	r3, #1
 800152e:	bf0c      	ite	eq
 8001530:	2301      	moveq	r3, #1
 8001532:	2300      	movne	r3, #0
 8001534:	b2db      	uxtb	r3, r3
}
 8001536:	4618      	mov	r0, r3
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8001542:	4b13      	ldr	r3, [pc, #76]	; (8001590 <hci_tl_lowlevel_init+0x54>)
 8001544:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8001546:	4b13      	ldr	r3, [pc, #76]	; (8001594 <hci_tl_lowlevel_init+0x58>)
 8001548:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 800154a:	4b13      	ldr	r3, [pc, #76]	; (8001598 <hci_tl_lowlevel_init+0x5c>)
 800154c:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 800154e:	4b13      	ldr	r3, [pc, #76]	; (800159c <hci_tl_lowlevel_init+0x60>)
 8001550:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8001552:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <hci_tl_lowlevel_init+0x64>)
 8001554:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <hci_tl_lowlevel_init+0x68>)
 8001558:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	4618      	mov	r0, r3
 800155e:	f004 fe93 	bl	8006288 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8001562:	f04f 51b0 	mov.w	r1, #369098752	; 0x16000000
 8001566:	4810      	ldr	r0, [pc, #64]	; (80015a8 <hci_tl_lowlevel_init+0x6c>)
 8001568:	f000 ff65 	bl	8002436 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 800156c:	4a0f      	ldr	r2, [pc, #60]	; (80015ac <hci_tl_lowlevel_init+0x70>)
 800156e:	2100      	movs	r1, #0
 8001570:	480d      	ldr	r0, [pc, #52]	; (80015a8 <hci_tl_lowlevel_init+0x6c>)
 8001572:	f000 ff46 	bl	8002402 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2100      	movs	r1, #0
 800157a:	2006      	movs	r0, #6
 800157c:	f000 ff0b 	bl	8002396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001580:	2006      	movs	r0, #6
 8001582:	f000 ff24 	bl	80023ce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8001586:	bf00      	nop
 8001588:	3720      	adds	r7, #32
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	080012c9 	.word	0x080012c9
 8001594:	08001359 	.word	0x08001359
 8001598:	08001475 	.word	0x08001475
 800159c:	080013c1 	.word	0x080013c1
 80015a0:	08001383 	.word	0x08001383
 80015a4:	08001935 	.word	0x08001935
 80015a8:	2000061c 	.word	0x2000061c
 80015ac:	080015b1 	.word	0x080015b1

080015b0 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80015b4:	e005      	b.n	80015c2 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 80015b6:	2000      	movs	r0, #0
 80015b8:	f004 ffc8 	bl	800654c <hci_notify_asynch_evt>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d105      	bne.n	80015ce <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 80015c2:	f7ff ffab 	bl	800151c <IsDataAvailable>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1f4      	bne.n	80015b6 <hci_tl_lowlevel_isr+0x6>
 80015cc:	e000      	b.n	80015d0 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80015ce:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015d6:	f000 fd65 	bl	80020a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015da:	f000 f807 	bl	80015ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015de:	f000 f87b 	bl	80016d8 <MX_GPIO_Init>
  MX_BlueNRG_MS_Init();
 80015e2:	f7fe ffcd 	bl	8000580 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_BlueNRG_MS_Process();
 80015e6:	f7ff f8d5 	bl	8000794 <MX_BlueNRG_MS_Process>
 80015ea:	e7fc      	b.n	80015e6 <main+0x14>

080015ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b0b8      	sub	sp, #224	; 0xe0
 80015f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015f6:	2244      	movs	r2, #68	; 0x44
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f005 fae5 	bl	8006bca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001600:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001610:	463b      	mov	r3, r7
 8001612:	2288      	movs	r2, #136	; 0x88
 8001614:	2100      	movs	r1, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f005 fad7 	bl	8006bca <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800161c:	2302      	movs	r3, #2
 800161e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001622:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001626:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800162a:	2310      	movs	r3, #16
 800162c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001630:	2302      	movs	r3, #2
 8001632:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001636:	2302      	movs	r3, #2
 8001638:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800163c:	2301      	movs	r3, #1
 800163e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001642:	230a      	movs	r3, #10
 8001644:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001648:	2307      	movs	r3, #7
 800164a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800164e:	2302      	movs	r3, #2
 8001650:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001654:	2302      	movs	r3, #2
 8001656:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800165a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800165e:	4618      	mov	r0, r3
 8001660:	f001 fa78 	bl	8002b54 <HAL_RCC_OscConfig>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800166a:	f000 f8ad 	bl	80017c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800166e:	230f      	movs	r3, #15
 8001670:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001674:	2303      	movs	r3, #3
 8001676:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800167a:	2300      	movs	r3, #0
 800167c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001680:	2300      	movs	r3, #0
 8001682:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001686:	2300      	movs	r3, #0
 8001688:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800168c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001690:	2104      	movs	r1, #4
 8001692:	4618      	mov	r0, r3
 8001694:	f001 fe44 	bl	8003320 <HAL_RCC_ClockConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800169e:	f000 f893 	bl	80017c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016a2:	2302      	movs	r3, #2
 80016a4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016a6:	2300      	movs	r3, #0
 80016a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016aa:	463b      	mov	r3, r7
 80016ac:	4618      	mov	r0, r3
 80016ae:	f002 f83b 	bl	8003728 <HAL_RCCEx_PeriphCLKConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80016b8:	f000 f886 	bl	80017c8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016c0:	f001 f9f2 	bl	8002aa8 <HAL_PWREx_ControlVoltageScaling>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80016ca:	f000 f87d 	bl	80017c8 <Error_Handler>
  }
}
 80016ce:	bf00      	nop
 80016d0:	37e0      	adds	r7, #224	; 0xe0
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	; 0x28
 80016dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ee:	4b34      	ldr	r3, [pc, #208]	; (80017c0 <MX_GPIO_Init+0xe8>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f2:	4a33      	ldr	r2, [pc, #204]	; (80017c0 <MX_GPIO_Init+0xe8>)
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fa:	4b31      	ldr	r3, [pc, #196]	; (80017c0 <MX_GPIO_Init+0xe8>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001706:	4b2e      	ldr	r3, [pc, #184]	; (80017c0 <MX_GPIO_Init+0xe8>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170a:	4a2d      	ldr	r2, [pc, #180]	; (80017c0 <MX_GPIO_Init+0xe8>)
 800170c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001712:	4b2b      	ldr	r3, [pc, #172]	; (80017c0 <MX_GPIO_Init+0xe8>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	4b28      	ldr	r3, [pc, #160]	; (80017c0 <MX_GPIO_Init+0xe8>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001722:	4a27      	ldr	r2, [pc, #156]	; (80017c0 <MX_GPIO_Init+0xe8>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800172a:	4b25      	ldr	r3, [pc, #148]	; (80017c0 <MX_GPIO_Init+0xe8>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001736:	4b22      	ldr	r3, [pc, #136]	; (80017c0 <MX_GPIO_Init+0xe8>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173a:	4a21      	ldr	r2, [pc, #132]	; (80017c0 <MX_GPIO_Init+0xe8>)
 800173c:	f043 0302 	orr.w	r3, r3, #2
 8001740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001742:	4b1f      	ldr	r3, [pc, #124]	; (80017c0 <MX_GPIO_Init+0xe8>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001758:	f001 f966 	bl	8002a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800175c:	2301      	movs	r3, #1
 800175e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001760:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <MX_GPIO_Init+0xec>)
 8001762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	4619      	mov	r1, r3
 800176e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001772:	f000 fea5 	bl	80024c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 8001776:	f44f 7381 	mov.w	r3, #258	; 0x102
 800177a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001792:	f000 fe95 	bl	80024c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2100      	movs	r1, #0
 800179a:	2006      	movs	r0, #6
 800179c:	f000 fdfb 	bl	8002396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80017a0:	2006      	movs	r0, #6
 80017a2:	f000 fe14 	bl	80023ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	2028      	movs	r0, #40	; 0x28
 80017ac:	f000 fdf3 	bl	8002396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017b0:	2028      	movs	r0, #40	; 0x28
 80017b2:	f000 fe0c 	bl	80023ce <HAL_NVIC_EnableIRQ>

}
 80017b6:	bf00      	nop
 80017b8:	3728      	adds	r7, #40	; 0x28
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40021000 	.word	0x40021000
 80017c4:	10110000 	.word	0x10110000

080017c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017cc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ce:	e7fe      	b.n	80017ce <Error_Handler+0x6>

080017d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <HAL_MspInit+0x44>)
 80017d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017da:	4a0e      	ldr	r2, [pc, #56]	; (8001814 <HAL_MspInit+0x44>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6613      	str	r3, [r2, #96]	; 0x60
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <HAL_MspInit+0x44>)
 80017e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <HAL_MspInit+0x44>)
 80017f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f2:	4a08      	ldr	r2, [pc, #32]	; (8001814 <HAL_MspInit+0x44>)
 80017f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f8:	6593      	str	r3, [r2, #88]	; 0x58
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_MspInit+0x44>)
 80017fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001802:	603b      	str	r3, [r7, #0]
 8001804:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40021000 	.word	0x40021000

08001818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800181c:	e7fe      	b.n	800181c <NMI_Handler+0x4>

0800181e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001822:	e7fe      	b.n	8001822 <HardFault_Handler+0x4>

08001824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001828:	e7fe      	b.n	8001828 <MemManage_Handler+0x4>

0800182a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800182e:	e7fe      	b.n	800182e <BusFault_Handler+0x4>

08001830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <UsageFault_Handler+0x4>

08001836 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001864:	f000 fc7a 	bl	800215c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}

0800186c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8001870:	4802      	ldr	r0, [pc, #8]	; (800187c <EXTI0_IRQHandler+0x10>)
 8001872:	f000 fdf5 	bl	8002460 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	2000061c 	.word	0x2000061c

08001880 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <EXTI15_10_IRQHandler+0x10>)
 8001886:	f000 fdeb 	bl	8002460 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000010 	.word	0x20000010

08001894 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 800189e:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <BSP_SPI1_Init+0x54>)
 80018a0:	4a12      	ldr	r2, [pc, #72]	; (80018ec <BSP_SPI1_Init+0x58>)
 80018a2:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 80018a4:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <BSP_SPI1_Init+0x5c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	1c5a      	adds	r2, r3, #1
 80018aa:	4911      	ldr	r1, [pc, #68]	; (80018f0 <BSP_SPI1_Init+0x5c>)
 80018ac:	600a      	str	r2, [r1, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d114      	bne.n	80018dc <BSP_SPI1_Init+0x48>
  {
	if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80018b2:	480d      	ldr	r0, [pc, #52]	; (80018e8 <BSP_SPI1_Init+0x54>)
 80018b4:	f002 fea8 	bl	8004608 <HAL_SPI_GetState>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10e      	bne.n	80018dc <BSP_SPI1_Init+0x48>
	{
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
		/* Init the SPI Msp */
		SPI1_MspInit(&hspi1);
 80018be:	480a      	ldr	r0, [pc, #40]	; (80018e8 <BSP_SPI1_Init+0x54>)
 80018c0:	f000 f882 	bl	80019c8 <SPI1_MspInit>
			{
				return BSP_ERROR_MSP_FAILURE;
			}
		}
#endif
		if(ret == BSP_ERROR_NONE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d108      	bne.n	80018dc <BSP_SPI1_Init+0x48>
		{
			/* Init the SPI */
			if (MX_SPI1_Init(&hspi1) != HAL_OK)
 80018ca:	4807      	ldr	r0, [pc, #28]	; (80018e8 <BSP_SPI1_Init+0x54>)
 80018cc:	f000 f83a 	bl	8001944 <MX_SPI1_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d002      	beq.n	80018dc <BSP_SPI1_Init+0x48>
			{
				ret = BSP_ERROR_BUS_FAILURE;
 80018d6:	f06f 0307 	mvn.w	r3, #7
 80018da:	607b      	str	r3, [r7, #4]
			}
		}
	}
  }

  return ret;
 80018dc:	687b      	ldr	r3, [r7, #4]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000624 	.word	0x20000624
 80018ec:	40013000 	.word	0x40013000
 80018f0:	20000320 	.word	0x20000320

080018f4 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af02      	add	r7, sp, #8
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	4613      	mov	r3, r2
 8001900:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8001906:	88fa      	ldrh	r2, [r7, #6]
 8001908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	4613      	mov	r3, r2
 8001910:	68ba      	ldr	r2, [r7, #8]
 8001912:	68f9      	ldr	r1, [r7, #12]
 8001914:	4806      	ldr	r0, [pc, #24]	; (8001930 <BSP_SPI1_SendRecv+0x3c>)
 8001916:	f002 fc64 	bl	80041e2 <HAL_SPI_TransmitReceive>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d002      	beq.n	8001926 <BSP_SPI1_SendRecv+0x32>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8001920:	f06f 0305 	mvn.w	r3, #5
 8001924:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8001926:	697b      	ldr	r3, [r7, #20]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000624 	.word	0x20000624

08001934 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001938:	f000 fc24 	bl	8002184 <HAL_GetTick>
 800193c:	4603      	mov	r3, r0
}
 800193e:	4618      	mov	r0, r3
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800194c:	2300      	movs	r3, #0
 800194e:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI1;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a1c      	ldr	r2, [pc, #112]	; (80019c4 <MX_SPI1_Init+0x80>)
 8001954:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f44f 7282 	mov.w	r2, #260	; 0x104
 800195c:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800196a:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800197e:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2218      	movs	r2, #24
 8001984:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2207      	movs	r2, #7
 800199c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2208      	movs	r2, #8
 80019a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f002 fb6c 	bl	8004088 <HAL_SPI_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40013000 	.word	0x40013000

080019c8 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	; 0x28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019d0:	4b2c      	ldr	r3, [pc, #176]	; (8001a84 <SPI1_MspInit+0xbc>)
 80019d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d4:	4a2b      	ldr	r2, [pc, #172]	; (8001a84 <SPI1_MspInit+0xbc>)
 80019d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019da:	6613      	str	r3, [r2, #96]	; 0x60
 80019dc:	4b29      	ldr	r3, [pc, #164]	; (8001a84 <SPI1_MspInit+0xbc>)
 80019de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e8:	4b26      	ldr	r3, [pc, #152]	; (8001a84 <SPI1_MspInit+0xbc>)
 80019ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ec:	4a25      	ldr	r2, [pc, #148]	; (8001a84 <SPI1_MspInit+0xbc>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f4:	4b23      	ldr	r3, [pc, #140]	; (8001a84 <SPI1_MspInit+0xbc>)
 80019f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a00:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <SPI1_MspInit+0xbc>)
 8001a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a04:	4a1f      	ldr	r2, [pc, #124]	; (8001a84 <SPI1_MspInit+0xbc>)
 8001a06:	f043 0302 	orr.w	r3, r3, #2
 8001a0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <SPI1_MspInit+0xbc>)
 8001a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8001a18:	2340      	movs	r3, #64	; 0x40
 8001a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a24:	2303      	movs	r3, #3
 8001a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8001a28:	2305      	movs	r3, #5
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	4619      	mov	r1, r3
 8001a32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a36:	f000 fd43 	bl	80024c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a46:	2303      	movs	r3, #3
 8001a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8001a4a:	2305      	movs	r3, #5
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001a4e:	f107 0314 	add.w	r3, r7, #20
 8001a52:	4619      	mov	r1, r3
 8001a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a58:	f000 fd32 	bl	80024c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8001a5c:	2308      	movs	r3, #8
 8001a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8001a6c:	2305      	movs	r3, #5
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	4619      	mov	r1, r3
 8001a76:	4804      	ldr	r0, [pc, #16]	; (8001a88 <SPI1_MspInit+0xc0>)
 8001a78:	f000 fd22 	bl	80024c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	3728      	adds	r7, #40	; 0x28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40021000 	.word	0x40021000
 8001a88:	48000400 	.word	0x48000400

08001a8c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	e00a      	b.n	8001ab4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a9e:	f3af 8000 	nop.w
 8001aa2:	4601      	mov	r1, r0
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	1c5a      	adds	r2, r3, #1
 8001aa8:	60ba      	str	r2, [r7, #8]
 8001aaa:	b2ca      	uxtb	r2, r1
 8001aac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	dbf0      	blt.n	8001a9e <_read+0x12>
	}

return len;
 8001abc:	687b      	ldr	r3, [r7, #4]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b086      	sub	sp, #24
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	60f8      	str	r0, [r7, #12]
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	e009      	b.n	8001aec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	1c5a      	adds	r2, r3, #1
 8001adc:	60ba      	str	r2, [r7, #8]
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 fa83 	bl	8001fec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	dbf1      	blt.n	8001ad8 <_write+0x12>
	}
	return len;
 8001af4:	687b      	ldr	r3, [r7, #4]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <_close>:

int _close(int file)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
	return -1;
 8001b06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b26:	605a      	str	r2, [r3, #4]
	return 0;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <_isatty>:

int _isatty(int file)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
	return 1;
 8001b3e:	2301      	movs	r3, #1
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
	return 0;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
	...

08001b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b70:	4a14      	ldr	r2, [pc, #80]	; (8001bc4 <_sbrk+0x5c>)
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <_sbrk+0x60>)
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b7c:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <_sbrk+0x64>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d102      	bne.n	8001b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <_sbrk+0x64>)
 8001b86:	4a12      	ldr	r2, [pc, #72]	; (8001bd0 <_sbrk+0x68>)
 8001b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <_sbrk+0x64>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d207      	bcs.n	8001ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b98:	f004 fe56 	bl	8006848 <__errno>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	230c      	movs	r3, #12
 8001ba0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba6:	e009      	b.n	8001bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <_sbrk+0x64>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bae:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <_sbrk+0x64>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	4a05      	ldr	r2, [pc, #20]	; (8001bcc <_sbrk+0x64>)
 8001bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bba:	68fb      	ldr	r3, [r7, #12]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20018000 	.word	0x20018000
 8001bc8:	00000400 	.word	0x00000400
 8001bcc:	20000324 	.word	0x20000324
 8001bd0:	20000720 	.word	0x20000720

08001bd4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bd8:	4b17      	ldr	r3, [pc, #92]	; (8001c38 <SystemInit+0x64>)
 8001bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bde:	4a16      	ldr	r2, [pc, #88]	; (8001c38 <SystemInit+0x64>)
 8001be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001be8:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <SystemInit+0x68>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a13      	ldr	r2, [pc, #76]	; (8001c3c <SystemInit+0x68>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <SystemInit+0x68>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <SystemInit+0x68>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a0f      	ldr	r2, [pc, #60]	; (8001c3c <SystemInit+0x68>)
 8001c00:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001c04:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001c08:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <SystemInit+0x68>)
 8001c0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c10:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <SystemInit+0x68>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a09      	ldr	r2, [pc, #36]	; (8001c3c <SystemInit+0x68>)
 8001c18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c1c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001c1e:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <SystemInit+0x68>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c24:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <SystemInit+0x64>)
 8001c26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c2a:	609a      	str	r2, [r3, #8]
#endif
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000ed00 	.word	0xe000ed00
 8001c3c:	40021000 	.word	0x40021000

08001c40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c44:	f7ff ffc6 	bl	8001bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001c48:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001c4a:	e003      	b.n	8001c54 <LoopCopyDataInit>

08001c4c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001c4e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001c50:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001c52:	3104      	adds	r1, #4

08001c54 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001c54:	480a      	ldr	r0, [pc, #40]	; (8001c80 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001c56:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001c58:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001c5a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001c5c:	d3f6      	bcc.n	8001c4c <CopyDataInit>
	ldr	r2, =_sbss
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001c60:	e002      	b.n	8001c68 <LoopFillZerobss>

08001c62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001c62:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001c64:	f842 3b04 	str.w	r3, [r2], #4

08001c68 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <LoopForever+0x16>)
	cmp	r2, r3
 8001c6a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001c6c:	d3f9      	bcc.n	8001c62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c6e:	f004 ff7d 	bl	8006b6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c72:	f7ff fcae 	bl	80015d2 <main>

08001c76 <LoopForever>:

LoopForever:
    b LoopForever
 8001c76:	e7fe      	b.n	8001c76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c78:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001c7c:	08008114 	.word	0x08008114
	ldr	r0, =_sdata
 8001c80:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001c84:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 8001c88:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 8001c8c:	20000720 	.word	0x20000720

08001c90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c90:	e7fe      	b.n	8001c90 <ADC1_2_IRQHandler>
	...

08001c94 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <BSP_LED_Init+0x20>)
 8001ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca6:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	08007f4c 	.word	0x08007f4c

08001cb8 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	4a06      	ldr	r2, [pc, #24]	; (8001ce0 <BSP_LED_On+0x28>)
 8001cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cca:	2120      	movs	r1, #32
 8001ccc:	2201      	movs	r2, #1
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 feaa 	bl	8002a28 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000008 	.word	0x20000008

08001ce4 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	4a06      	ldr	r2, [pc, #24]	; (8001d0c <BSP_LED_Off+0x28>)
 8001cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf6:	2120      	movs	r1, #32
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 fe94 	bl	8002a28 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000008 	.word	0x20000008

08001d10 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	4a06      	ldr	r2, [pc, #24]	; (8001d38 <BSP_LED_Toggle+0x28>)
 8001d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d22:	2220      	movs	r2, #32
 8001d24:	4611      	mov	r1, r2
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 fe96 	bl	8002a58 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000008 	.word	0x20000008

08001d3c <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d42:	4b1c      	ldr	r3, [pc, #112]	; (8001db4 <LED_USER_GPIO_Init+0x78>)
 8001d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d46:	4a1b      	ldr	r2, [pc, #108]	; (8001db4 <LED_USER_GPIO_Init+0x78>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d4e:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <LED_USER_GPIO_Init+0x78>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5a:	f107 030c 	add.w	r3, r7, #12
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
 8001d68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <LED_USER_GPIO_Init+0x78>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6e:	4a11      	ldr	r2, [pc, #68]	; (8001db4 <LED_USER_GPIO_Init+0x78>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d76:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <LED_USER_GPIO_Init+0x78>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8001d82:	2200      	movs	r2, #0
 8001d84:	2120      	movs	r1, #32
 8001d86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d8a:	f000 fe4d 	bl	8002a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8001d8e:	2320      	movs	r3, #32
 8001d90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d92:	2301      	movs	r3, #1
 8001d94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8001d9e:	f107 030c 	add.w	r3, r7, #12
 8001da2:	4619      	mov	r1, r3
 8001da4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001da8:	f000 fb8a 	bl	80024c0 <HAL_GPIO_Init>

}
 8001dac:	bf00      	nop
 8001dae:	3720      	adds	r7, #32
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40021000 	.word	0x40021000

08001db8 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	460a      	mov	r2, r1
 8001dc2:	71fb      	strb	r3, [r7, #7]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	4a1f      	ldr	r2, [pc, #124]	; (8001e4c <BSP_PB_Init+0x94>)
 8001dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd4:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8001dd6:	79bb      	ldrb	r3, [r7, #6]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d131      	bne.n	8001e40 <BSP_PB_Init+0x88>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	4a1b      	ldr	r2, [pc, #108]	; (8001e50 <BSP_PB_Init+0x98>)
 8001de2:	1898      	adds	r0, r3, r2
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	4a1b      	ldr	r2, [pc, #108]	; (8001e54 <BSP_PB_Init+0x9c>)
 8001de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dec:	4619      	mov	r1, r3
 8001dee:	f000 fb22 	bl	8002436 <HAL_EXTI_GetHandle>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <BSP_PB_Init+0x48>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001df8:	f06f 0303 	mvn.w	r3, #3
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	e01f      	b.n	8001e40 <BSP_PB_Init+0x88>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	4a12      	ldr	r2, [pc, #72]	; (8001e50 <BSP_PB_Init+0x98>)
 8001e06:	1898      	adds	r0, r3, r2
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	4a13      	ldr	r2, [pc, #76]	; (8001e58 <BSP_PB_Init+0xa0>)
 8001e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e10:	461a      	mov	r2, r3
 8001e12:	2100      	movs	r1, #0
 8001e14:	f000 faf5 	bl	8002402 <HAL_EXTI_RegisterCallback>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <BSP_PB_Init+0x6e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001e1e:	f06f 0303 	mvn.w	r3, #3
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	e00c      	b.n	8001e40 <BSP_PB_Init+0x88>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001e26:	2028      	movs	r0, #40	; 0x28
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	4a0c      	ldr	r2, [pc, #48]	; (8001e5c <BSP_PB_Init+0xa4>)
 8001e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e30:	2200      	movs	r2, #0
 8001e32:	4619      	mov	r1, r3
 8001e34:	f000 faaf 	bl	8002396 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001e38:	2328      	movs	r3, #40	; 0x28
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 fac7 	bl	80023ce <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8001e40:	68fb      	ldr	r3, [r7, #12]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	08007f50 	.word	0x08007f50
 8001e50:	20000010 	.word	0x20000010
 8001e54:	08007f54 	.word	0x08007f54
 8001e58:	08007f58 	.word	0x08007f58
 8001e5c:	08007f5c 	.word	0x08007f5c

08001e60 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	4a09      	ldr	r2, [pc, #36]	; (8001e94 <BSP_PB_GetState+0x34>)
 8001e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f000 fdbd 	bl	80029f8 <HAL_GPIO_ReadPin>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	bf0c      	ite	eq
 8001e84:	2301      	moveq	r3, #1
 8001e86:	2300      	movne	r3, #0
 8001e88:	b2db      	uxtb	r3, r3
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	2000000c 	.word	0x2000000c

08001e98 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f7fe fd1f 	bl	80008e0 <BSP_PB_Callback>
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eae:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <BUTTON_USER_GPIO_Init+0x68>)
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb2:	4a17      	ldr	r2, [pc, #92]	; (8001f10 <BUTTON_USER_GPIO_Init+0x68>)
 8001eb4:	f043 0304 	orr.w	r3, r3, #4
 8001eb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eba:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <BUTTON_USER_GPIO_Init+0x68>)
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec6:	f107 030c 	add.w	r3, r7, #12
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	609a      	str	r2, [r3, #8]
 8001ed2:	60da      	str	r2, [r3, #12]
 8001ed4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <BUTTON_USER_GPIO_Init+0x68>)
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eda:	4a0d      	ldr	r2, [pc, #52]	; (8001f10 <BUTTON_USER_GPIO_Init+0x68>)
 8001edc:	f043 0304 	orr.w	r3, r3, #4
 8001ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <BUTTON_USER_GPIO_Init+0x68>)
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	607b      	str	r3, [r7, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8001eee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ef2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ef4:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <BUTTON_USER_GPIO_Init+0x6c>)
 8001ef6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8001efc:	f107 030c 	add.w	r3, r7, #12
 8001f00:	4619      	mov	r1, r3
 8001f02:	4805      	ldr	r0, [pc, #20]	; (8001f18 <BUTTON_USER_GPIO_Init+0x70>)
 8001f04:	f000 fadc 	bl	80024c0 <HAL_GPIO_Init>

}
 8001f08:	bf00      	nop
 8001f0a:	3720      	adds	r7, #32
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40021000 	.word	0x40021000
 8001f14:	10210000 	.word	0x10210000
 8001f18:	48000800 	.word	0x48000800

08001f1c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d903      	bls.n	8001f38 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001f30:	f06f 0301 	mvn.w	r3, #1
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	e01c      	b.n	8001f72 <BSP_COM_Init+0x56>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8001f38:	79fa      	ldrb	r2, [r7, #7]
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	490f      	ldr	r1, [pc, #60]	; (8001f7c <BSP_COM_Init+0x60>)
 8001f3e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001f42:	490f      	ldr	r1, [pc, #60]	; (8001f80 <BSP_COM_Init+0x64>)
 8001f44:	01db      	lsls	r3, r3, #7
 8001f46:	440b      	add	r3, r1
 8001f48:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	01db      	lsls	r3, r3, #7
 8001f4e:	4a0c      	ldr	r2, [pc, #48]	; (8001f80 <BSP_COM_Init+0x64>)
 8001f50:	4413      	add	r3, r2
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 f862 	bl	800201c <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	01db      	lsls	r3, r3, #7
 8001f5c:	4a08      	ldr	r2, [pc, #32]	; (8001f80 <BSP_COM_Init+0x64>)
 8001f5e:	4413      	add	r3, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f000 f80f 	bl	8001f84 <MX_USART2_UART_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d002      	beq.n	8001f72 <BSP_COM_Init+0x56>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001f6c:	f06f 0303 	mvn.w	r3, #3
 8001f70:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001f72:	68fb      	ldr	r3, [r7, #12]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000018 	.word	0x20000018
 8001f80:	20000688 	.word	0x20000688

08001f84 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	73fb      	strb	r3, [r7, #15]
  huart->Instance = USART2;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a15      	ldr	r2, [pc, #84]	; (8001fe8 <MX_USART2_UART_Init+0x64>)
 8001f94:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f9c:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f002 fc84 	bl	80048dc <HAL_UART_Init>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40004400 	.word	0x40004400

08001fec <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) /* For IAR and MDK-ARM */
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* __GNUC__ */
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8001ff4:	4b07      	ldr	r3, [pc, #28]	; (8002014 <__io_putchar+0x28>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	01db      	lsls	r3, r3, #7
 8001ffa:	4a07      	ldr	r2, [pc, #28]	; (8002018 <__io_putchar+0x2c>)
 8001ffc:	1898      	adds	r0, r3, r2
 8001ffe:	1d39      	adds	r1, r7, #4
 8002000:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002004:	2201      	movs	r2, #1
 8002006:	f002 fcc1 	bl	800498c <HAL_UART_Transmit>
  return ch;
 800200a:	687b      	ldr	r3, [r7, #4]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20000328 	.word	0x20000328
 8002018:	20000688 	.word	0x20000688

0800201c <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	; 0x28
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002024:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <USART2_MspInit+0x84>)
 8002026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002028:	4a1d      	ldr	r2, [pc, #116]	; (80020a0 <USART2_MspInit+0x84>)
 800202a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800202e:	6593      	str	r3, [r2, #88]	; 0x58
 8002030:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <USART2_MspInit+0x84>)
 8002032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002038:	613b      	str	r3, [r7, #16]
 800203a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203c:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <USART2_MspInit+0x84>)
 800203e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002040:	4a17      	ldr	r2, [pc, #92]	; (80020a0 <USART2_MspInit+0x84>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002048:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <USART2_MspInit+0x84>)
 800204a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8002054:	2304      	movs	r3, #4
 8002056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002058:	2302      	movs	r3, #2
 800205a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002060:	2303      	movs	r3, #3
 8002062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8002064:	2307      	movs	r3, #7
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8002068:	f107 0314 	add.w	r3, r7, #20
 800206c:	4619      	mov	r1, r3
 800206e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002072:	f000 fa25 	bl	80024c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8002076:	2308      	movs	r3, #8
 8002078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207a:	2302      	movs	r3, #2
 800207c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002082:	2303      	movs	r3, #3
 8002084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8002086:	2307      	movs	r3, #7
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 800208a:	f107 0314 	add.w	r3, r7, #20
 800208e:	4619      	mov	r1, r3
 8002090:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002094:	f000 fa14 	bl	80024c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8002098:	bf00      	nop
 800209a:	3728      	adds	r7, #40	; 0x28
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40021000 	.word	0x40021000

080020a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020ae:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <HAL_Init+0x3c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a0b      	ldr	r2, [pc, #44]	; (80020e0 <HAL_Init+0x3c>)
 80020b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ba:	2003      	movs	r0, #3
 80020bc:	f000 f960 	bl	8002380 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020c0:	2000      	movs	r0, #0
 80020c2:	f000 f80f 	bl	80020e4 <HAL_InitTick>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d002      	beq.n	80020d2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	71fb      	strb	r3, [r7, #7]
 80020d0:	e001      	b.n	80020d6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020d2:	f7ff fb7d 	bl	80017d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020d6:	79fb      	ldrb	r3, [r7, #7]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40022000 	.word	0x40022000

080020e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020ec:	2300      	movs	r3, #0
 80020ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80020f0:	4b17      	ldr	r3, [pc, #92]	; (8002150 <HAL_InitTick+0x6c>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d023      	beq.n	8002140 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80020f8:	4b16      	ldr	r3, [pc, #88]	; (8002154 <HAL_InitTick+0x70>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4b14      	ldr	r3, [pc, #80]	; (8002150 <HAL_InitTick+0x6c>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	4619      	mov	r1, r3
 8002102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002106:	fbb3 f3f1 	udiv	r3, r3, r1
 800210a:	fbb2 f3f3 	udiv	r3, r2, r3
 800210e:	4618      	mov	r0, r3
 8002110:	f000 f96b 	bl	80023ea <HAL_SYSTICK_Config>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10f      	bne.n	800213a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b0f      	cmp	r3, #15
 800211e:	d809      	bhi.n	8002134 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002120:	2200      	movs	r2, #0
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	f04f 30ff 	mov.w	r0, #4294967295
 8002128:	f000 f935 	bl	8002396 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800212c:	4a0a      	ldr	r2, [pc, #40]	; (8002158 <HAL_InitTick+0x74>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	e007      	b.n	8002144 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
 8002138:	e004      	b.n	8002144 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	73fb      	strb	r3, [r7, #15]
 800213e:	e001      	b.n	8002144 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002144:	7bfb      	ldrb	r3, [r7, #15]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000020 	.word	0x20000020
 8002154:	20000004 	.word	0x20000004
 8002158:	2000001c 	.word	0x2000001c

0800215c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002160:	4b06      	ldr	r3, [pc, #24]	; (800217c <HAL_IncTick+0x20>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	461a      	mov	r2, r3
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_IncTick+0x24>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4413      	add	r3, r2
 800216c:	4a04      	ldr	r2, [pc, #16]	; (8002180 <HAL_IncTick+0x24>)
 800216e:	6013      	str	r3, [r2, #0]
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20000020 	.word	0x20000020
 8002180:	20000708 	.word	0x20000708

08002184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return uwTick;
 8002188:	4b03      	ldr	r3, [pc, #12]	; (8002198 <HAL_GetTick+0x14>)
 800218a:	681b      	ldr	r3, [r3, #0]
}
 800218c:	4618      	mov	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20000708 	.word	0x20000708

0800219c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021a4:	f7ff ffee 	bl	8002184 <HAL_GetTick>
 80021a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b4:	d005      	beq.n	80021c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80021b6:	4b09      	ldr	r3, [pc, #36]	; (80021dc <HAL_Delay+0x40>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	461a      	mov	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4413      	add	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021c2:	bf00      	nop
 80021c4:	f7ff ffde 	bl	8002184 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d8f7      	bhi.n	80021c4 <HAL_Delay+0x28>
  {
  }
}
 80021d4:	bf00      	nop
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20000020 	.word	0x20000020

080021e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <__NVIC_SetPriorityGrouping+0x44>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021fc:	4013      	ands	r3, r2
 80021fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800220c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002212:	4a04      	ldr	r2, [pc, #16]	; (8002224 <__NVIC_SetPriorityGrouping+0x44>)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	60d3      	str	r3, [r2, #12]
}
 8002218:	bf00      	nop
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800222c:	4b04      	ldr	r3, [pc, #16]	; (8002240 <__NVIC_GetPriorityGrouping+0x18>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	0a1b      	lsrs	r3, r3, #8
 8002232:	f003 0307 	and.w	r3, r3, #7
}
 8002236:	4618      	mov	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	2b00      	cmp	r3, #0
 8002254:	db0b      	blt.n	800226e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	f003 021f 	and.w	r2, r3, #31
 800225c:	4907      	ldr	r1, [pc, #28]	; (800227c <__NVIC_EnableIRQ+0x38>)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	095b      	lsrs	r3, r3, #5
 8002264:	2001      	movs	r0, #1
 8002266:	fa00 f202 	lsl.w	r2, r0, r2
 800226a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	e000e100 	.word	0xe000e100

08002280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	6039      	str	r1, [r7, #0]
 800228a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002290:	2b00      	cmp	r3, #0
 8002292:	db0a      	blt.n	80022aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	b2da      	uxtb	r2, r3
 8002298:	490c      	ldr	r1, [pc, #48]	; (80022cc <__NVIC_SetPriority+0x4c>)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	0112      	lsls	r2, r2, #4
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	440b      	add	r3, r1
 80022a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a8:	e00a      	b.n	80022c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4908      	ldr	r1, [pc, #32]	; (80022d0 <__NVIC_SetPriority+0x50>)
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	3b04      	subs	r3, #4
 80022b8:	0112      	lsls	r2, r2, #4
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	440b      	add	r3, r1
 80022be:	761a      	strb	r2, [r3, #24]
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000e100 	.word	0xe000e100
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b089      	sub	sp, #36	; 0x24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f1c3 0307 	rsb	r3, r3, #7
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	bf28      	it	cs
 80022f2:	2304      	movcs	r3, #4
 80022f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3304      	adds	r3, #4
 80022fa:	2b06      	cmp	r3, #6
 80022fc:	d902      	bls.n	8002304 <NVIC_EncodePriority+0x30>
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3b03      	subs	r3, #3
 8002302:	e000      	b.n	8002306 <NVIC_EncodePriority+0x32>
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002308:	f04f 32ff 	mov.w	r2, #4294967295
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43da      	mvns	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	401a      	ands	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800231c:	f04f 31ff 	mov.w	r1, #4294967295
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	fa01 f303 	lsl.w	r3, r1, r3
 8002326:	43d9      	mvns	r1, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800232c:	4313      	orrs	r3, r2
         );
}
 800232e:	4618      	mov	r0, r3
 8002330:	3724      	adds	r7, #36	; 0x24
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
	...

0800233c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3b01      	subs	r3, #1
 8002348:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800234c:	d301      	bcc.n	8002352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800234e:	2301      	movs	r3, #1
 8002350:	e00f      	b.n	8002372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002352:	4a0a      	ldr	r2, [pc, #40]	; (800237c <SysTick_Config+0x40>)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3b01      	subs	r3, #1
 8002358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800235a:	210f      	movs	r1, #15
 800235c:	f04f 30ff 	mov.w	r0, #4294967295
 8002360:	f7ff ff8e 	bl	8002280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <SysTick_Config+0x40>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800236a:	4b04      	ldr	r3, [pc, #16]	; (800237c <SysTick_Config+0x40>)
 800236c:	2207      	movs	r2, #7
 800236e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	e000e010 	.word	0xe000e010

08002380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff ff29 	bl	80021e0 <__NVIC_SetPriorityGrouping>
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b086      	sub	sp, #24
 800239a:	af00      	add	r7, sp, #0
 800239c:	4603      	mov	r3, r0
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023a8:	f7ff ff3e 	bl	8002228 <__NVIC_GetPriorityGrouping>
 80023ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	68b9      	ldr	r1, [r7, #8]
 80023b2:	6978      	ldr	r0, [r7, #20]
 80023b4:	f7ff ff8e 	bl	80022d4 <NVIC_EncodePriority>
 80023b8:	4602      	mov	r2, r0
 80023ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023be:	4611      	mov	r1, r2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff ff5d 	bl	8002280 <__NVIC_SetPriority>
}
 80023c6:	bf00      	nop
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	4603      	mov	r3, r0
 80023d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff31 	bl	8002244 <__NVIC_EnableIRQ>
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff ffa2 	bl	800233c <SysTick_Config>
 80023f8:	4603      	mov	r3, r0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002402:	b480      	push	{r7}
 8002404:	b087      	sub	sp, #28
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	460b      	mov	r3, r1
 800240c:	607a      	str	r2, [r7, #4]
 800240e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002414:	7afb      	ldrb	r3, [r7, #11]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d103      	bne.n	8002422 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	605a      	str	r2, [r3, #4]
      break;
 8002420:	e002      	b.n	8002428 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	75fb      	strb	r3, [r7, #23]
      break;
 8002426:	bf00      	nop
  }

  return status;
 8002428:	7dfb      	ldrb	r3, [r7, #23]
}
 800242a:	4618      	mov	r0, r3
 800242c:	371c      	adds	r7, #28
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e003      	b.n	8002452 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002450:	2300      	movs	r3, #0
  }
}
 8002452:	4618      	mov	r0, r3
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	0c1b      	lsrs	r3, r3, #16
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 031f 	and.w	r3, r3, #31
 800247c:	2201      	movs	r2, #1
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <HAL_EXTI_IRQHandler+0x5c>)
 800248a:	4413      	add	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4013      	ands	r3, r2
 8002496:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d009      	beq.n	80024b2 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d002      	beq.n	80024b2 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	4798      	blx	r3
    }
  }
}
 80024b2:	bf00      	nop
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40010414 	.word	0x40010414

080024c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b087      	sub	sp, #28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ce:	e17f      	b.n	80027d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	2101      	movs	r1, #1
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	fa01 f303 	lsl.w	r3, r1, r3
 80024dc:	4013      	ands	r3, r2
 80024de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 8171 	beq.w	80027ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d00b      	beq.n	8002508 <HAL_GPIO_Init+0x48>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d007      	beq.n	8002508 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024fc:	2b11      	cmp	r3, #17
 80024fe:	d003      	beq.n	8002508 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b12      	cmp	r3, #18
 8002506:	d130      	bne.n	800256a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4013      	ands	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800253e:	2201      	movs	r2, #1
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4013      	ands	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	091b      	lsrs	r3, r3, #4
 8002554:	f003 0201 	and.w	r2, r3, #1
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	2b03      	cmp	r3, #3
 8002574:	d118      	bne.n	80025a8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800257c:	2201      	movs	r2, #1
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4013      	ands	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	08db      	lsrs	r3, r3, #3
 8002592:	f003 0201 	and.w	r2, r3, #1
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	4313      	orrs	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	2203      	movs	r2, #3
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4013      	ands	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d003      	beq.n	80025e8 <HAL_GPIO_Init+0x128>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b12      	cmp	r3, #18
 80025e6:	d123      	bne.n	8002630 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	08da      	lsrs	r2, r3, #3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3208      	adds	r2, #8
 80025f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	220f      	movs	r2, #15
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	4013      	ands	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4313      	orrs	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	08da      	lsrs	r2, r3, #3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3208      	adds	r2, #8
 800262a:	6939      	ldr	r1, [r7, #16]
 800262c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	2203      	movs	r2, #3
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 0203 	and.w	r2, r3, #3
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 80ac 	beq.w	80027ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002672:	4b5e      	ldr	r3, [pc, #376]	; (80027ec <HAL_GPIO_Init+0x32c>)
 8002674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002676:	4a5d      	ldr	r2, [pc, #372]	; (80027ec <HAL_GPIO_Init+0x32c>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6613      	str	r3, [r2, #96]	; 0x60
 800267e:	4b5b      	ldr	r3, [pc, #364]	; (80027ec <HAL_GPIO_Init+0x32c>)
 8002680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800268a:	4a59      	ldr	r2, [pc, #356]	; (80027f0 <HAL_GPIO_Init+0x330>)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	089b      	lsrs	r3, r3, #2
 8002690:	3302      	adds	r3, #2
 8002692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002696:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	220f      	movs	r2, #15
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4013      	ands	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026b4:	d025      	beq.n	8002702 <HAL_GPIO_Init+0x242>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a4e      	ldr	r2, [pc, #312]	; (80027f4 <HAL_GPIO_Init+0x334>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d01f      	beq.n	80026fe <HAL_GPIO_Init+0x23e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a4d      	ldr	r2, [pc, #308]	; (80027f8 <HAL_GPIO_Init+0x338>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d019      	beq.n	80026fa <HAL_GPIO_Init+0x23a>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a4c      	ldr	r2, [pc, #304]	; (80027fc <HAL_GPIO_Init+0x33c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d013      	beq.n	80026f6 <HAL_GPIO_Init+0x236>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a4b      	ldr	r2, [pc, #300]	; (8002800 <HAL_GPIO_Init+0x340>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d00d      	beq.n	80026f2 <HAL_GPIO_Init+0x232>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a4a      	ldr	r2, [pc, #296]	; (8002804 <HAL_GPIO_Init+0x344>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d007      	beq.n	80026ee <HAL_GPIO_Init+0x22e>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a49      	ldr	r2, [pc, #292]	; (8002808 <HAL_GPIO_Init+0x348>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d101      	bne.n	80026ea <HAL_GPIO_Init+0x22a>
 80026e6:	2306      	movs	r3, #6
 80026e8:	e00c      	b.n	8002704 <HAL_GPIO_Init+0x244>
 80026ea:	2307      	movs	r3, #7
 80026ec:	e00a      	b.n	8002704 <HAL_GPIO_Init+0x244>
 80026ee:	2305      	movs	r3, #5
 80026f0:	e008      	b.n	8002704 <HAL_GPIO_Init+0x244>
 80026f2:	2304      	movs	r3, #4
 80026f4:	e006      	b.n	8002704 <HAL_GPIO_Init+0x244>
 80026f6:	2303      	movs	r3, #3
 80026f8:	e004      	b.n	8002704 <HAL_GPIO_Init+0x244>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e002      	b.n	8002704 <HAL_GPIO_Init+0x244>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_GPIO_Init+0x244>
 8002702:	2300      	movs	r3, #0
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	f002 0203 	and.w	r2, r2, #3
 800270a:	0092      	lsls	r2, r2, #2
 800270c:	4093      	lsls	r3, r2
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	4313      	orrs	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002714:	4936      	ldr	r1, [pc, #216]	; (80027f0 <HAL_GPIO_Init+0x330>)
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	089b      	lsrs	r3, r3, #2
 800271a:	3302      	adds	r3, #2
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002722:	4b3a      	ldr	r3, [pc, #232]	; (800280c <HAL_GPIO_Init+0x34c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	43db      	mvns	r3, r3
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4013      	ands	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4313      	orrs	r3, r2
 8002744:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002746:	4a31      	ldr	r2, [pc, #196]	; (800280c <HAL_GPIO_Init+0x34c>)
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800274c:	4b2f      	ldr	r3, [pc, #188]	; (800280c <HAL_GPIO_Init+0x34c>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	43db      	mvns	r3, r3
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	4013      	ands	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4313      	orrs	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002770:	4a26      	ldr	r2, [pc, #152]	; (800280c <HAL_GPIO_Init+0x34c>)
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002776:	4b25      	ldr	r3, [pc, #148]	; (800280c <HAL_GPIO_Init+0x34c>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	43db      	mvns	r3, r3
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4013      	ands	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4313      	orrs	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800279a:	4a1c      	ldr	r2, [pc, #112]	; (800280c <HAL_GPIO_Init+0x34c>)
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027a0:	4b1a      	ldr	r3, [pc, #104]	; (800280c <HAL_GPIO_Init+0x34c>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4013      	ands	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027c4:	4a11      	ldr	r2, [pc, #68]	; (800280c <HAL_GPIO_Init+0x34c>)
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	3301      	adds	r3, #1
 80027ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	fa22 f303 	lsr.w	r3, r2, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f47f ae78 	bne.w	80024d0 <HAL_GPIO_Init+0x10>
  }
}
 80027e0:	bf00      	nop
 80027e2:	371c      	adds	r7, #28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	40021000 	.word	0x40021000
 80027f0:	40010000 	.word	0x40010000
 80027f4:	48000400 	.word	0x48000400
 80027f8:	48000800 	.word	0x48000800
 80027fc:	48000c00 	.word	0x48000c00
 8002800:	48001000 	.word	0x48001000
 8002804:	48001400 	.word	0x48001400
 8002808:	48001800 	.word	0x48001800
 800280c:	40010400 	.word	0x40010400

08002810 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002810:	b480      	push	{r7}
 8002812:	b087      	sub	sp, #28
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800281e:	e0cd      	b.n	80029bc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002820:	2201      	movs	r2, #1
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	4013      	ands	r3, r2
 800282c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 80c0 	beq.w	80029b6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002836:	4a68      	ldr	r2, [pc, #416]	; (80029d8 <HAL_GPIO_DeInit+0x1c8>)
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	089b      	lsrs	r3, r3, #2
 800283c:	3302      	adds	r3, #2
 800283e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002842:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	220f      	movs	r2, #15
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	4013      	ands	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800285e:	d025      	beq.n	80028ac <HAL_GPIO_DeInit+0x9c>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a5e      	ldr	r2, [pc, #376]	; (80029dc <HAL_GPIO_DeInit+0x1cc>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d01f      	beq.n	80028a8 <HAL_GPIO_DeInit+0x98>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a5d      	ldr	r2, [pc, #372]	; (80029e0 <HAL_GPIO_DeInit+0x1d0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d019      	beq.n	80028a4 <HAL_GPIO_DeInit+0x94>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a5c      	ldr	r2, [pc, #368]	; (80029e4 <HAL_GPIO_DeInit+0x1d4>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d013      	beq.n	80028a0 <HAL_GPIO_DeInit+0x90>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a5b      	ldr	r2, [pc, #364]	; (80029e8 <HAL_GPIO_DeInit+0x1d8>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d00d      	beq.n	800289c <HAL_GPIO_DeInit+0x8c>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a5a      	ldr	r2, [pc, #360]	; (80029ec <HAL_GPIO_DeInit+0x1dc>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d007      	beq.n	8002898 <HAL_GPIO_DeInit+0x88>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a59      	ldr	r2, [pc, #356]	; (80029f0 <HAL_GPIO_DeInit+0x1e0>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d101      	bne.n	8002894 <HAL_GPIO_DeInit+0x84>
 8002890:	2306      	movs	r3, #6
 8002892:	e00c      	b.n	80028ae <HAL_GPIO_DeInit+0x9e>
 8002894:	2307      	movs	r3, #7
 8002896:	e00a      	b.n	80028ae <HAL_GPIO_DeInit+0x9e>
 8002898:	2305      	movs	r3, #5
 800289a:	e008      	b.n	80028ae <HAL_GPIO_DeInit+0x9e>
 800289c:	2304      	movs	r3, #4
 800289e:	e006      	b.n	80028ae <HAL_GPIO_DeInit+0x9e>
 80028a0:	2303      	movs	r3, #3
 80028a2:	e004      	b.n	80028ae <HAL_GPIO_DeInit+0x9e>
 80028a4:	2302      	movs	r3, #2
 80028a6:	e002      	b.n	80028ae <HAL_GPIO_DeInit+0x9e>
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <HAL_GPIO_DeInit+0x9e>
 80028ac:	2300      	movs	r3, #0
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	f002 0203 	and.w	r2, r2, #3
 80028b4:	0092      	lsls	r2, r2, #2
 80028b6:	4093      	lsls	r3, r2
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d132      	bne.n	8002924 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80028be:	4b4d      	ldr	r3, [pc, #308]	; (80029f4 <HAL_GPIO_DeInit+0x1e4>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	494b      	ldr	r1, [pc, #300]	; (80029f4 <HAL_GPIO_DeInit+0x1e4>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80028cc:	4b49      	ldr	r3, [pc, #292]	; (80029f4 <HAL_GPIO_DeInit+0x1e4>)
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	43db      	mvns	r3, r3
 80028d4:	4947      	ldr	r1, [pc, #284]	; (80029f4 <HAL_GPIO_DeInit+0x1e4>)
 80028d6:	4013      	ands	r3, r2
 80028d8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80028da:	4b46      	ldr	r3, [pc, #280]	; (80029f4 <HAL_GPIO_DeInit+0x1e4>)
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	43db      	mvns	r3, r3
 80028e2:	4944      	ldr	r1, [pc, #272]	; (80029f4 <HAL_GPIO_DeInit+0x1e4>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80028e8:	4b42      	ldr	r3, [pc, #264]	; (80029f4 <HAL_GPIO_DeInit+0x1e4>)
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	43db      	mvns	r3, r3
 80028f0:	4940      	ldr	r1, [pc, #256]	; (80029f4 <HAL_GPIO_DeInit+0x1e4>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	220f      	movs	r2, #15
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002906:	4a34      	ldr	r2, [pc, #208]	; (80029d8 <HAL_GPIO_DeInit+0x1c8>)
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	089b      	lsrs	r3, r3, #2
 800290c:	3302      	adds	r3, #2
 800290e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	43da      	mvns	r2, r3
 8002916:	4830      	ldr	r0, [pc, #192]	; (80029d8 <HAL_GPIO_DeInit+0x1c8>)
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	089b      	lsrs	r3, r3, #2
 800291c:	400a      	ands	r2, r1
 800291e:	3302      	adds	r3, #2
 8002920:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	2103      	movs	r1, #3
 800292e:	fa01 f303 	lsl.w	r3, r1, r3
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	08da      	lsrs	r2, r3, #3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3208      	adds	r2, #8
 8002940:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	220f      	movs	r2, #15
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43db      	mvns	r3, r3
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	08d2      	lsrs	r2, r2, #3
 8002958:	4019      	ands	r1, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3208      	adds	r2, #8
 800295e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	2103      	movs	r1, #3
 800296c:	fa01 f303 	lsl.w	r3, r1, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	401a      	ands	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	2101      	movs	r1, #1
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	fa01 f303 	lsl.w	r3, r1, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	401a      	ands	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	2103      	movs	r1, #3
 8002996:	fa01 f303 	lsl.w	r3, r1, r3
 800299a:	43db      	mvns	r3, r3
 800299c:	401a      	ands	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a6:	2101      	movs	r1, #1
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	fa01 f303 	lsl.w	r3, r1, r3
 80029ae:	43db      	mvns	r3, r3
 80029b0:	401a      	ands	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	3301      	adds	r3, #1
 80029ba:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	fa22 f303 	lsr.w	r3, r2, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f47f af2b 	bne.w	8002820 <HAL_GPIO_DeInit+0x10>
  }
}
 80029ca:	bf00      	nop
 80029cc:	371c      	adds	r7, #28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40010000 	.word	0x40010000
 80029dc:	48000400 	.word	0x48000400
 80029e0:	48000800 	.word	0x48000800
 80029e4:	48000c00 	.word	0x48000c00
 80029e8:	48001000 	.word	0x48001000
 80029ec:	48001400 	.word	0x48001400
 80029f0:	48001800 	.word	0x48001800
 80029f4:	40010400 	.word	0x40010400

080029f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	887b      	ldrh	r3, [r7, #2]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d002      	beq.n	8002a16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a10:	2301      	movs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
 8002a14:	e001      	b.n	8002a1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a16:	2300      	movs	r3, #0
 8002a18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	807b      	strh	r3, [r7, #2]
 8002a34:	4613      	mov	r3, r2
 8002a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a38:	787b      	ldrb	r3, [r7, #1]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a3e:	887a      	ldrh	r2, [r7, #2]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a44:	e002      	b.n	8002a4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a46:	887a      	ldrh	r2, [r7, #2]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a6a:	887a      	ldrh	r2, [r7, #2]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	041a      	lsls	r2, r3, #16
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	43d9      	mvns	r1, r3
 8002a76:	887b      	ldrh	r3, [r7, #2]
 8002a78:	400b      	ands	r3, r1
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	619a      	str	r2, [r3, #24]
}
 8002a80:	bf00      	nop
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a90:	4b04      	ldr	r3, [pc, #16]	; (8002aa4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40007000 	.word	0x40007000

08002aa8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ab6:	d130      	bne.n	8002b1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ab8:	4b23      	ldr	r3, [pc, #140]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ac4:	d038      	beq.n	8002b38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ac6:	4b20      	ldr	r3, [pc, #128]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ace:	4a1e      	ldr	r2, [pc, #120]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ad0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ad4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ad6:	4b1d      	ldr	r3, [pc, #116]	; (8002b4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2232      	movs	r2, #50	; 0x32
 8002adc:	fb02 f303 	mul.w	r3, r2, r3
 8002ae0:	4a1b      	ldr	r2, [pc, #108]	; (8002b50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae6:	0c9b      	lsrs	r3, r3, #18
 8002ae8:	3301      	adds	r3, #1
 8002aea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aec:	e002      	b.n	8002af4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	3b01      	subs	r3, #1
 8002af2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002af4:	4b14      	ldr	r3, [pc, #80]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b00:	d102      	bne.n	8002b08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f2      	bne.n	8002aee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b08:	4b0f      	ldr	r3, [pc, #60]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b14:	d110      	bne.n	8002b38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e00f      	b.n	8002b3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b1a:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b26:	d007      	beq.n	8002b38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b28:	4b07      	ldr	r3, [pc, #28]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b30:	4a05      	ldr	r2, [pc, #20]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	40007000 	.word	0x40007000
 8002b4c:	20000004 	.word	0x20000004
 8002b50:	431bde83 	.word	0x431bde83

08002b54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e3d4      	b.n	8003310 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b66:	4ba1      	ldr	r3, [pc, #644]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b70:	4b9e      	ldr	r3, [pc, #632]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0310 	and.w	r3, r3, #16
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 80e4 	beq.w	8002d50 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d007      	beq.n	8002b9e <HAL_RCC_OscConfig+0x4a>
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	2b0c      	cmp	r3, #12
 8002b92:	f040 808b 	bne.w	8002cac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	f040 8087 	bne.w	8002cac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b9e:	4b93      	ldr	r3, [pc, #588]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d005      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x62>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e3ac      	b.n	8003310 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1a      	ldr	r2, [r3, #32]
 8002bba:	4b8c      	ldr	r3, [pc, #560]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d004      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x7c>
 8002bc6:	4b89      	ldr	r3, [pc, #548]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bce:	e005      	b.n	8002bdc <HAL_RCC_OscConfig+0x88>
 8002bd0:	4b86      	ldr	r3, [pc, #536]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bd6:	091b      	lsrs	r3, r3, #4
 8002bd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d223      	bcs.n	8002c28 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 fd3f 	bl	8003668 <RCC_SetFlashLatencyFromMSIRange>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e38d      	b.n	8003310 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bf4:	4b7d      	ldr	r3, [pc, #500]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a7c      	ldr	r2, [pc, #496]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002bfa:	f043 0308 	orr.w	r3, r3, #8
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	4b7a      	ldr	r3, [pc, #488]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	4977      	ldr	r1, [pc, #476]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c12:	4b76      	ldr	r3, [pc, #472]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	021b      	lsls	r3, r3, #8
 8002c20:	4972      	ldr	r1, [pc, #456]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	604b      	str	r3, [r1, #4]
 8002c26:	e025      	b.n	8002c74 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c28:	4b70      	ldr	r3, [pc, #448]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a6f      	ldr	r2, [pc, #444]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002c2e:	f043 0308 	orr.w	r3, r3, #8
 8002c32:	6013      	str	r3, [r2, #0]
 8002c34:	4b6d      	ldr	r3, [pc, #436]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	496a      	ldr	r1, [pc, #424]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c46:	4b69      	ldr	r3, [pc, #420]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	021b      	lsls	r3, r3, #8
 8002c54:	4965      	ldr	r1, [pc, #404]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d109      	bne.n	8002c74 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 fcff 	bl	8003668 <RCC_SetFlashLatencyFromMSIRange>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e34d      	b.n	8003310 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c74:	f000 fc36 	bl	80034e4 <HAL_RCC_GetSysClockFreq>
 8002c78:	4601      	mov	r1, r0
 8002c7a:	4b5c      	ldr	r3, [pc, #368]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	091b      	lsrs	r3, r3, #4
 8002c80:	f003 030f 	and.w	r3, r3, #15
 8002c84:	4a5a      	ldr	r2, [pc, #360]	; (8002df0 <HAL_RCC_OscConfig+0x29c>)
 8002c86:	5cd3      	ldrb	r3, [r2, r3]
 8002c88:	f003 031f 	and.w	r3, r3, #31
 8002c8c:	fa21 f303 	lsr.w	r3, r1, r3
 8002c90:	4a58      	ldr	r2, [pc, #352]	; (8002df4 <HAL_RCC_OscConfig+0x2a0>)
 8002c92:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c94:	4b58      	ldr	r3, [pc, #352]	; (8002df8 <HAL_RCC_OscConfig+0x2a4>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff fa23 	bl	80020e4 <HAL_InitTick>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d052      	beq.n	8002d4e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
 8002caa:	e331      	b.n	8003310 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d032      	beq.n	8002d1a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cb4:	4b4d      	ldr	r3, [pc, #308]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a4c      	ldr	r2, [pc, #304]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002cba:	f043 0301 	orr.w	r3, r3, #1
 8002cbe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cc0:	f7ff fa60 	bl	8002184 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cc8:	f7ff fa5c 	bl	8002184 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e31a      	b.n	8003310 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cda:	4b44      	ldr	r3, [pc, #272]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f0      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ce6:	4b41      	ldr	r3, [pc, #260]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a40      	ldr	r2, [pc, #256]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002cec:	f043 0308 	orr.w	r3, r3, #8
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	4b3e      	ldr	r3, [pc, #248]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	493b      	ldr	r1, [pc, #236]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d04:	4b39      	ldr	r3, [pc, #228]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	021b      	lsls	r3, r3, #8
 8002d12:	4936      	ldr	r1, [pc, #216]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	604b      	str	r3, [r1, #4]
 8002d18:	e01a      	b.n	8002d50 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d1a:	4b34      	ldr	r3, [pc, #208]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a33      	ldr	r2, [pc, #204]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002d20:	f023 0301 	bic.w	r3, r3, #1
 8002d24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d26:	f7ff fa2d 	bl	8002184 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d2e:	f7ff fa29 	bl	8002184 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e2e7      	b.n	8003310 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d40:	4b2a      	ldr	r3, [pc, #168]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1f0      	bne.n	8002d2e <HAL_RCC_OscConfig+0x1da>
 8002d4c:	e000      	b.n	8002d50 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d4e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d074      	beq.n	8002e46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	2b08      	cmp	r3, #8
 8002d60:	d005      	beq.n	8002d6e <HAL_RCC_OscConfig+0x21a>
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	2b0c      	cmp	r3, #12
 8002d66:	d10e      	bne.n	8002d86 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	2b03      	cmp	r3, #3
 8002d6c:	d10b      	bne.n	8002d86 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d6e:	4b1f      	ldr	r3, [pc, #124]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d064      	beq.n	8002e44 <HAL_RCC_OscConfig+0x2f0>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d160      	bne.n	8002e44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e2c4      	b.n	8003310 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d8e:	d106      	bne.n	8002d9e <HAL_RCC_OscConfig+0x24a>
 8002d90:	4b16      	ldr	r3, [pc, #88]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a15      	ldr	r2, [pc, #84]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d9a:	6013      	str	r3, [r2, #0]
 8002d9c:	e01d      	b.n	8002dda <HAL_RCC_OscConfig+0x286>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002da6:	d10c      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x26e>
 8002da8:	4b10      	ldr	r3, [pc, #64]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a0f      	ldr	r2, [pc, #60]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002dae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	4b0d      	ldr	r3, [pc, #52]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a0c      	ldr	r2, [pc, #48]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dbe:	6013      	str	r3, [r2, #0]
 8002dc0:	e00b      	b.n	8002dda <HAL_RCC_OscConfig+0x286>
 8002dc2:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a09      	ldr	r2, [pc, #36]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	4b07      	ldr	r3, [pc, #28]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a06      	ldr	r2, [pc, #24]	; (8002dec <HAL_RCC_OscConfig+0x298>)
 8002dd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d01c      	beq.n	8002e1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de2:	f7ff f9cf 	bl	8002184 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002de8:	e011      	b.n	8002e0e <HAL_RCC_OscConfig+0x2ba>
 8002dea:	bf00      	nop
 8002dec:	40021000 	.word	0x40021000
 8002df0:	08007f04 	.word	0x08007f04
 8002df4:	20000004 	.word	0x20000004
 8002df8:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dfc:	f7ff f9c2 	bl	8002184 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b64      	cmp	r3, #100	; 0x64
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e280      	b.n	8003310 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e0e:	4baf      	ldr	r3, [pc, #700]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0f0      	beq.n	8002dfc <HAL_RCC_OscConfig+0x2a8>
 8002e1a:	e014      	b.n	8002e46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1c:	f7ff f9b2 	bl	8002184 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e24:	f7ff f9ae 	bl	8002184 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b64      	cmp	r3, #100	; 0x64
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e26c      	b.n	8003310 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e36:	4ba5      	ldr	r3, [pc, #660]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f0      	bne.n	8002e24 <HAL_RCC_OscConfig+0x2d0>
 8002e42:	e000      	b.n	8002e46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d060      	beq.n	8002f14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d005      	beq.n	8002e64 <HAL_RCC_OscConfig+0x310>
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	2b0c      	cmp	r3, #12
 8002e5c:	d119      	bne.n	8002e92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d116      	bne.n	8002e92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e64:	4b99      	ldr	r3, [pc, #612]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_RCC_OscConfig+0x328>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e249      	b.n	8003310 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7c:	4b93      	ldr	r3, [pc, #588]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	061b      	lsls	r3, r3, #24
 8002e8a:	4990      	ldr	r1, [pc, #576]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e90:	e040      	b.n	8002f14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d023      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e9a:	4b8c      	ldr	r3, [pc, #560]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a8b      	ldr	r2, [pc, #556]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 8002ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea6:	f7ff f96d 	bl	8002184 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eae:	f7ff f969 	bl	8002184 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e227      	b.n	8003310 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ec0:	4b82      	ldr	r3, [pc, #520]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0f0      	beq.n	8002eae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ecc:	4b7f      	ldr	r3, [pc, #508]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	061b      	lsls	r3, r3, #24
 8002eda:	497c      	ldr	r1, [pc, #496]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	604b      	str	r3, [r1, #4]
 8002ee0:	e018      	b.n	8002f14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ee2:	4b7a      	ldr	r3, [pc, #488]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a79      	ldr	r2, [pc, #484]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 8002ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eee:	f7ff f949 	bl	8002184 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef6:	f7ff f945 	bl	8002184 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e203      	b.n	8003310 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f08:	4b70      	ldr	r3, [pc, #448]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1f0      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d03c      	beq.n	8002f9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d01c      	beq.n	8002f62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f28:	4b68      	ldr	r3, [pc, #416]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 8002f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f2e:	4a67      	ldr	r2, [pc, #412]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f38:	f7ff f924 	bl	8002184 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f40:	f7ff f920 	bl	8002184 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e1de      	b.n	8003310 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f52:	4b5e      	ldr	r3, [pc, #376]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 8002f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0ef      	beq.n	8002f40 <HAL_RCC_OscConfig+0x3ec>
 8002f60:	e01b      	b.n	8002f9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f62:	4b5a      	ldr	r3, [pc, #360]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 8002f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f68:	4a58      	ldr	r2, [pc, #352]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 8002f6a:	f023 0301 	bic.w	r3, r3, #1
 8002f6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f72:	f7ff f907 	bl	8002184 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f7a:	f7ff f903 	bl	8002184 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e1c1      	b.n	8003310 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f8c:	4b4f      	ldr	r3, [pc, #316]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 8002f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1ef      	bne.n	8002f7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 80a6 	beq.w	80030f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fac:	4b47      	ldr	r3, [pc, #284]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 8002fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10d      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fb8:	4b44      	ldr	r3, [pc, #272]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 8002fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fbc:	4a43      	ldr	r2, [pc, #268]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 8002fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc2:	6593      	str	r3, [r2, #88]	; 0x58
 8002fc4:	4b41      	ldr	r3, [pc, #260]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 8002fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fcc:	60bb      	str	r3, [r7, #8]
 8002fce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fd4:	4b3e      	ldr	r3, [pc, #248]	; (80030d0 <HAL_RCC_OscConfig+0x57c>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d118      	bne.n	8003012 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fe0:	4b3b      	ldr	r3, [pc, #236]	; (80030d0 <HAL_RCC_OscConfig+0x57c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a3a      	ldr	r2, [pc, #232]	; (80030d0 <HAL_RCC_OscConfig+0x57c>)
 8002fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fec:	f7ff f8ca 	bl	8002184 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff4:	f7ff f8c6 	bl	8002184 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e184      	b.n	8003310 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003006:	4b32      	ldr	r3, [pc, #200]	; (80030d0 <HAL_RCC_OscConfig+0x57c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f0      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d108      	bne.n	800302c <HAL_RCC_OscConfig+0x4d8>
 800301a:	4b2c      	ldr	r3, [pc, #176]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 800301c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003020:	4a2a      	ldr	r2, [pc, #168]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 8003022:	f043 0301 	orr.w	r3, r3, #1
 8003026:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800302a:	e024      	b.n	8003076 <HAL_RCC_OscConfig+0x522>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2b05      	cmp	r3, #5
 8003032:	d110      	bne.n	8003056 <HAL_RCC_OscConfig+0x502>
 8003034:	4b25      	ldr	r3, [pc, #148]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 8003036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303a:	4a24      	ldr	r2, [pc, #144]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 800303c:	f043 0304 	orr.w	r3, r3, #4
 8003040:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003044:	4b21      	ldr	r3, [pc, #132]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 8003046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304a:	4a20      	ldr	r2, [pc, #128]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003054:	e00f      	b.n	8003076 <HAL_RCC_OscConfig+0x522>
 8003056:	4b1d      	ldr	r3, [pc, #116]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305c:	4a1b      	ldr	r2, [pc, #108]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 800305e:	f023 0301 	bic.w	r3, r3, #1
 8003062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003066:	4b19      	ldr	r3, [pc, #100]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 8003068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306c:	4a17      	ldr	r2, [pc, #92]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 800306e:	f023 0304 	bic.w	r3, r3, #4
 8003072:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d016      	beq.n	80030ac <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307e:	f7ff f881 	bl	8002184 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003084:	e00a      	b.n	800309c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003086:	f7ff f87d 	bl	8002184 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	f241 3288 	movw	r2, #5000	; 0x1388
 8003094:	4293      	cmp	r3, r2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e139      	b.n	8003310 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800309c:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <HAL_RCC_OscConfig+0x578>)
 800309e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0ed      	beq.n	8003086 <HAL_RCC_OscConfig+0x532>
 80030aa:	e01a      	b.n	80030e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ac:	f7ff f86a 	bl	8002184 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030b2:	e00f      	b.n	80030d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b4:	f7ff f866 	bl	8002184 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d906      	bls.n	80030d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e122      	b.n	8003310 <HAL_RCC_OscConfig+0x7bc>
 80030ca:	bf00      	nop
 80030cc:	40021000 	.word	0x40021000
 80030d0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030d4:	4b90      	ldr	r3, [pc, #576]	; (8003318 <HAL_RCC_OscConfig+0x7c4>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1e8      	bne.n	80030b4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030e2:	7ffb      	ldrb	r3, [r7, #31]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d105      	bne.n	80030f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e8:	4b8b      	ldr	r3, [pc, #556]	; (8003318 <HAL_RCC_OscConfig+0x7c4>)
 80030ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ec:	4a8a      	ldr	r2, [pc, #552]	; (8003318 <HAL_RCC_OscConfig+0x7c4>)
 80030ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030f2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 8108 	beq.w	800330e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003102:	2b02      	cmp	r3, #2
 8003104:	f040 80d0 	bne.w	80032a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003108:	4b83      	ldr	r3, [pc, #524]	; (8003318 <HAL_RCC_OscConfig+0x7c4>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f003 0203 	and.w	r2, r3, #3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	429a      	cmp	r2, r3
 800311a:	d130      	bne.n	800317e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	3b01      	subs	r3, #1
 8003128:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800312a:	429a      	cmp	r2, r3
 800312c:	d127      	bne.n	800317e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003138:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800313a:	429a      	cmp	r2, r3
 800313c:	d11f      	bne.n	800317e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003148:	2a07      	cmp	r2, #7
 800314a:	bf14      	ite	ne
 800314c:	2201      	movne	r2, #1
 800314e:	2200      	moveq	r2, #0
 8003150:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003152:	4293      	cmp	r3, r2
 8003154:	d113      	bne.n	800317e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003160:	085b      	lsrs	r3, r3, #1
 8003162:	3b01      	subs	r3, #1
 8003164:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003166:	429a      	cmp	r2, r3
 8003168:	d109      	bne.n	800317e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	085b      	lsrs	r3, r3, #1
 8003176:	3b01      	subs	r3, #1
 8003178:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800317a:	429a      	cmp	r2, r3
 800317c:	d06e      	beq.n	800325c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	2b0c      	cmp	r3, #12
 8003182:	d069      	beq.n	8003258 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003184:	4b64      	ldr	r3, [pc, #400]	; (8003318 <HAL_RCC_OscConfig+0x7c4>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d105      	bne.n	800319c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003190:	4b61      	ldr	r3, [pc, #388]	; (8003318 <HAL_RCC_OscConfig+0x7c4>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e0b7      	b.n	8003310 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80031a0:	4b5d      	ldr	r3, [pc, #372]	; (8003318 <HAL_RCC_OscConfig+0x7c4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a5c      	ldr	r2, [pc, #368]	; (8003318 <HAL_RCC_OscConfig+0x7c4>)
 80031a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031ac:	f7fe ffea 	bl	8002184 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b4:	f7fe ffe6 	bl	8002184 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e0a4      	b.n	8003310 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031c6:	4b54      	ldr	r3, [pc, #336]	; (8003318 <HAL_RCC_OscConfig+0x7c4>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031d2:	4b51      	ldr	r3, [pc, #324]	; (8003318 <HAL_RCC_OscConfig+0x7c4>)
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	4b51      	ldr	r3, [pc, #324]	; (800331c <HAL_RCC_OscConfig+0x7c8>)
 80031d8:	4013      	ands	r3, r2
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80031e2:	3a01      	subs	r2, #1
 80031e4:	0112      	lsls	r2, r2, #4
 80031e6:	4311      	orrs	r1, r2
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031ec:	0212      	lsls	r2, r2, #8
 80031ee:	4311      	orrs	r1, r2
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031f4:	0852      	lsrs	r2, r2, #1
 80031f6:	3a01      	subs	r2, #1
 80031f8:	0552      	lsls	r2, r2, #21
 80031fa:	4311      	orrs	r1, r2
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003200:	0852      	lsrs	r2, r2, #1
 8003202:	3a01      	subs	r2, #1
 8003204:	0652      	lsls	r2, r2, #25
 8003206:	4311      	orrs	r1, r2
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800320c:	0912      	lsrs	r2, r2, #4
 800320e:	0452      	lsls	r2, r2, #17
 8003210:	430a      	orrs	r2, r1
 8003212:	4941      	ldr	r1, [pc, #260]	; (8003318 <HAL_RCC_OscConfig+0x7c4>)
 8003214:	4313      	orrs	r3, r2
 8003216:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003218:	4b3f      	ldr	r3, [pc, #252]	; (8003318 <HAL_RCC_OscConfig+0x7c4>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a3e      	ldr	r2, [pc, #248]	; (8003318 <HAL_RCC_OscConfig+0x7c4>)
 800321e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003222:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003224:	4b3c      	ldr	r3, [pc, #240]	; (8003318 <HAL_RCC_OscConfig+0x7c4>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	4a3b      	ldr	r2, [pc, #236]	; (8003318 <HAL_RCC_OscConfig+0x7c4>)
 800322a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800322e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003230:	f7fe ffa8 	bl	8002184 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003238:	f7fe ffa4 	bl	8002184 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e062      	b.n	8003310 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800324a:	4b33      	ldr	r3, [pc, #204]	; (8003318 <HAL_RCC_OscConfig+0x7c4>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003256:	e05a      	b.n	800330e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e059      	b.n	8003310 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800325c:	4b2e      	ldr	r3, [pc, #184]	; (8003318 <HAL_RCC_OscConfig+0x7c4>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d152      	bne.n	800330e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003268:	4b2b      	ldr	r3, [pc, #172]	; (8003318 <HAL_RCC_OscConfig+0x7c4>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a2a      	ldr	r2, [pc, #168]	; (8003318 <HAL_RCC_OscConfig+0x7c4>)
 800326e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003272:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003274:	4b28      	ldr	r3, [pc, #160]	; (8003318 <HAL_RCC_OscConfig+0x7c4>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	4a27      	ldr	r2, [pc, #156]	; (8003318 <HAL_RCC_OscConfig+0x7c4>)
 800327a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800327e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003280:	f7fe ff80 	bl	8002184 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003288:	f7fe ff7c 	bl	8002184 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e03a      	b.n	8003310 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800329a:	4b1f      	ldr	r3, [pc, #124]	; (8003318 <HAL_RCC_OscConfig+0x7c4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCC_OscConfig+0x734>
 80032a6:	e032      	b.n	800330e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	2b0c      	cmp	r3, #12
 80032ac:	d02d      	beq.n	800330a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ae:	4b1a      	ldr	r3, [pc, #104]	; (8003318 <HAL_RCC_OscConfig+0x7c4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a19      	ldr	r2, [pc, #100]	; (8003318 <HAL_RCC_OscConfig+0x7c4>)
 80032b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032b8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80032ba:	4b17      	ldr	r3, [pc, #92]	; (8003318 <HAL_RCC_OscConfig+0x7c4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d105      	bne.n	80032d2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80032c6:	4b14      	ldr	r3, [pc, #80]	; (8003318 <HAL_RCC_OscConfig+0x7c4>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	4a13      	ldr	r2, [pc, #76]	; (8003318 <HAL_RCC_OscConfig+0x7c4>)
 80032cc:	f023 0303 	bic.w	r3, r3, #3
 80032d0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80032d2:	4b11      	ldr	r3, [pc, #68]	; (8003318 <HAL_RCC_OscConfig+0x7c4>)
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	4a10      	ldr	r2, [pc, #64]	; (8003318 <HAL_RCC_OscConfig+0x7c4>)
 80032d8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80032dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e2:	f7fe ff4f 	bl	8002184 <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032e8:	e008      	b.n	80032fc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ea:	f7fe ff4b 	bl	8002184 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e009      	b.n	8003310 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032fc:	4b06      	ldr	r3, [pc, #24]	; (8003318 <HAL_RCC_OscConfig+0x7c4>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1f0      	bne.n	80032ea <HAL_RCC_OscConfig+0x796>
 8003308:	e001      	b.n	800330e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3720      	adds	r7, #32
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40021000 	.word	0x40021000
 800331c:	f99d808c 	.word	0xf99d808c

08003320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0c8      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003334:	4b66      	ldr	r3, [pc, #408]	; (80034d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	429a      	cmp	r2, r3
 8003340:	d910      	bls.n	8003364 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003342:	4b63      	ldr	r3, [pc, #396]	; (80034d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f023 0207 	bic.w	r2, r3, #7
 800334a:	4961      	ldr	r1, [pc, #388]	; (80034d0 <HAL_RCC_ClockConfig+0x1b0>)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	4313      	orrs	r3, r2
 8003350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003352:	4b5f      	ldr	r3, [pc, #380]	; (80034d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d001      	beq.n	8003364 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e0b0      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	d04c      	beq.n	800340a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b03      	cmp	r3, #3
 8003376:	d107      	bne.n	8003388 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003378:	4b56      	ldr	r3, [pc, #344]	; (80034d4 <HAL_RCC_ClockConfig+0x1b4>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d121      	bne.n	80033c8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e09e      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2b02      	cmp	r3, #2
 800338e:	d107      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003390:	4b50      	ldr	r3, [pc, #320]	; (80034d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d115      	bne.n	80033c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e092      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d107      	bne.n	80033b8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033a8:	4b4a      	ldr	r3, [pc, #296]	; (80034d4 <HAL_RCC_ClockConfig+0x1b4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d109      	bne.n	80033c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e086      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033b8:	4b46      	ldr	r3, [pc, #280]	; (80034d4 <HAL_RCC_ClockConfig+0x1b4>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e07e      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033c8:	4b42      	ldr	r3, [pc, #264]	; (80034d4 <HAL_RCC_ClockConfig+0x1b4>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f023 0203 	bic.w	r2, r3, #3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	493f      	ldr	r1, [pc, #252]	; (80034d4 <HAL_RCC_ClockConfig+0x1b4>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033da:	f7fe fed3 	bl	8002184 <HAL_GetTick>
 80033de:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e0:	e00a      	b.n	80033f8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e2:	f7fe fecf 	bl	8002184 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e066      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f8:	4b36      	ldr	r3, [pc, #216]	; (80034d4 <HAL_RCC_ClockConfig+0x1b4>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 020c 	and.w	r2, r3, #12
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	429a      	cmp	r2, r3
 8003408:	d1eb      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d008      	beq.n	8003428 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003416:	4b2f      	ldr	r3, [pc, #188]	; (80034d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	492c      	ldr	r1, [pc, #176]	; (80034d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003424:	4313      	orrs	r3, r2
 8003426:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003428:	4b29      	ldr	r3, [pc, #164]	; (80034d0 <HAL_RCC_ClockConfig+0x1b0>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d210      	bcs.n	8003458 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003436:	4b26      	ldr	r3, [pc, #152]	; (80034d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 0207 	bic.w	r2, r3, #7
 800343e:	4924      	ldr	r1, [pc, #144]	; (80034d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	4313      	orrs	r3, r2
 8003444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003446:	4b22      	ldr	r3, [pc, #136]	; (80034d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d001      	beq.n	8003458 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e036      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	d008      	beq.n	8003476 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003464:	4b1b      	ldr	r3, [pc, #108]	; (80034d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	4918      	ldr	r1, [pc, #96]	; (80034d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003472:	4313      	orrs	r3, r2
 8003474:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d009      	beq.n	8003496 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003482:	4b14      	ldr	r3, [pc, #80]	; (80034d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	4910      	ldr	r1, [pc, #64]	; (80034d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003492:	4313      	orrs	r3, r2
 8003494:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003496:	f000 f825 	bl	80034e4 <HAL_RCC_GetSysClockFreq>
 800349a:	4601      	mov	r1, r0
 800349c:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <HAL_RCC_ClockConfig+0x1b4>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	091b      	lsrs	r3, r3, #4
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	4a0c      	ldr	r2, [pc, #48]	; (80034d8 <HAL_RCC_ClockConfig+0x1b8>)
 80034a8:	5cd3      	ldrb	r3, [r2, r3]
 80034aa:	f003 031f 	and.w	r3, r3, #31
 80034ae:	fa21 f303 	lsr.w	r3, r1, r3
 80034b2:	4a0a      	ldr	r2, [pc, #40]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 80034b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80034b6:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <HAL_RCC_ClockConfig+0x1c0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fe fe12 	bl	80020e4 <HAL_InitTick>
 80034c0:	4603      	mov	r3, r0
 80034c2:	72fb      	strb	r3, [r7, #11]

  return status;
 80034c4:	7afb      	ldrb	r3, [r7, #11]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40022000 	.word	0x40022000
 80034d4:	40021000 	.word	0x40021000
 80034d8:	08007f04 	.word	0x08007f04
 80034dc:	20000004 	.word	0x20000004
 80034e0:	2000001c 	.word	0x2000001c

080034e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b089      	sub	sp, #36	; 0x24
 80034e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
 80034ee:	2300      	movs	r3, #0
 80034f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034f2:	4b3d      	ldr	r3, [pc, #244]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x104>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034fc:	4b3a      	ldr	r3, [pc, #232]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x104>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f003 0303 	and.w	r3, r3, #3
 8003504:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <HAL_RCC_GetSysClockFreq+0x34>
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	2b0c      	cmp	r3, #12
 8003510:	d121      	bne.n	8003556 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d11e      	bne.n	8003556 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003518:	4b33      	ldr	r3, [pc, #204]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x104>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b00      	cmp	r3, #0
 8003522:	d107      	bne.n	8003534 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003524:	4b30      	ldr	r3, [pc, #192]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800352a:	0a1b      	lsrs	r3, r3, #8
 800352c:	f003 030f 	and.w	r3, r3, #15
 8003530:	61fb      	str	r3, [r7, #28]
 8003532:	e005      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003534:	4b2c      	ldr	r3, [pc, #176]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	091b      	lsrs	r3, r3, #4
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003540:	4a2a      	ldr	r2, [pc, #168]	; (80035ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003548:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10d      	bne.n	800356c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003554:	e00a      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	2b04      	cmp	r3, #4
 800355a:	d102      	bne.n	8003562 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800355c:	4b24      	ldr	r3, [pc, #144]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800355e:	61bb      	str	r3, [r7, #24]
 8003560:	e004      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	2b08      	cmp	r3, #8
 8003566:	d101      	bne.n	800356c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003568:	4b22      	ldr	r3, [pc, #136]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800356a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	2b0c      	cmp	r3, #12
 8003570:	d133      	bne.n	80035da <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003572:	4b1d      	ldr	r3, [pc, #116]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d002      	beq.n	8003588 <HAL_RCC_GetSysClockFreq+0xa4>
 8003582:	2b03      	cmp	r3, #3
 8003584:	d003      	beq.n	800358e <HAL_RCC_GetSysClockFreq+0xaa>
 8003586:	e005      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003588:	4b19      	ldr	r3, [pc, #100]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800358a:	617b      	str	r3, [r7, #20]
      break;
 800358c:	e005      	b.n	800359a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800358e:	4b19      	ldr	r3, [pc, #100]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003590:	617b      	str	r3, [r7, #20]
      break;
 8003592:	e002      	b.n	800359a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	617b      	str	r3, [r7, #20]
      break;
 8003598:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800359a:	4b13      	ldr	r3, [pc, #76]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x104>)
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	091b      	lsrs	r3, r3, #4
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	3301      	adds	r3, #1
 80035a6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80035a8:	4b0f      	ldr	r3, [pc, #60]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x104>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	0a1b      	lsrs	r3, r3, #8
 80035ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	fb02 f203 	mul.w	r2, r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80035be:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035c0:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x104>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	0e5b      	lsrs	r3, r3, #25
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	3301      	adds	r3, #1
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80035da:	69bb      	ldr	r3, [r7, #24]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3724      	adds	r7, #36	; 0x24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	40021000 	.word	0x40021000
 80035ec:	08007f1c 	.word	0x08007f1c
 80035f0:	00f42400 	.word	0x00f42400
 80035f4:	007a1200 	.word	0x007a1200

080035f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035fc:	4b03      	ldr	r3, [pc, #12]	; (800360c <HAL_RCC_GetHCLKFreq+0x14>)
 80035fe:	681b      	ldr	r3, [r3, #0]
}
 8003600:	4618      	mov	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	20000004 	.word	0x20000004

08003610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003614:	f7ff fff0 	bl	80035f8 <HAL_RCC_GetHCLKFreq>
 8003618:	4601      	mov	r1, r0
 800361a:	4b06      	ldr	r3, [pc, #24]	; (8003634 <HAL_RCC_GetPCLK1Freq+0x24>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	0a1b      	lsrs	r3, r3, #8
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	4a04      	ldr	r2, [pc, #16]	; (8003638 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003626:	5cd3      	ldrb	r3, [r2, r3]
 8003628:	f003 031f 	and.w	r3, r3, #31
 800362c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003630:	4618      	mov	r0, r3
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40021000 	.word	0x40021000
 8003638:	08007f14 	.word	0x08007f14

0800363c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003640:	f7ff ffda 	bl	80035f8 <HAL_RCC_GetHCLKFreq>
 8003644:	4601      	mov	r1, r0
 8003646:	4b06      	ldr	r3, [pc, #24]	; (8003660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	0adb      	lsrs	r3, r3, #11
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	4a04      	ldr	r2, [pc, #16]	; (8003664 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003652:	5cd3      	ldrb	r3, [r2, r3]
 8003654:	f003 031f 	and.w	r3, r3, #31
 8003658:	fa21 f303 	lsr.w	r3, r1, r3
}
 800365c:	4618      	mov	r0, r3
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40021000 	.word	0x40021000
 8003664:	08007f14 	.word	0x08007f14

08003668 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003670:	2300      	movs	r3, #0
 8003672:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003674:	4b2a      	ldr	r3, [pc, #168]	; (8003720 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003680:	f7ff fa04 	bl	8002a8c <HAL_PWREx_GetVoltageRange>
 8003684:	6178      	str	r0, [r7, #20]
 8003686:	e014      	b.n	80036b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003688:	4b25      	ldr	r3, [pc, #148]	; (8003720 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800368a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368c:	4a24      	ldr	r2, [pc, #144]	; (8003720 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800368e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003692:	6593      	str	r3, [r2, #88]	; 0x58
 8003694:	4b22      	ldr	r3, [pc, #136]	; (8003720 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80036a0:	f7ff f9f4 	bl	8002a8c <HAL_PWREx_GetVoltageRange>
 80036a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80036a6:	4b1e      	ldr	r3, [pc, #120]	; (8003720 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036aa:	4a1d      	ldr	r2, [pc, #116]	; (8003720 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036b8:	d10b      	bne.n	80036d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b80      	cmp	r3, #128	; 0x80
 80036be:	d919      	bls.n	80036f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2ba0      	cmp	r3, #160	; 0xa0
 80036c4:	d902      	bls.n	80036cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036c6:	2302      	movs	r3, #2
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	e013      	b.n	80036f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036cc:	2301      	movs	r3, #1
 80036ce:	613b      	str	r3, [r7, #16]
 80036d0:	e010      	b.n	80036f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b80      	cmp	r3, #128	; 0x80
 80036d6:	d902      	bls.n	80036de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80036d8:	2303      	movs	r3, #3
 80036da:	613b      	str	r3, [r7, #16]
 80036dc:	e00a      	b.n	80036f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b80      	cmp	r3, #128	; 0x80
 80036e2:	d102      	bne.n	80036ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036e4:	2302      	movs	r3, #2
 80036e6:	613b      	str	r3, [r7, #16]
 80036e8:	e004      	b.n	80036f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b70      	cmp	r3, #112	; 0x70
 80036ee:	d101      	bne.n	80036f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036f0:	2301      	movs	r3, #1
 80036f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036f4:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f023 0207 	bic.w	r2, r3, #7
 80036fc:	4909      	ldr	r1, [pc, #36]	; (8003724 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003704:	4b07      	ldr	r3, [pc, #28]	; (8003724 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	429a      	cmp	r2, r3
 8003710:	d001      	beq.n	8003716 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e000      	b.n	8003718 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40021000 	.word	0x40021000
 8003724:	40022000 	.word	0x40022000

08003728 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003730:	2300      	movs	r3, #0
 8003732:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003734:	2300      	movs	r3, #0
 8003736:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003740:	2b00      	cmp	r3, #0
 8003742:	d03f      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003748:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800374c:	d01c      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800374e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003752:	d802      	bhi.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00e      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003758:	e01f      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800375a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800375e:	d003      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003760:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003764:	d01c      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003766:	e018      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003768:	4b85      	ldr	r3, [pc, #532]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	4a84      	ldr	r2, [pc, #528]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800376e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003772:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003774:	e015      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3304      	adds	r3, #4
 800377a:	2100      	movs	r1, #0
 800377c:	4618      	mov	r0, r3
 800377e:	f000 fab9 	bl	8003cf4 <RCCEx_PLLSAI1_Config>
 8003782:	4603      	mov	r3, r0
 8003784:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003786:	e00c      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3320      	adds	r3, #32
 800378c:	2100      	movs	r1, #0
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fba0 	bl	8003ed4 <RCCEx_PLLSAI2_Config>
 8003794:	4603      	mov	r3, r0
 8003796:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003798:	e003      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	74fb      	strb	r3, [r7, #19]
      break;
 800379e:	e000      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80037a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037a2:	7cfb      	ldrb	r3, [r7, #19]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10b      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037a8:	4b75      	ldr	r3, [pc, #468]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037b6:	4972      	ldr	r1, [pc, #456]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80037be:	e001      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c0:	7cfb      	ldrb	r3, [r7, #19]
 80037c2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d03f      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037d8:	d01c      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80037da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037de:	d802      	bhi.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00e      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80037e4:	e01f      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80037e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037ea:	d003      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80037ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80037f0:	d01c      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x104>
 80037f2:	e018      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037f4:	4b62      	ldr	r3, [pc, #392]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	4a61      	ldr	r2, [pc, #388]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003800:	e015      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	3304      	adds	r3, #4
 8003806:	2100      	movs	r1, #0
 8003808:	4618      	mov	r0, r3
 800380a:	f000 fa73 	bl	8003cf4 <RCCEx_PLLSAI1_Config>
 800380e:	4603      	mov	r3, r0
 8003810:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003812:	e00c      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3320      	adds	r3, #32
 8003818:	2100      	movs	r1, #0
 800381a:	4618      	mov	r0, r3
 800381c:	f000 fb5a 	bl	8003ed4 <RCCEx_PLLSAI2_Config>
 8003820:	4603      	mov	r3, r0
 8003822:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003824:	e003      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	74fb      	strb	r3, [r7, #19]
      break;
 800382a:	e000      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800382c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800382e:	7cfb      	ldrb	r3, [r7, #19]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10b      	bne.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003834:	4b52      	ldr	r3, [pc, #328]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003842:	494f      	ldr	r1, [pc, #316]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800384a:	e001      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384c:	7cfb      	ldrb	r3, [r7, #19]
 800384e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80a0 	beq.w	800399e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800385e:	2300      	movs	r3, #0
 8003860:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003862:	4b47      	ldr	r3, [pc, #284]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003872:	2300      	movs	r3, #0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00d      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003878:	4b41      	ldr	r3, [pc, #260]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800387a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387c:	4a40      	ldr	r2, [pc, #256]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800387e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003882:	6593      	str	r3, [r2, #88]	; 0x58
 8003884:	4b3e      	ldr	r3, [pc, #248]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388c:	60bb      	str	r3, [r7, #8]
 800388e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003890:	2301      	movs	r3, #1
 8003892:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003894:	4b3b      	ldr	r3, [pc, #236]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a3a      	ldr	r2, [pc, #232]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800389a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800389e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038a0:	f7fe fc70 	bl	8002184 <HAL_GetTick>
 80038a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038a6:	e009      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a8:	f7fe fc6c 	bl	8002184 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d902      	bls.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	74fb      	strb	r3, [r7, #19]
        break;
 80038ba:	e005      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038bc:	4b31      	ldr	r3, [pc, #196]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0ef      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80038c8:	7cfb      	ldrb	r3, [r7, #19]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d15c      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038ce:	4b2c      	ldr	r3, [pc, #176]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d01f      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d019      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038ec:	4b24      	ldr	r3, [pc, #144]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038f8:	4b21      	ldr	r3, [pc, #132]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fe:	4a20      	ldr	r2, [pc, #128]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003904:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003908:	4b1d      	ldr	r3, [pc, #116]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800390a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390e:	4a1c      	ldr	r2, [pc, #112]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003918:	4a19      	ldr	r2, [pc, #100]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d016      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392a:	f7fe fc2b 	bl	8002184 <HAL_GetTick>
 800392e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003930:	e00b      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003932:	f7fe fc27 	bl	8002184 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003940:	4293      	cmp	r3, r2
 8003942:	d902      	bls.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	74fb      	strb	r3, [r7, #19]
            break;
 8003948:	e006      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800394a:	4b0d      	ldr	r3, [pc, #52]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800394c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0ec      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003958:	7cfb      	ldrb	r3, [r7, #19]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10c      	bne.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800395e:	4b08      	ldr	r3, [pc, #32]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003964:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800396e:	4904      	ldr	r1, [pc, #16]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003976:	e009      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003978:	7cfb      	ldrb	r3, [r7, #19]
 800397a:	74bb      	strb	r3, [r7, #18]
 800397c:	e006      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800397e:	bf00      	nop
 8003980:	40021000 	.word	0x40021000
 8003984:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003988:	7cfb      	ldrb	r3, [r7, #19]
 800398a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800398c:	7c7b      	ldrb	r3, [r7, #17]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d105      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003992:	4b9e      	ldr	r3, [pc, #632]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003996:	4a9d      	ldr	r2, [pc, #628]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800399c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039aa:	4b98      	ldr	r3, [pc, #608]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b0:	f023 0203 	bic.w	r2, r3, #3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b8:	4994      	ldr	r1, [pc, #592]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00a      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039cc:	4b8f      	ldr	r3, [pc, #572]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d2:	f023 020c 	bic.w	r2, r3, #12
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039da:	498c      	ldr	r1, [pc, #560]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039ee:	4b87      	ldr	r3, [pc, #540]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	4983      	ldr	r1, [pc, #524]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0308 	and.w	r3, r3, #8
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00a      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a10:	4b7e      	ldr	r3, [pc, #504]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1e:	497b      	ldr	r1, [pc, #492]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0310 	and.w	r3, r3, #16
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00a      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a32:	4b76      	ldr	r3, [pc, #472]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a40:	4972      	ldr	r1, [pc, #456]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0320 	and.w	r3, r3, #32
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00a      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a54:	4b6d      	ldr	r3, [pc, #436]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a62:	496a      	ldr	r1, [pc, #424]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a76:	4b65      	ldr	r3, [pc, #404]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a84:	4961      	ldr	r1, [pc, #388]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00a      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a98:	4b5c      	ldr	r3, [pc, #368]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa6:	4959      	ldr	r1, [pc, #356]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003aba:	4b54      	ldr	r3, [pc, #336]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac8:	4950      	ldr	r1, [pc, #320]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00a      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003adc:	4b4b      	ldr	r3, [pc, #300]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aea:	4948      	ldr	r1, [pc, #288]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00a      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003afe:	4b43      	ldr	r3, [pc, #268]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0c:	493f      	ldr	r1, [pc, #252]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d028      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b20:	4b3a      	ldr	r3, [pc, #232]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b2e:	4937      	ldr	r1, [pc, #220]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b3e:	d106      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b40:	4b32      	ldr	r3, [pc, #200]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	4a31      	ldr	r2, [pc, #196]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b4a:	60d3      	str	r3, [r2, #12]
 8003b4c:	e011      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b56:	d10c      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 f8c8 	bl	8003cf4 <RCCEx_PLLSAI1_Config>
 8003b64:	4603      	mov	r3, r0
 8003b66:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b68:	7cfb      	ldrb	r3, [r7, #19]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003b6e:	7cfb      	ldrb	r3, [r7, #19]
 8003b70:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d028      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b7e:	4b23      	ldr	r3, [pc, #140]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8c:	491f      	ldr	r1, [pc, #124]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b9c:	d106      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b9e:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	4a1a      	ldr	r2, [pc, #104]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ba4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ba8:	60d3      	str	r3, [r2, #12]
 8003baa:	e011      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bb4:	d10c      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	2101      	movs	r1, #1
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 f899 	bl	8003cf4 <RCCEx_PLLSAI1_Config>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bc6:	7cfb      	ldrb	r3, [r7, #19]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003bcc:	7cfb      	ldrb	r3, [r7, #19]
 8003bce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d02b      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bdc:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bea:	4908      	ldr	r1, [pc, #32]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bfa:	d109      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bfc:	4b03      	ldr	r3, [pc, #12]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	4a02      	ldr	r2, [pc, #8]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c06:	60d3      	str	r3, [r2, #12]
 8003c08:	e014      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003c0a:	bf00      	nop
 8003c0c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c18:	d10c      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	2101      	movs	r1, #1
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 f867 	bl	8003cf4 <RCCEx_PLLSAI1_Config>
 8003c26:	4603      	mov	r3, r0
 8003c28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c2a:	7cfb      	ldrb	r3, [r7, #19]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003c30:	7cfb      	ldrb	r3, [r7, #19]
 8003c32:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d02f      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c40:	4b2b      	ldr	r3, [pc, #172]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c4e:	4928      	ldr	r1, [pc, #160]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c5e:	d10d      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3304      	adds	r3, #4
 8003c64:	2102      	movs	r1, #2
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 f844 	bl	8003cf4 <RCCEx_PLLSAI1_Config>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c70:	7cfb      	ldrb	r3, [r7, #19]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d014      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003c76:	7cfb      	ldrb	r3, [r7, #19]
 8003c78:	74bb      	strb	r3, [r7, #18]
 8003c7a:	e011      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c84:	d10c      	bne.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	3320      	adds	r3, #32
 8003c8a:	2102      	movs	r1, #2
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 f921 	bl	8003ed4 <RCCEx_PLLSAI2_Config>
 8003c92:	4603      	mov	r3, r0
 8003c94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c96:	7cfb      	ldrb	r3, [r7, #19]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003c9c:	7cfb      	ldrb	r3, [r7, #19]
 8003c9e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003cac:	4b10      	ldr	r3, [pc, #64]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cba:	490d      	ldr	r1, [pc, #52]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00b      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cce:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cde:	4904      	ldr	r1, [pc, #16]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ce6:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3718      	adds	r7, #24
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40021000 	.word	0x40021000

08003cf4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d02:	4b73      	ldr	r3, [pc, #460]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d018      	beq.n	8003d40 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d0e:	4b70      	ldr	r3, [pc, #448]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f003 0203 	and.w	r2, r3, #3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d10d      	bne.n	8003d3a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
       ||
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d009      	beq.n	8003d3a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d26:	4b6a      	ldr	r3, [pc, #424]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	091b      	lsrs	r3, r3, #4
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	1c5a      	adds	r2, r3, #1
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
       ||
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d044      	beq.n	8003dc4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	73fb      	strb	r3, [r7, #15]
 8003d3e:	e041      	b.n	8003dc4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d00c      	beq.n	8003d62 <RCCEx_PLLSAI1_Config+0x6e>
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	d013      	beq.n	8003d74 <RCCEx_PLLSAI1_Config+0x80>
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d120      	bne.n	8003d92 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d50:	4b5f      	ldr	r3, [pc, #380]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d11d      	bne.n	8003d98 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d60:	e01a      	b.n	8003d98 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d62:	4b5b      	ldr	r3, [pc, #364]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d116      	bne.n	8003d9c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d72:	e013      	b.n	8003d9c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d74:	4b56      	ldr	r3, [pc, #344]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10f      	bne.n	8003da0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d80:	4b53      	ldr	r3, [pc, #332]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d109      	bne.n	8003da0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d90:	e006      	b.n	8003da0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	73fb      	strb	r3, [r7, #15]
      break;
 8003d96:	e004      	b.n	8003da2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003d98:	bf00      	nop
 8003d9a:	e002      	b.n	8003da2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003d9c:	bf00      	nop
 8003d9e:	e000      	b.n	8003da2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003da0:	bf00      	nop
    }

    if(status == HAL_OK)
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10d      	bne.n	8003dc4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003da8:	4b49      	ldr	r3, [pc, #292]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6819      	ldr	r1, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	3b01      	subs	r3, #1
 8003dba:	011b      	lsls	r3, r3, #4
 8003dbc:	430b      	orrs	r3, r1
 8003dbe:	4944      	ldr	r1, [pc, #272]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d17d      	bne.n	8003ec6 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003dca:	4b41      	ldr	r3, [pc, #260]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a40      	ldr	r2, [pc, #256]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003dd0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003dd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dd6:	f7fe f9d5 	bl	8002184 <HAL_GetTick>
 8003dda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ddc:	e009      	b.n	8003df2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003dde:	f7fe f9d1 	bl	8002184 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d902      	bls.n	8003df2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	73fb      	strb	r3, [r7, #15]
        break;
 8003df0:	e005      	b.n	8003dfe <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003df2:	4b37      	ldr	r3, [pc, #220]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1ef      	bne.n	8003dde <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003dfe:	7bfb      	ldrb	r3, [r7, #15]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d160      	bne.n	8003ec6 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d111      	bne.n	8003e2e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e0a:	4b31      	ldr	r3, [pc, #196]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6892      	ldr	r2, [r2, #8]
 8003e1a:	0211      	lsls	r1, r2, #8
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	68d2      	ldr	r2, [r2, #12]
 8003e20:	0912      	lsrs	r2, r2, #4
 8003e22:	0452      	lsls	r2, r2, #17
 8003e24:	430a      	orrs	r2, r1
 8003e26:	492a      	ldr	r1, [pc, #168]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	610b      	str	r3, [r1, #16]
 8003e2c:	e027      	b.n	8003e7e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d112      	bne.n	8003e5a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e34:	4b26      	ldr	r3, [pc, #152]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003e3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6892      	ldr	r2, [r2, #8]
 8003e44:	0211      	lsls	r1, r2, #8
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6912      	ldr	r2, [r2, #16]
 8003e4a:	0852      	lsrs	r2, r2, #1
 8003e4c:	3a01      	subs	r2, #1
 8003e4e:	0552      	lsls	r2, r2, #21
 8003e50:	430a      	orrs	r2, r1
 8003e52:	491f      	ldr	r1, [pc, #124]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	610b      	str	r3, [r1, #16]
 8003e58:	e011      	b.n	8003e7e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e5a:	4b1d      	ldr	r3, [pc, #116]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e62:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	6892      	ldr	r2, [r2, #8]
 8003e6a:	0211      	lsls	r1, r2, #8
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6952      	ldr	r2, [r2, #20]
 8003e70:	0852      	lsrs	r2, r2, #1
 8003e72:	3a01      	subs	r2, #1
 8003e74:	0652      	lsls	r2, r2, #25
 8003e76:	430a      	orrs	r2, r1
 8003e78:	4915      	ldr	r1, [pc, #84]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e7e:	4b14      	ldr	r3, [pc, #80]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a13      	ldr	r2, [pc, #76]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e88:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8a:	f7fe f97b 	bl	8002184 <HAL_GetTick>
 8003e8e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e90:	e009      	b.n	8003ea6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e92:	f7fe f977 	bl	8002184 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d902      	bls.n	8003ea6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	73fb      	strb	r3, [r7, #15]
          break;
 8003ea4:	e005      	b.n	8003eb2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ea6:	4b0a      	ldr	r3, [pc, #40]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0ef      	beq.n	8003e92 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d106      	bne.n	8003ec6 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003eb8:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003eba:	691a      	ldr	r2, [r3, #16]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	4903      	ldr	r1, [pc, #12]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40021000 	.word	0x40021000

08003ed4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ee2:	4b68      	ldr	r3, [pc, #416]	; (8004084 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f003 0303 	and.w	r3, r3, #3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d018      	beq.n	8003f20 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003eee:	4b65      	ldr	r3, [pc, #404]	; (8004084 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f003 0203 	and.w	r2, r3, #3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d10d      	bne.n	8003f1a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
       ||
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d009      	beq.n	8003f1a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003f06:	4b5f      	ldr	r3, [pc, #380]	; (8004084 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	091b      	lsrs	r3, r3, #4
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	1c5a      	adds	r2, r3, #1
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
       ||
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d044      	beq.n	8003fa4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	73fb      	strb	r3, [r7, #15]
 8003f1e:	e041      	b.n	8003fa4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d00c      	beq.n	8003f42 <RCCEx_PLLSAI2_Config+0x6e>
 8003f28:	2b03      	cmp	r3, #3
 8003f2a:	d013      	beq.n	8003f54 <RCCEx_PLLSAI2_Config+0x80>
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d120      	bne.n	8003f72 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f30:	4b54      	ldr	r3, [pc, #336]	; (8004084 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d11d      	bne.n	8003f78 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f40:	e01a      	b.n	8003f78 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f42:	4b50      	ldr	r3, [pc, #320]	; (8004084 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d116      	bne.n	8003f7c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f52:	e013      	b.n	8003f7c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f54:	4b4b      	ldr	r3, [pc, #300]	; (8004084 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10f      	bne.n	8003f80 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f60:	4b48      	ldr	r3, [pc, #288]	; (8004084 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d109      	bne.n	8003f80 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f70:	e006      	b.n	8003f80 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	73fb      	strb	r3, [r7, #15]
      break;
 8003f76:	e004      	b.n	8003f82 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003f78:	bf00      	nop
 8003f7a:	e002      	b.n	8003f82 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003f7c:	bf00      	nop
 8003f7e:	e000      	b.n	8003f82 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003f80:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f82:	7bfb      	ldrb	r3, [r7, #15]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10d      	bne.n	8003fa4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f88:	4b3e      	ldr	r3, [pc, #248]	; (8004084 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6819      	ldr	r1, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	011b      	lsls	r3, r3, #4
 8003f9c:	430b      	orrs	r3, r1
 8003f9e:	4939      	ldr	r1, [pc, #228]	; (8004084 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d167      	bne.n	800407a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003faa:	4b36      	ldr	r3, [pc, #216]	; (8004084 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a35      	ldr	r2, [pc, #212]	; (8004084 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fb6:	f7fe f8e5 	bl	8002184 <HAL_GetTick>
 8003fba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003fbc:	e009      	b.n	8003fd2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fbe:	f7fe f8e1 	bl	8002184 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d902      	bls.n	8003fd2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	73fb      	strb	r3, [r7, #15]
        break;
 8003fd0:	e005      	b.n	8003fde <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003fd2:	4b2c      	ldr	r3, [pc, #176]	; (8004084 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1ef      	bne.n	8003fbe <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d14a      	bne.n	800407a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d111      	bne.n	800400e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fea:	4b26      	ldr	r3, [pc, #152]	; (8004084 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6892      	ldr	r2, [r2, #8]
 8003ffa:	0211      	lsls	r1, r2, #8
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	68d2      	ldr	r2, [r2, #12]
 8004000:	0912      	lsrs	r2, r2, #4
 8004002:	0452      	lsls	r2, r2, #17
 8004004:	430a      	orrs	r2, r1
 8004006:	491f      	ldr	r1, [pc, #124]	; (8004084 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004008:	4313      	orrs	r3, r2
 800400a:	614b      	str	r3, [r1, #20]
 800400c:	e011      	b.n	8004032 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800400e:	4b1d      	ldr	r3, [pc, #116]	; (8004084 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004016:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6892      	ldr	r2, [r2, #8]
 800401e:	0211      	lsls	r1, r2, #8
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6912      	ldr	r2, [r2, #16]
 8004024:	0852      	lsrs	r2, r2, #1
 8004026:	3a01      	subs	r2, #1
 8004028:	0652      	lsls	r2, r2, #25
 800402a:	430a      	orrs	r2, r1
 800402c:	4915      	ldr	r1, [pc, #84]	; (8004084 <RCCEx_PLLSAI2_Config+0x1b0>)
 800402e:	4313      	orrs	r3, r2
 8004030:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004032:	4b14      	ldr	r3, [pc, #80]	; (8004084 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a13      	ldr	r2, [pc, #76]	; (8004084 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800403c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403e:	f7fe f8a1 	bl	8002184 <HAL_GetTick>
 8004042:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004044:	e009      	b.n	800405a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004046:	f7fe f89d 	bl	8002184 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d902      	bls.n	800405a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	73fb      	strb	r3, [r7, #15]
          break;
 8004058:	e005      	b.n	8004066 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800405a:	4b0a      	ldr	r3, [pc, #40]	; (8004084 <RCCEx_PLLSAI2_Config+0x1b0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0ef      	beq.n	8004046 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d106      	bne.n	800407a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800406c:	4b05      	ldr	r3, [pc, #20]	; (8004084 <RCCEx_PLLSAI2_Config+0x1b0>)
 800406e:	695a      	ldr	r2, [r3, #20]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	4903      	ldr	r1, [pc, #12]	; (8004084 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004076:	4313      	orrs	r3, r2
 8004078:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800407a:	7bfb      	ldrb	r3, [r7, #15]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40021000 	.word	0x40021000

08004088 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e095      	b.n	80041c6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d108      	bne.n	80040b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040aa:	d009      	beq.n	80040c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	61da      	str	r2, [r3, #28]
 80040b2:	e005      	b.n	80040c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d106      	bne.n	80040e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f877 	bl	80041ce <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2202      	movs	r2, #2
 80040e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004100:	d902      	bls.n	8004108 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004102:	2300      	movs	r3, #0
 8004104:	60fb      	str	r3, [r7, #12]
 8004106:	e002      	b.n	800410e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800410c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004116:	d007      	beq.n	8004128 <HAL_SPI_Init+0xa0>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004120:	d002      	beq.n	8004128 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004138:	431a      	orrs	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	431a      	orrs	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004160:	431a      	orrs	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416a:	ea42 0103 	orr.w	r1, r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004172:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	0c1b      	lsrs	r3, r3, #16
 8004184:	f003 0204 	and.w	r2, r3, #4
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	431a      	orrs	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004196:	f003 0308 	and.w	r3, r3, #8
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80041a4:	ea42 0103 	orr.w	r1, r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b08a      	sub	sp, #40	; 0x28
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	60f8      	str	r0, [r7, #12]
 80041ea:	60b9      	str	r1, [r7, #8]
 80041ec:	607a      	str	r2, [r7, #4]
 80041ee:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80041f0:	2301      	movs	r3, #1
 80041f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80041f4:	2300      	movs	r3, #0
 80041f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_SPI_TransmitReceive+0x26>
 8004204:	2302      	movs	r3, #2
 8004206:	e1fb      	b.n	8004600 <HAL_SPI_TransmitReceive+0x41e>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004210:	f7fd ffb8 	bl	8002184 <HAL_GetTick>
 8004214:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800421c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004224:	887b      	ldrh	r3, [r7, #2]
 8004226:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004228:	887b      	ldrh	r3, [r7, #2]
 800422a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800422c:	7efb      	ldrb	r3, [r7, #27]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d00e      	beq.n	8004250 <HAL_SPI_TransmitReceive+0x6e>
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004238:	d106      	bne.n	8004248 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d102      	bne.n	8004248 <HAL_SPI_TransmitReceive+0x66>
 8004242:	7efb      	ldrb	r3, [r7, #27]
 8004244:	2b04      	cmp	r3, #4
 8004246:	d003      	beq.n	8004250 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004248:	2302      	movs	r3, #2
 800424a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800424e:	e1cd      	b.n	80045ec <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d005      	beq.n	8004262 <HAL_SPI_TransmitReceive+0x80>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <HAL_SPI_TransmitReceive+0x80>
 800425c:	887b      	ldrh	r3, [r7, #2]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d103      	bne.n	800426a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004268:	e1c0      	b.n	80045ec <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b04      	cmp	r3, #4
 8004274:	d003      	beq.n	800427e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2205      	movs	r2, #5
 800427a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	887a      	ldrh	r2, [r7, #2]
 800428e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	887a      	ldrh	r2, [r7, #2]
 8004296:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	887a      	ldrh	r2, [r7, #2]
 80042a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	887a      	ldrh	r2, [r7, #2]
 80042aa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042c0:	d802      	bhi.n	80042c8 <HAL_SPI_TransmitReceive+0xe6>
 80042c2:	8a3b      	ldrh	r3, [r7, #16]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d908      	bls.n	80042da <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042d6:	605a      	str	r2, [r3, #4]
 80042d8:	e007      	b.n	80042ea <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042e8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f4:	2b40      	cmp	r3, #64	; 0x40
 80042f6:	d007      	beq.n	8004308 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004306:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004310:	d97c      	bls.n	800440c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <HAL_SPI_TransmitReceive+0x13e>
 800431a:	8a7b      	ldrh	r3, [r7, #18]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d169      	bne.n	80043f4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004324:	881a      	ldrh	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	1c9a      	adds	r2, r3, #2
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800433a:	b29b      	uxth	r3, r3
 800433c:	3b01      	subs	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004344:	e056      	b.n	80043f4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b02      	cmp	r3, #2
 8004352:	d11b      	bne.n	800438c <HAL_SPI_TransmitReceive+0x1aa>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d016      	beq.n	800438c <HAL_SPI_TransmitReceive+0x1aa>
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	2b01      	cmp	r3, #1
 8004362:	d113      	bne.n	800438c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004368:	881a      	ldrh	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004374:	1c9a      	adds	r2, r3, #2
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800437e:	b29b      	uxth	r3, r3
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b01      	cmp	r3, #1
 8004398:	d11c      	bne.n	80043d4 <HAL_SPI_TransmitReceive+0x1f2>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d016      	beq.n	80043d4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68da      	ldr	r2, [r3, #12]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b0:	b292      	uxth	r2, r2
 80043b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b8:	1c9a      	adds	r2, r3, #2
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043d0:	2301      	movs	r3, #1
 80043d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80043d4:	f7fd fed6 	bl	8002184 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d807      	bhi.n	80043f4 <HAL_SPI_TransmitReceive+0x212>
 80043e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ea:	d003      	beq.n	80043f4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80043f2:	e0fb      	b.n	80045ec <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1a3      	bne.n	8004346 <HAL_SPI_TransmitReceive+0x164>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d19d      	bne.n	8004346 <HAL_SPI_TransmitReceive+0x164>
 800440a:	e0df      	b.n	80045cc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <HAL_SPI_TransmitReceive+0x23a>
 8004414:	8a7b      	ldrh	r3, [r7, #18]
 8004416:	2b01      	cmp	r3, #1
 8004418:	f040 80cb 	bne.w	80045b2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004420:	b29b      	uxth	r3, r3
 8004422:	2b01      	cmp	r3, #1
 8004424:	d912      	bls.n	800444c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442a:	881a      	ldrh	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004436:	1c9a      	adds	r2, r3, #2
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004440:	b29b      	uxth	r3, r3
 8004442:	3b02      	subs	r3, #2
 8004444:	b29a      	uxth	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	87da      	strh	r2, [r3, #62]	; 0x3e
 800444a:	e0b2      	b.n	80045b2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	330c      	adds	r3, #12
 8004456:	7812      	ldrb	r2, [r2, #0]
 8004458:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445e:	1c5a      	adds	r2, r3, #1
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004468:	b29b      	uxth	r3, r3
 800446a:	3b01      	subs	r3, #1
 800446c:	b29a      	uxth	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004472:	e09e      	b.n	80045b2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b02      	cmp	r3, #2
 8004480:	d134      	bne.n	80044ec <HAL_SPI_TransmitReceive+0x30a>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d02f      	beq.n	80044ec <HAL_SPI_TransmitReceive+0x30a>
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	2b01      	cmp	r3, #1
 8004490:	d12c      	bne.n	80044ec <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004496:	b29b      	uxth	r3, r3
 8004498:	2b01      	cmp	r3, #1
 800449a:	d912      	bls.n	80044c2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a0:	881a      	ldrh	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ac:	1c9a      	adds	r2, r3, #2
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	3b02      	subs	r3, #2
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044c0:	e012      	b.n	80044e8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	330c      	adds	r3, #12
 80044cc:	7812      	ldrb	r2, [r2, #0]
 80044ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d4:	1c5a      	adds	r2, r3, #1
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044de:	b29b      	uxth	r3, r3
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d148      	bne.n	800458c <HAL_SPI_TransmitReceive+0x3aa>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004500:	b29b      	uxth	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d042      	beq.n	800458c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800450c:	b29b      	uxth	r3, r3
 800450e:	2b01      	cmp	r3, #1
 8004510:	d923      	bls.n	800455a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68da      	ldr	r2, [r3, #12]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	b292      	uxth	r2, r2
 800451e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	1c9a      	adds	r2, r3, #2
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004530:	b29b      	uxth	r3, r3
 8004532:	3b02      	subs	r3, #2
 8004534:	b29a      	uxth	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004542:	b29b      	uxth	r3, r3
 8004544:	2b01      	cmp	r3, #1
 8004546:	d81f      	bhi.n	8004588 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004556:	605a      	str	r2, [r3, #4]
 8004558:	e016      	b.n	8004588 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f103 020c 	add.w	r2, r3, #12
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	7812      	ldrb	r2, [r2, #0]
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800457c:	b29b      	uxth	r3, r3
 800457e:	3b01      	subs	r3, #1
 8004580:	b29a      	uxth	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004588:	2301      	movs	r3, #1
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800458c:	f7fd fdfa 	bl	8002184 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004598:	429a      	cmp	r2, r3
 800459a:	d803      	bhi.n	80045a4 <HAL_SPI_TransmitReceive+0x3c2>
 800459c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a2:	d102      	bne.n	80045aa <HAL_SPI_TransmitReceive+0x3c8>
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d103      	bne.n	80045b2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80045b0:	e01c      	b.n	80045ec <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f47f af5b 	bne.w	8004474 <HAL_SPI_TransmitReceive+0x292>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f47f af54 	bne.w	8004474 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045cc:	69fa      	ldr	r2, [r7, #28]
 80045ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 f93d 	bl	8004850 <SPI_EndRxTxTransaction>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d006      	beq.n	80045ea <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2220      	movs	r2, #32
 80045e6:	661a      	str	r2, [r3, #96]	; 0x60
 80045e8:	e000      	b.n	80045ec <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80045ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80045fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004600:	4618      	mov	r0, r3
 8004602:	3728      	adds	r7, #40	; 0x28
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004616:	b2db      	uxtb	r3, r3
}
 8004618:	4618      	mov	r0, r3
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b088      	sub	sp, #32
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	603b      	str	r3, [r7, #0]
 8004630:	4613      	mov	r3, r2
 8004632:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004634:	f7fd fda6 	bl	8002184 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463c:	1a9b      	subs	r3, r3, r2
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	4413      	add	r3, r2
 8004642:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004644:	f7fd fd9e 	bl	8002184 <HAL_GetTick>
 8004648:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800464a:	4b39      	ldr	r3, [pc, #228]	; (8004730 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	015b      	lsls	r3, r3, #5
 8004650:	0d1b      	lsrs	r3, r3, #20
 8004652:	69fa      	ldr	r2, [r7, #28]
 8004654:	fb02 f303 	mul.w	r3, r2, r3
 8004658:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800465a:	e054      	b.n	8004706 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004662:	d050      	beq.n	8004706 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004664:	f7fd fd8e 	bl	8002184 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	69fa      	ldr	r2, [r7, #28]
 8004670:	429a      	cmp	r2, r3
 8004672:	d902      	bls.n	800467a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d13d      	bne.n	80046f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004688:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004692:	d111      	bne.n	80046b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800469c:	d004      	beq.n	80046a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a6:	d107      	bne.n	80046b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c0:	d10f      	bne.n	80046e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e017      	b.n	8004726 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	3b01      	subs	r3, #1
 8004704:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	4013      	ands	r3, r2
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	429a      	cmp	r2, r3
 8004714:	bf0c      	ite	eq
 8004716:	2301      	moveq	r3, #1
 8004718:	2300      	movne	r3, #0
 800471a:	b2db      	uxtb	r3, r3
 800471c:	461a      	mov	r2, r3
 800471e:	79fb      	ldrb	r3, [r7, #7]
 8004720:	429a      	cmp	r2, r3
 8004722:	d19b      	bne.n	800465c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3720      	adds	r7, #32
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	20000004 	.word	0x20000004

08004734 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b088      	sub	sp, #32
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
 8004740:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004742:	f7fd fd1f 	bl	8002184 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474a:	1a9b      	subs	r3, r3, r2
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	4413      	add	r3, r2
 8004750:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004752:	f7fd fd17 	bl	8002184 <HAL_GetTick>
 8004756:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004758:	4b3c      	ldr	r3, [pc, #240]	; (800484c <SPI_WaitFifoStateUntilTimeout+0x118>)
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	4613      	mov	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	00da      	lsls	r2, r3, #3
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	0d1b      	lsrs	r3, r3, #20
 8004768:	69fa      	ldr	r2, [r7, #28]
 800476a:	fb02 f303 	mul.w	r3, r2, r3
 800476e:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8004770:	e05f      	b.n	8004832 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004778:	d106      	bne.n	8004788 <SPI_WaitFifoStateUntilTimeout+0x54>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d103      	bne.n	8004788 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	330c      	adds	r3, #12
 8004786:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478e:	d050      	beq.n	8004832 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004790:	f7fd fcf8 	bl	8002184 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	69fa      	ldr	r2, [r7, #28]
 800479c:	429a      	cmp	r2, r3
 800479e:	d902      	bls.n	80047a6 <SPI_WaitFifoStateUntilTimeout+0x72>
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d13d      	bne.n	8004822 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047be:	d111      	bne.n	80047e4 <SPI_WaitFifoStateUntilTimeout+0xb0>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047c8:	d004      	beq.n	80047d4 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d2:	d107      	bne.n	80047e4 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ec:	d10f      	bne.n	800480e <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047fc:	601a      	str	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800480c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e010      	b.n	8004844 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	3b01      	subs	r3, #1
 8004830:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	4013      	ands	r3, r2
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	429a      	cmp	r2, r3
 8004840:	d197      	bne.n	8004772 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3720      	adds	r7, #32
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	20000004 	.word	0x20000004

08004850 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af02      	add	r7, sp, #8
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	2200      	movs	r2, #0
 8004864:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f7ff ff63 	bl	8004734 <SPI_WaitFifoStateUntilTimeout>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d007      	beq.n	8004884 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004878:	f043 0220 	orr.w	r2, r3, #32
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e027      	b.n	80048d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2200      	movs	r2, #0
 800488c:	2180      	movs	r1, #128	; 0x80
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f7ff fec8 	bl	8004624 <SPI_WaitFlagStateUntilTimeout>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d007      	beq.n	80048aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800489e:	f043 0220 	orr.w	r2, r3, #32
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e014      	b.n	80048d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f7ff ff3c 	bl	8004734 <SPI_WaitFifoStateUntilTimeout>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d007      	beq.n	80048d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048c6:	f043 0220 	orr.w	r2, r3, #32
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e000      	b.n	80048d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e040      	b.n	8004970 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d106      	bne.n	8004904 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f83a 	bl	8004978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2224      	movs	r2, #36	; 0x24
 8004908:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0201 	bic.w	r2, r2, #1
 8004918:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f8ca 	bl	8004ab4 <UART_SetConfig>
 8004920:	4603      	mov	r3, r0
 8004922:	2b01      	cmp	r3, #1
 8004924:	d101      	bne.n	800492a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e022      	b.n	8004970 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 fb48 	bl	8004fc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004946:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689a      	ldr	r2, [r3, #8]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004956:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 0201 	orr.w	r2, r2, #1
 8004966:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 fbcf 	bl	800510c <UART_CheckIdleState>
 800496e:	4603      	mov	r3, r0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08a      	sub	sp, #40	; 0x28
 8004990:	af02      	add	r7, sp, #8
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	603b      	str	r3, [r7, #0]
 8004998:	4613      	mov	r3, r2
 800499a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a0:	2b20      	cmp	r3, #32
 80049a2:	f040 8081 	bne.w	8004aa8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <HAL_UART_Transmit+0x26>
 80049ac:	88fb      	ldrh	r3, [r7, #6]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e079      	b.n	8004aaa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d101      	bne.n	80049c4 <HAL_UART_Transmit+0x38>
 80049c0:	2302      	movs	r3, #2
 80049c2:	e072      	b.n	8004aaa <HAL_UART_Transmit+0x11e>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2221      	movs	r2, #33	; 0x21
 80049d6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80049d8:	f7fd fbd4 	bl	8002184 <HAL_GetTick>
 80049dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	88fa      	ldrh	r2, [r7, #6]
 80049e2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	88fa      	ldrh	r2, [r7, #6]
 80049ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f6:	d108      	bne.n	8004a0a <HAL_UART_Transmit+0x7e>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d104      	bne.n	8004a0a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004a00:	2300      	movs	r3, #0
 8004a02:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	61bb      	str	r3, [r7, #24]
 8004a08:	e003      	b.n	8004a12 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004a1a:	e02d      	b.n	8004a78 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	2200      	movs	r2, #0
 8004a24:	2180      	movs	r1, #128	; 0x80
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 fbb5 	bl	8005196 <UART_WaitOnFlagUntilTimeout>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e039      	b.n	8004aaa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10b      	bne.n	8004a54 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	881a      	ldrh	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a48:	b292      	uxth	r2, r2
 8004a4a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	3302      	adds	r3, #2
 8004a50:	61bb      	str	r3, [r7, #24]
 8004a52:	e008      	b.n	8004a66 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	781a      	ldrb	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	b292      	uxth	r2, r2
 8004a5e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	3301      	adds	r3, #1
 8004a64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1cb      	bne.n	8004a1c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	2140      	movs	r1, #64	; 0x40
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 fb81 	bl	8005196 <UART_WaitOnFlagUntilTimeout>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e005      	b.n	8004aaa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	e000      	b.n	8004aaa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004aa8:	2302      	movs	r3, #2
  }
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3720      	adds	r7, #32
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
	...

08004ab4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ab4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004ab8:	b088      	sub	sp, #32
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689a      	ldr	r2, [r3, #8]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	431a      	orrs	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	4bac      	ldr	r3, [pc, #688]	; (8004d94 <UART_SetConfig+0x2e0>)
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6812      	ldr	r2, [r2, #0]
 8004ae8:	69f9      	ldr	r1, [r7, #28]
 8004aea:	430b      	orrs	r3, r1
 8004aec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4aa2      	ldr	r2, [pc, #648]	; (8004d98 <UART_SetConfig+0x2e4>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d004      	beq.n	8004b1e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	69fa      	ldr	r2, [r7, #28]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	69fa      	ldr	r2, [r7, #28]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a99      	ldr	r2, [pc, #612]	; (8004d9c <UART_SetConfig+0x2e8>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d121      	bne.n	8004b80 <UART_SetConfig+0xcc>
 8004b3c:	4b98      	ldr	r3, [pc, #608]	; (8004da0 <UART_SetConfig+0x2ec>)
 8004b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b42:	f003 0303 	and.w	r3, r3, #3
 8004b46:	2b03      	cmp	r3, #3
 8004b48:	d816      	bhi.n	8004b78 <UART_SetConfig+0xc4>
 8004b4a:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <UART_SetConfig+0x9c>)
 8004b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b50:	08004b61 	.word	0x08004b61
 8004b54:	08004b6d 	.word	0x08004b6d
 8004b58:	08004b67 	.word	0x08004b67
 8004b5c:	08004b73 	.word	0x08004b73
 8004b60:	2301      	movs	r3, #1
 8004b62:	76fb      	strb	r3, [r7, #27]
 8004b64:	e0e8      	b.n	8004d38 <UART_SetConfig+0x284>
 8004b66:	2302      	movs	r3, #2
 8004b68:	76fb      	strb	r3, [r7, #27]
 8004b6a:	e0e5      	b.n	8004d38 <UART_SetConfig+0x284>
 8004b6c:	2304      	movs	r3, #4
 8004b6e:	76fb      	strb	r3, [r7, #27]
 8004b70:	e0e2      	b.n	8004d38 <UART_SetConfig+0x284>
 8004b72:	2308      	movs	r3, #8
 8004b74:	76fb      	strb	r3, [r7, #27]
 8004b76:	e0df      	b.n	8004d38 <UART_SetConfig+0x284>
 8004b78:	2310      	movs	r3, #16
 8004b7a:	76fb      	strb	r3, [r7, #27]
 8004b7c:	bf00      	nop
 8004b7e:	e0db      	b.n	8004d38 <UART_SetConfig+0x284>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a87      	ldr	r2, [pc, #540]	; (8004da4 <UART_SetConfig+0x2f0>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d134      	bne.n	8004bf4 <UART_SetConfig+0x140>
 8004b8a:	4b85      	ldr	r3, [pc, #532]	; (8004da0 <UART_SetConfig+0x2ec>)
 8004b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b90:	f003 030c 	and.w	r3, r3, #12
 8004b94:	2b0c      	cmp	r3, #12
 8004b96:	d829      	bhi.n	8004bec <UART_SetConfig+0x138>
 8004b98:	a201      	add	r2, pc, #4	; (adr r2, 8004ba0 <UART_SetConfig+0xec>)
 8004b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9e:	bf00      	nop
 8004ba0:	08004bd5 	.word	0x08004bd5
 8004ba4:	08004bed 	.word	0x08004bed
 8004ba8:	08004bed 	.word	0x08004bed
 8004bac:	08004bed 	.word	0x08004bed
 8004bb0:	08004be1 	.word	0x08004be1
 8004bb4:	08004bed 	.word	0x08004bed
 8004bb8:	08004bed 	.word	0x08004bed
 8004bbc:	08004bed 	.word	0x08004bed
 8004bc0:	08004bdb 	.word	0x08004bdb
 8004bc4:	08004bed 	.word	0x08004bed
 8004bc8:	08004bed 	.word	0x08004bed
 8004bcc:	08004bed 	.word	0x08004bed
 8004bd0:	08004be7 	.word	0x08004be7
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	76fb      	strb	r3, [r7, #27]
 8004bd8:	e0ae      	b.n	8004d38 <UART_SetConfig+0x284>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	76fb      	strb	r3, [r7, #27]
 8004bde:	e0ab      	b.n	8004d38 <UART_SetConfig+0x284>
 8004be0:	2304      	movs	r3, #4
 8004be2:	76fb      	strb	r3, [r7, #27]
 8004be4:	e0a8      	b.n	8004d38 <UART_SetConfig+0x284>
 8004be6:	2308      	movs	r3, #8
 8004be8:	76fb      	strb	r3, [r7, #27]
 8004bea:	e0a5      	b.n	8004d38 <UART_SetConfig+0x284>
 8004bec:	2310      	movs	r3, #16
 8004bee:	76fb      	strb	r3, [r7, #27]
 8004bf0:	bf00      	nop
 8004bf2:	e0a1      	b.n	8004d38 <UART_SetConfig+0x284>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a6b      	ldr	r2, [pc, #428]	; (8004da8 <UART_SetConfig+0x2f4>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d120      	bne.n	8004c40 <UART_SetConfig+0x18c>
 8004bfe:	4b68      	ldr	r3, [pc, #416]	; (8004da0 <UART_SetConfig+0x2ec>)
 8004c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c08:	2b10      	cmp	r3, #16
 8004c0a:	d00f      	beq.n	8004c2c <UART_SetConfig+0x178>
 8004c0c:	2b10      	cmp	r3, #16
 8004c0e:	d802      	bhi.n	8004c16 <UART_SetConfig+0x162>
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <UART_SetConfig+0x16c>
 8004c14:	e010      	b.n	8004c38 <UART_SetConfig+0x184>
 8004c16:	2b20      	cmp	r3, #32
 8004c18:	d005      	beq.n	8004c26 <UART_SetConfig+0x172>
 8004c1a:	2b30      	cmp	r3, #48	; 0x30
 8004c1c:	d009      	beq.n	8004c32 <UART_SetConfig+0x17e>
 8004c1e:	e00b      	b.n	8004c38 <UART_SetConfig+0x184>
 8004c20:	2300      	movs	r3, #0
 8004c22:	76fb      	strb	r3, [r7, #27]
 8004c24:	e088      	b.n	8004d38 <UART_SetConfig+0x284>
 8004c26:	2302      	movs	r3, #2
 8004c28:	76fb      	strb	r3, [r7, #27]
 8004c2a:	e085      	b.n	8004d38 <UART_SetConfig+0x284>
 8004c2c:	2304      	movs	r3, #4
 8004c2e:	76fb      	strb	r3, [r7, #27]
 8004c30:	e082      	b.n	8004d38 <UART_SetConfig+0x284>
 8004c32:	2308      	movs	r3, #8
 8004c34:	76fb      	strb	r3, [r7, #27]
 8004c36:	e07f      	b.n	8004d38 <UART_SetConfig+0x284>
 8004c38:	2310      	movs	r3, #16
 8004c3a:	76fb      	strb	r3, [r7, #27]
 8004c3c:	bf00      	nop
 8004c3e:	e07b      	b.n	8004d38 <UART_SetConfig+0x284>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a59      	ldr	r2, [pc, #356]	; (8004dac <UART_SetConfig+0x2f8>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d120      	bne.n	8004c8c <UART_SetConfig+0x1d8>
 8004c4a:	4b55      	ldr	r3, [pc, #340]	; (8004da0 <UART_SetConfig+0x2ec>)
 8004c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c50:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c54:	2b40      	cmp	r3, #64	; 0x40
 8004c56:	d00f      	beq.n	8004c78 <UART_SetConfig+0x1c4>
 8004c58:	2b40      	cmp	r3, #64	; 0x40
 8004c5a:	d802      	bhi.n	8004c62 <UART_SetConfig+0x1ae>
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d005      	beq.n	8004c6c <UART_SetConfig+0x1b8>
 8004c60:	e010      	b.n	8004c84 <UART_SetConfig+0x1d0>
 8004c62:	2b80      	cmp	r3, #128	; 0x80
 8004c64:	d005      	beq.n	8004c72 <UART_SetConfig+0x1be>
 8004c66:	2bc0      	cmp	r3, #192	; 0xc0
 8004c68:	d009      	beq.n	8004c7e <UART_SetConfig+0x1ca>
 8004c6a:	e00b      	b.n	8004c84 <UART_SetConfig+0x1d0>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	76fb      	strb	r3, [r7, #27]
 8004c70:	e062      	b.n	8004d38 <UART_SetConfig+0x284>
 8004c72:	2302      	movs	r3, #2
 8004c74:	76fb      	strb	r3, [r7, #27]
 8004c76:	e05f      	b.n	8004d38 <UART_SetConfig+0x284>
 8004c78:	2304      	movs	r3, #4
 8004c7a:	76fb      	strb	r3, [r7, #27]
 8004c7c:	e05c      	b.n	8004d38 <UART_SetConfig+0x284>
 8004c7e:	2308      	movs	r3, #8
 8004c80:	76fb      	strb	r3, [r7, #27]
 8004c82:	e059      	b.n	8004d38 <UART_SetConfig+0x284>
 8004c84:	2310      	movs	r3, #16
 8004c86:	76fb      	strb	r3, [r7, #27]
 8004c88:	bf00      	nop
 8004c8a:	e055      	b.n	8004d38 <UART_SetConfig+0x284>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a47      	ldr	r2, [pc, #284]	; (8004db0 <UART_SetConfig+0x2fc>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d124      	bne.n	8004ce0 <UART_SetConfig+0x22c>
 8004c96:	4b42      	ldr	r3, [pc, #264]	; (8004da0 <UART_SetConfig+0x2ec>)
 8004c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ca4:	d012      	beq.n	8004ccc <UART_SetConfig+0x218>
 8004ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004caa:	d802      	bhi.n	8004cb2 <UART_SetConfig+0x1fe>
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d007      	beq.n	8004cc0 <UART_SetConfig+0x20c>
 8004cb0:	e012      	b.n	8004cd8 <UART_SetConfig+0x224>
 8004cb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cb6:	d006      	beq.n	8004cc6 <UART_SetConfig+0x212>
 8004cb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cbc:	d009      	beq.n	8004cd2 <UART_SetConfig+0x21e>
 8004cbe:	e00b      	b.n	8004cd8 <UART_SetConfig+0x224>
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	76fb      	strb	r3, [r7, #27]
 8004cc4:	e038      	b.n	8004d38 <UART_SetConfig+0x284>
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	76fb      	strb	r3, [r7, #27]
 8004cca:	e035      	b.n	8004d38 <UART_SetConfig+0x284>
 8004ccc:	2304      	movs	r3, #4
 8004cce:	76fb      	strb	r3, [r7, #27]
 8004cd0:	e032      	b.n	8004d38 <UART_SetConfig+0x284>
 8004cd2:	2308      	movs	r3, #8
 8004cd4:	76fb      	strb	r3, [r7, #27]
 8004cd6:	e02f      	b.n	8004d38 <UART_SetConfig+0x284>
 8004cd8:	2310      	movs	r3, #16
 8004cda:	76fb      	strb	r3, [r7, #27]
 8004cdc:	bf00      	nop
 8004cde:	e02b      	b.n	8004d38 <UART_SetConfig+0x284>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a2c      	ldr	r2, [pc, #176]	; (8004d98 <UART_SetConfig+0x2e4>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d124      	bne.n	8004d34 <UART_SetConfig+0x280>
 8004cea:	4b2d      	ldr	r3, [pc, #180]	; (8004da0 <UART_SetConfig+0x2ec>)
 8004cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf8:	d012      	beq.n	8004d20 <UART_SetConfig+0x26c>
 8004cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cfe:	d802      	bhi.n	8004d06 <UART_SetConfig+0x252>
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d007      	beq.n	8004d14 <UART_SetConfig+0x260>
 8004d04:	e012      	b.n	8004d2c <UART_SetConfig+0x278>
 8004d06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d0a:	d006      	beq.n	8004d1a <UART_SetConfig+0x266>
 8004d0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d10:	d009      	beq.n	8004d26 <UART_SetConfig+0x272>
 8004d12:	e00b      	b.n	8004d2c <UART_SetConfig+0x278>
 8004d14:	2300      	movs	r3, #0
 8004d16:	76fb      	strb	r3, [r7, #27]
 8004d18:	e00e      	b.n	8004d38 <UART_SetConfig+0x284>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	76fb      	strb	r3, [r7, #27]
 8004d1e:	e00b      	b.n	8004d38 <UART_SetConfig+0x284>
 8004d20:	2304      	movs	r3, #4
 8004d22:	76fb      	strb	r3, [r7, #27]
 8004d24:	e008      	b.n	8004d38 <UART_SetConfig+0x284>
 8004d26:	2308      	movs	r3, #8
 8004d28:	76fb      	strb	r3, [r7, #27]
 8004d2a:	e005      	b.n	8004d38 <UART_SetConfig+0x284>
 8004d2c:	2310      	movs	r3, #16
 8004d2e:	76fb      	strb	r3, [r7, #27]
 8004d30:	bf00      	nop
 8004d32:	e001      	b.n	8004d38 <UART_SetConfig+0x284>
 8004d34:	2310      	movs	r3, #16
 8004d36:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a16      	ldr	r2, [pc, #88]	; (8004d98 <UART_SetConfig+0x2e4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	f040 8087 	bne.w	8004e52 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d44:	7efb      	ldrb	r3, [r7, #27]
 8004d46:	2b08      	cmp	r3, #8
 8004d48:	d836      	bhi.n	8004db8 <UART_SetConfig+0x304>
 8004d4a:	a201      	add	r2, pc, #4	; (adr r2, 8004d50 <UART_SetConfig+0x29c>)
 8004d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d50:	08004d75 	.word	0x08004d75
 8004d54:	08004db9 	.word	0x08004db9
 8004d58:	08004d7d 	.word	0x08004d7d
 8004d5c:	08004db9 	.word	0x08004db9
 8004d60:	08004d83 	.word	0x08004d83
 8004d64:	08004db9 	.word	0x08004db9
 8004d68:	08004db9 	.word	0x08004db9
 8004d6c:	08004db9 	.word	0x08004db9
 8004d70:	08004d8b 	.word	0x08004d8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d74:	f7fe fc4c 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 8004d78:	6178      	str	r0, [r7, #20]
        break;
 8004d7a:	e022      	b.n	8004dc2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d7c:	4b0d      	ldr	r3, [pc, #52]	; (8004db4 <UART_SetConfig+0x300>)
 8004d7e:	617b      	str	r3, [r7, #20]
        break;
 8004d80:	e01f      	b.n	8004dc2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d82:	f7fe fbaf 	bl	80034e4 <HAL_RCC_GetSysClockFreq>
 8004d86:	6178      	str	r0, [r7, #20]
        break;
 8004d88:	e01b      	b.n	8004dc2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d8e:	617b      	str	r3, [r7, #20]
        break;
 8004d90:	e017      	b.n	8004dc2 <UART_SetConfig+0x30e>
 8004d92:	bf00      	nop
 8004d94:	efff69f3 	.word	0xefff69f3
 8004d98:	40008000 	.word	0x40008000
 8004d9c:	40013800 	.word	0x40013800
 8004da0:	40021000 	.word	0x40021000
 8004da4:	40004400 	.word	0x40004400
 8004da8:	40004800 	.word	0x40004800
 8004dac:	40004c00 	.word	0x40004c00
 8004db0:	40005000 	.word	0x40005000
 8004db4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	76bb      	strb	r3, [r7, #26]
        break;
 8004dc0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 80f1 	beq.w	8004fac <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	4413      	add	r3, r2
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d305      	bcc.n	8004de6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d902      	bls.n	8004dec <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	76bb      	strb	r3, [r7, #26]
 8004dea:	e0df      	b.n	8004fac <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	4619      	mov	r1, r3
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	f04f 0300 	mov.w	r3, #0
 8004df8:	f04f 0400 	mov.w	r4, #0
 8004dfc:	0214      	lsls	r4, r2, #8
 8004dfe:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004e02:	020b      	lsls	r3, r1, #8
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6852      	ldr	r2, [r2, #4]
 8004e08:	0852      	lsrs	r2, r2, #1
 8004e0a:	4611      	mov	r1, r2
 8004e0c:	f04f 0200 	mov.w	r2, #0
 8004e10:	eb13 0b01 	adds.w	fp, r3, r1
 8004e14:	eb44 0c02 	adc.w	ip, r4, r2
 8004e18:	4658      	mov	r0, fp
 8004e1a:	4661      	mov	r1, ip
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f04f 0400 	mov.w	r4, #0
 8004e24:	461a      	mov	r2, r3
 8004e26:	4623      	mov	r3, r4
 8004e28:	f7fb fa2a 	bl	8000280 <__aeabi_uldivmod>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	460c      	mov	r4, r1
 8004e30:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e38:	d308      	bcc.n	8004e4c <UART_SetConfig+0x398>
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e40:	d204      	bcs.n	8004e4c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	60da      	str	r2, [r3, #12]
 8004e4a:	e0af      	b.n	8004fac <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	76bb      	strb	r3, [r7, #26]
 8004e50:	e0ac      	b.n	8004fac <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e5a:	d15b      	bne.n	8004f14 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004e5c:	7efb      	ldrb	r3, [r7, #27]
 8004e5e:	2b08      	cmp	r3, #8
 8004e60:	d827      	bhi.n	8004eb2 <UART_SetConfig+0x3fe>
 8004e62:	a201      	add	r2, pc, #4	; (adr r2, 8004e68 <UART_SetConfig+0x3b4>)
 8004e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e68:	08004e8d 	.word	0x08004e8d
 8004e6c:	08004e95 	.word	0x08004e95
 8004e70:	08004e9d 	.word	0x08004e9d
 8004e74:	08004eb3 	.word	0x08004eb3
 8004e78:	08004ea3 	.word	0x08004ea3
 8004e7c:	08004eb3 	.word	0x08004eb3
 8004e80:	08004eb3 	.word	0x08004eb3
 8004e84:	08004eb3 	.word	0x08004eb3
 8004e88:	08004eab 	.word	0x08004eab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e8c:	f7fe fbc0 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 8004e90:	6178      	str	r0, [r7, #20]
        break;
 8004e92:	e013      	b.n	8004ebc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e94:	f7fe fbd2 	bl	800363c <HAL_RCC_GetPCLK2Freq>
 8004e98:	6178      	str	r0, [r7, #20]
        break;
 8004e9a:	e00f      	b.n	8004ebc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e9c:	4b49      	ldr	r3, [pc, #292]	; (8004fc4 <UART_SetConfig+0x510>)
 8004e9e:	617b      	str	r3, [r7, #20]
        break;
 8004ea0:	e00c      	b.n	8004ebc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ea2:	f7fe fb1f 	bl	80034e4 <HAL_RCC_GetSysClockFreq>
 8004ea6:	6178      	str	r0, [r7, #20]
        break;
 8004ea8:	e008      	b.n	8004ebc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eae:	617b      	str	r3, [r7, #20]
        break;
 8004eb0:	e004      	b.n	8004ebc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	76bb      	strb	r3, [r7, #26]
        break;
 8004eba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d074      	beq.n	8004fac <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	005a      	lsls	r2, r3, #1
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	085b      	lsrs	r3, r3, #1
 8004ecc:	441a      	add	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	2b0f      	cmp	r3, #15
 8004ede:	d916      	bls.n	8004f0e <UART_SetConfig+0x45a>
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee6:	d212      	bcs.n	8004f0e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	f023 030f 	bic.w	r3, r3, #15
 8004ef0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	085b      	lsrs	r3, r3, #1
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	f003 0307 	and.w	r3, r3, #7
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	89fb      	ldrh	r3, [r7, #14]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	89fa      	ldrh	r2, [r7, #14]
 8004f0a:	60da      	str	r2, [r3, #12]
 8004f0c:	e04e      	b.n	8004fac <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	76bb      	strb	r3, [r7, #26]
 8004f12:	e04b      	b.n	8004fac <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f14:	7efb      	ldrb	r3, [r7, #27]
 8004f16:	2b08      	cmp	r3, #8
 8004f18:	d827      	bhi.n	8004f6a <UART_SetConfig+0x4b6>
 8004f1a:	a201      	add	r2, pc, #4	; (adr r2, 8004f20 <UART_SetConfig+0x46c>)
 8004f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f20:	08004f45 	.word	0x08004f45
 8004f24:	08004f4d 	.word	0x08004f4d
 8004f28:	08004f55 	.word	0x08004f55
 8004f2c:	08004f6b 	.word	0x08004f6b
 8004f30:	08004f5b 	.word	0x08004f5b
 8004f34:	08004f6b 	.word	0x08004f6b
 8004f38:	08004f6b 	.word	0x08004f6b
 8004f3c:	08004f6b 	.word	0x08004f6b
 8004f40:	08004f63 	.word	0x08004f63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f44:	f7fe fb64 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 8004f48:	6178      	str	r0, [r7, #20]
        break;
 8004f4a:	e013      	b.n	8004f74 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f4c:	f7fe fb76 	bl	800363c <HAL_RCC_GetPCLK2Freq>
 8004f50:	6178      	str	r0, [r7, #20]
        break;
 8004f52:	e00f      	b.n	8004f74 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f54:	4b1b      	ldr	r3, [pc, #108]	; (8004fc4 <UART_SetConfig+0x510>)
 8004f56:	617b      	str	r3, [r7, #20]
        break;
 8004f58:	e00c      	b.n	8004f74 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f5a:	f7fe fac3 	bl	80034e4 <HAL_RCC_GetSysClockFreq>
 8004f5e:	6178      	str	r0, [r7, #20]
        break;
 8004f60:	e008      	b.n	8004f74 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f66:	617b      	str	r3, [r7, #20]
        break;
 8004f68:	e004      	b.n	8004f74 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	76bb      	strb	r3, [r7, #26]
        break;
 8004f72:	bf00      	nop
    }

    if (pclk != 0U)
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d018      	beq.n	8004fac <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	085a      	lsrs	r2, r3, #1
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	441a      	add	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	2b0f      	cmp	r3, #15
 8004f94:	d908      	bls.n	8004fa8 <UART_SetConfig+0x4f4>
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f9c:	d204      	bcs.n	8004fa8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	60da      	str	r2, [r3, #12]
 8004fa6:	e001      	b.n	8004fac <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004fb8:	7ebb      	ldrb	r3, [r7, #26]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3720      	adds	r7, #32
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004fc4:	00f42400 	.word	0x00f42400

08004fc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00a      	beq.n	8004ff2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00a      	beq.n	8005036 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00a      	beq.n	8005058 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	430a      	orrs	r2, r1
 8005056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505c:	f003 0310 	and.w	r3, r3, #16
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00a      	beq.n	800507a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	430a      	orrs	r2, r1
 8005078:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	f003 0320 	and.w	r3, r3, #32
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00a      	beq.n	800509c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	430a      	orrs	r2, r1
 800509a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01a      	beq.n	80050de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050c6:	d10a      	bne.n	80050de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	605a      	str	r2, [r3, #4]
  }
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af02      	add	r7, sp, #8
 8005112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800511a:	f7fd f833 	bl	8002184 <HAL_GetTick>
 800511e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0308 	and.w	r3, r3, #8
 800512a:	2b08      	cmp	r3, #8
 800512c:	d10e      	bne.n	800514c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800512e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f82a 	bl	8005196 <UART_WaitOnFlagUntilTimeout>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e020      	b.n	800518e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0304 	and.w	r3, r3, #4
 8005156:	2b04      	cmp	r3, #4
 8005158:	d10e      	bne.n	8005178 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800515a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f814 	bl	8005196 <UART_WaitOnFlagUntilTimeout>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e00a      	b.n	800518e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2220      	movs	r2, #32
 800517c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2220      	movs	r2, #32
 8005182:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b084      	sub	sp, #16
 800519a:	af00      	add	r7, sp, #0
 800519c:	60f8      	str	r0, [r7, #12]
 800519e:	60b9      	str	r1, [r7, #8]
 80051a0:	603b      	str	r3, [r7, #0]
 80051a2:	4613      	mov	r3, r2
 80051a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051a6:	e05d      	b.n	8005264 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ae:	d059      	beq.n	8005264 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051b0:	f7fc ffe8 	bl	8002184 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d302      	bcc.n	80051c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d11b      	bne.n	80051fe <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80051d4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689a      	ldr	r2, [r3, #8]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 0201 	bic.w	r2, r2, #1
 80051e4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2220      	movs	r2, #32
 80051ea:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2220      	movs	r2, #32
 80051f0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e042      	b.n	8005284 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b00      	cmp	r3, #0
 800520a:	d02b      	beq.n	8005264 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005216:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800521a:	d123      	bne.n	8005264 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005224:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005234:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0201 	bic.w	r2, r2, #1
 8005244:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2220      	movs	r2, #32
 800524a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2220      	movs	r2, #32
 8005250:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2220      	movs	r2, #32
 8005256:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e00f      	b.n	8005284 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	69da      	ldr	r2, [r3, #28]
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	4013      	ands	r3, r2
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	429a      	cmp	r2, r3
 8005272:	bf0c      	ite	eq
 8005274:	2301      	moveq	r3, #1
 8005276:	2300      	movne	r3, #0
 8005278:	b2db      	uxtb	r3, r3
 800527a:	461a      	mov	r2, r3
 800527c:	79fb      	ldrb	r3, [r7, #7]
 800527e:	429a      	cmp	r2, r3
 8005280:	d092      	beq.n	80051a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b08c      	sub	sp, #48	; 0x30
 8005290:	af00      	add	r7, sp, #0
 8005292:	603b      	str	r3, [r7, #0]
 8005294:	4603      	mov	r3, r0
 8005296:	71fb      	strb	r3, [r7, #7]
 8005298:	460b      	mov	r3, r1
 800529a:	71bb      	strb	r3, [r7, #6]
 800529c:	4613      	mov	r3, r2
 800529e:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 80052a0:	79fb      	ldrb	r3, [r7, #7]
 80052a2:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 80052a4:	79bb      	ldrb	r3, [r7, #6]
 80052a6:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 80052a8:	797b      	ldrb	r3, [r7, #5]
 80052aa:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80052ac:	f107 030c 	add.w	r3, r7, #12
 80052b0:	2207      	movs	r2, #7
 80052b2:	2100      	movs	r1, #0
 80052b4:	4618      	mov	r0, r3
 80052b6:	f001 fc88 	bl	8006bca <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80052ba:	f107 0318 	add.w	r3, r7, #24
 80052be:	2218      	movs	r2, #24
 80052c0:	2100      	movs	r1, #0
 80052c2:	4618      	mov	r0, r3
 80052c4:	f001 fc81 	bl	8006bca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80052c8:	233f      	movs	r3, #63	; 0x3f
 80052ca:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 80052cc:	238a      	movs	r3, #138	; 0x8a
 80052ce:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 80052d0:	f107 0314 	add.w	r3, r7, #20
 80052d4:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 80052d6:	2303      	movs	r3, #3
 80052d8:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 80052da:	f107 030c 	add.w	r3, r7, #12
 80052de:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 80052e0:	2307      	movs	r3, #7
 80052e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 80052e4:	f107 0318 	add.w	r3, r7, #24
 80052e8:	2100      	movs	r1, #0
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 ffec 	bl	80062c8 <hci_send_req>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	da01      	bge.n	80052fa <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 80052f6:	23ff      	movs	r3, #255	; 0xff
 80052f8:	e014      	b.n	8005324 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 80052fa:	7b3b      	ldrb	r3, [r7, #12]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d001      	beq.n	8005304 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8005300:	7b3b      	ldrb	r3, [r7, #12]
 8005302:	e00f      	b.n	8005324 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8005304:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8005308:	b29a      	uxth	r2, r3
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800530e:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8005312:	b29a      	uxth	r2, r3
 8005314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005316:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8005318:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 800531c:	b29a      	uxth	r2, r3
 800531e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005320:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3730      	adds	r7, #48	; 0x30
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b08e      	sub	sp, #56	; 0x38
 8005330:	af00      	add	r7, sp, #0
 8005332:	60b9      	str	r1, [r7, #8]
 8005334:	607a      	str	r2, [r7, #4]
 8005336:	603b      	str	r3, [r7, #0]
 8005338:	4603      	mov	r3, r0
 800533a:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 800533c:	7bfb      	ldrb	r3, [r7, #15]
 800533e:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005340:	f107 0314 	add.w	r3, r7, #20
 8005344:	2207      	movs	r2, #7
 8005346:	2100      	movs	r1, #0
 8005348:	4618      	mov	r0, r3
 800534a:	f001 fc3e 	bl	8006bca <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800534e:	f107 0320 	add.w	r3, r7, #32
 8005352:	2218      	movs	r2, #24
 8005354:	2100      	movs	r1, #0
 8005356:	4618      	mov	r0, r3
 8005358:	f001 fc37 	bl	8006bca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800535c:	233f      	movs	r3, #63	; 0x3f
 800535e:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 8005360:	238a      	movs	r3, #138	; 0x8a
 8005362:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = &cp;
 8005364:	f107 031c 	add.w	r3, r7, #28
 8005368:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = sizeof(cp);
 800536a:	2301      	movs	r3, #1
 800536c:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 800536e:	f107 0314 	add.w	r3, r7, #20
 8005372:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 8005374:	2307      	movs	r3, #7
 8005376:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8005378:	f107 0320 	add.w	r3, r7, #32
 800537c:	2100      	movs	r1, #0
 800537e:	4618      	mov	r0, r3
 8005380:	f000 ffa2 	bl	80062c8 <hci_send_req>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	da01      	bge.n	800538e <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 800538a:	23ff      	movs	r3, #255	; 0xff
 800538c:	e014      	b.n	80053b8 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 800538e:	7d3b      	ldrb	r3, [r7, #20]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 8005394:	7d3b      	ldrb	r3, [r7, #20]
 8005396:	e00f      	b.n	80053b8 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 8005398:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 800539c:	b29a      	uxth	r2, r3
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80053a2:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 80053ac:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3738      	adds	r7, #56	; 0x38
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 80053c0:	b590      	push	{r4, r7, lr}
 80053c2:	b095      	sub	sp, #84	; 0x54
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	4604      	mov	r4, r0
 80053c8:	4608      	mov	r0, r1
 80053ca:	4611      	mov	r1, r2
 80053cc:	461a      	mov	r2, r3
 80053ce:	4623      	mov	r3, r4
 80053d0:	71fb      	strb	r3, [r7, #7]
 80053d2:	4603      	mov	r3, r0
 80053d4:	80bb      	strh	r3, [r7, #4]
 80053d6:	460b      	mov	r3, r1
 80053d8:	807b      	strh	r3, [r7, #2]
 80053da:	4613      	mov	r3, r2
 80053dc:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 80053de:	2300      	movs	r3, #0
 80053e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 80053e4:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80053e8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80053ec:	4413      	add	r3, r2
 80053ee:	330e      	adds	r3, #14
 80053f0:	2b28      	cmp	r3, #40	; 0x28
 80053f2:	d901      	bls.n	80053f8 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 80053f4:	2342      	movs	r3, #66	; 0x42
 80053f6:	e0ce      	b.n	8005596 <aci_gap_set_discoverable+0x1d6>

  buffer[indx] = AdvType;
 80053f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80053fc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005400:	4413      	add	r3, r2
 8005402:	79fa      	ldrb	r2, [r7, #7]
 8005404:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8005408:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800540c:	3301      	adds	r3, #1
 800540e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8005412:	88bb      	ldrh	r3, [r7, #4]
 8005414:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8005416:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800541a:	f107 0208 	add.w	r2, r7, #8
 800541e:	4413      	add	r3, r2
 8005420:	88ba      	ldrh	r2, [r7, #4]
 8005422:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8005424:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005428:	3302      	adds	r3, #2
 800542a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 800542e:	887b      	ldrh	r3, [r7, #2]
 8005430:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8005432:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005436:	f107 0208 	add.w	r2, r7, #8
 800543a:	4413      	add	r3, r2
 800543c:	887a      	ldrh	r2, [r7, #2]
 800543e:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8005440:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005444:	3302      	adds	r3, #2
 8005446:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 800544a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800544e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005452:	4413      	add	r3, r2
 8005454:	79ba      	ldrb	r2, [r7, #6]
 8005456:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800545a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800545e:	3301      	adds	r3, #1
 8005460:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8005464:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005468:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800546c:	4413      	add	r3, r2
 800546e:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8005472:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8005476:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800547a:	3301      	adds	r3, #1
 800547c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 8005480:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005484:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005488:	4413      	add	r3, r2
 800548a:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800548e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8005492:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005496:	3301      	adds	r3, #1
 8005498:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800549c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80054a0:	f107 0208 	add.w	r2, r7, #8
 80054a4:	4413      	add	r3, r2
 80054a6:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80054aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80054ac:	4618      	mov	r0, r3
 80054ae:	f001 fb81 	bl	8006bb4 <memcpy>
  indx +=  LocalNameLen;
 80054b2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80054b6:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80054ba:	4413      	add	r3, r2
 80054bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 80054c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80054c4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80054c8:	4413      	add	r3, r2
 80054ca:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 80054ce:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80054d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80054d6:	3301      	adds	r3, #1
 80054d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 80054dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80054e0:	f107 0208 	add.w	r2, r7, #8
 80054e4:	4413      	add	r3, r2
 80054e6:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 80054ea:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80054ec:	4618      	mov	r0, r3
 80054ee:	f001 fb61 	bl	8006bb4 <memcpy>
  indx +=  ServiceUUIDLen;  
 80054f2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80054f6:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80054fa:	4413      	add	r3, r2
 80054fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8005500:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8005504:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8005508:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800550c:	f107 0208 	add.w	r2, r7, #8
 8005510:	4413      	add	r3, r2
 8005512:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8005516:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8005518:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800551c:	3302      	adds	r3, #2
 800551e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8005522:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8005526:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 800552a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800552e:	f107 0208 	add.w	r2, r7, #8
 8005532:	4413      	add	r3, r2
 8005534:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8005538:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 800553a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800553e:	3302      	adds	r3, #2
 8005540:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005544:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005548:	2218      	movs	r2, #24
 800554a:	2100      	movs	r1, #0
 800554c:	4618      	mov	r0, r3
 800554e:	f001 fb3c 	bl	8006bca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005552:	233f      	movs	r3, #63	; 0x3f
 8005554:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8005556:	2383      	movs	r3, #131	; 0x83
 8005558:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 800555a:	f107 0308 	add.w	r3, r7, #8
 800555e:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 8005560:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005564:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 8005566:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800556a:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 800556c:	2301      	movs	r3, #1
 800556e:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8005570:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005574:	2100      	movs	r1, #0
 8005576:	4618      	mov	r0, r3
 8005578:	f000 fea6 	bl	80062c8 <hci_send_req>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	da01      	bge.n	8005586 <aci_gap_set_discoverable+0x1c6>
    return BLE_STATUS_TIMEOUT;
 8005582:	23ff      	movs	r3, #255	; 0xff
 8005584:	e007      	b.n	8005596 <aci_gap_set_discoverable+0x1d6>

  if (status) {
 8005586:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <aci_gap_set_discoverable+0x1d4>
    return status;
 800558e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005592:	e000      	b.n	8005596 <aci_gap_set_discoverable+0x1d6>
  }

  return 0;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3754      	adds	r7, #84	; 0x54
 800559a:	46bd      	mov	sp, r7
 800559c:	bd90      	pop	{r4, r7, pc}

0800559e <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 800559e:	b590      	push	{r4, r7, lr}
 80055a0:	b091      	sub	sp, #68	; 0x44
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	603a      	str	r2, [r7, #0]
 80055a6:	461a      	mov	r2, r3
 80055a8:	4603      	mov	r3, r0
 80055aa:	71fb      	strb	r3, [r7, #7]
 80055ac:	460b      	mov	r3, r1
 80055ae:	71bb      	strb	r3, [r7, #6]
 80055b0:	4613      	mov	r3, r2
 80055b2:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 80055b4:	79fb      	ldrb	r3, [r7, #7]
 80055b6:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 80055b8:	79bb      	ldrb	r3, [r7, #6]
 80055ba:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 80055bc:	79bb      	ldrb	r3, [r7, #6]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00a      	beq.n	80055d8 <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	f107 030e 	add.w	r3, r7, #14
 80055c8:	6814      	ldr	r4, [r2, #0]
 80055ca:	6850      	ldr	r0, [r2, #4]
 80055cc:	6891      	ldr	r1, [r2, #8]
 80055ce:	68d2      	ldr	r2, [r2, #12]
 80055d0:	601c      	str	r4, [r3, #0]
 80055d2:	6058      	str	r0, [r3, #4]
 80055d4:	6099      	str	r1, [r3, #8]
 80055d6:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 80055d8:	797b      	ldrb	r3, [r7, #5]
 80055da:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 80055dc:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80055e0:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 80055e2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80055e6:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 80055ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055ec:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 80055f0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80055f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80055f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055fc:	2218      	movs	r2, #24
 80055fe:	2100      	movs	r1, #0
 8005600:	4618      	mov	r0, r3
 8005602:	f001 fae2 	bl	8006bca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005606:	233f      	movs	r3, #63	; 0x3f
 8005608:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 800560a:	2386      	movs	r3, #134	; 0x86
 800560c:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 800560e:	f107 030c 	add.w	r3, r7, #12
 8005612:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 8005614:	231a      	movs	r3, #26
 8005616:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 8005618:	f107 030b 	add.w	r3, r7, #11
 800561c:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 800561e:	2301      	movs	r3, #1
 8005620:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 8005622:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005626:	2100      	movs	r1, #0
 8005628:	4618      	mov	r0, r3
 800562a:	f000 fe4d 	bl	80062c8 <hci_send_req>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	da01      	bge.n	8005638 <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 8005634:	23ff      	movs	r3, #255	; 0xff
 8005636:	e005      	b.n	8005644 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 8005638:	7afb      	ldrb	r3, [r7, #11]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <aci_gap_set_auth_requirement+0xa4>
    return status;
 800563e:	7afb      	ldrb	r3, [r7, #11]
 8005640:	e000      	b.n	8005644 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3744      	adds	r7, #68	; 0x44
 8005648:	46bd      	mov	sp, r7
 800564a:	bd90      	pop	{r4, r7, pc}

0800564c <aci_gap_create_connection>:
				     uint8_t peer_bdaddr_type, tBDAddr peer_bdaddr,	
				     uint8_t own_bdaddr_type, uint16_t conn_min_interval,	
				     uint16_t conn_max_interval, uint16_t conn_latency,	
				     uint16_t supervision_timeout, uint16_t min_conn_length, 
				     uint16_t max_conn_length)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b092      	sub	sp, #72	; 0x48
 8005650:	af00      	add	r7, sp, #0
 8005652:	607b      	str	r3, [r7, #4]
 8005654:	4603      	mov	r3, r0
 8005656:	81fb      	strh	r3, [r7, #14]
 8005658:	460b      	mov	r3, r1
 800565a:	81bb      	strh	r3, [r7, #12]
 800565c:	4613      	mov	r3, r2
 800565e:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  gap_create_connection_cp cp;
  uint8_t status;  

  cp.scanInterval = htobs(scanInterval);
 8005660:	89fb      	ldrh	r3, [r7, #14]
 8005662:	833b      	strh	r3, [r7, #24]
  cp.scanWindow = htobs(scanWindow);
 8005664:	89bb      	ldrh	r3, [r7, #12]
 8005666:	837b      	strh	r3, [r7, #26]
  cp.peer_bdaddr_type = peer_bdaddr_type;
 8005668:	7afb      	ldrb	r3, [r7, #11]
 800566a:	773b      	strb	r3, [r7, #28]
  BLUENRG_memcpy(cp.peer_bdaddr, peer_bdaddr, 6);
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	f107 031d 	add.w	r3, r7, #29
 8005672:	6811      	ldr	r1, [r2, #0]
 8005674:	6019      	str	r1, [r3, #0]
 8005676:	8892      	ldrh	r2, [r2, #4]
 8005678:	809a      	strh	r2, [r3, #4]
  cp.own_bdaddr_type = own_bdaddr_type;
 800567a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800567e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  cp.conn_min_interval = htobs(conn_min_interval);
 8005682:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005686:	84bb      	strh	r3, [r7, #36]	; 0x24
  cp.conn_max_interval = htobs(conn_max_interval);
 8005688:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800568c:	84fb      	strh	r3, [r7, #38]	; 0x26
  cp.conn_latency = htobs(conn_latency);
 800568e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005692:	853b      	strh	r3, [r7, #40]	; 0x28
  cp.supervision_timeout = htobs(supervision_timeout);
 8005694:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8005698:	857b      	strh	r3, [r7, #42]	; 0x2a
  cp.min_conn_length = htobs(min_conn_length);
 800569a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800569e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  cp.max_conn_length = htobs(max_conn_length);
 80056a0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80056a4:	85fb      	strh	r3, [r7, #46]	; 0x2e

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80056a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80056aa:	2218      	movs	r2, #24
 80056ac:	2100      	movs	r1, #0
 80056ae:	4618      	mov	r0, r3
 80056b0:	f001 fa8b 	bl	8006bca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80056b4:	233f      	movs	r3, #63	; 0x3f
 80056b6:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_GAP_CREATE_CONNECTION;
 80056b8:	239c      	movs	r3, #156	; 0x9c
 80056ba:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &cp;
 80056bc:	f107 0318 	add.w	r3, r7, #24
 80056c0:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = sizeof(cp);
 80056c2:	2318      	movs	r3, #24
 80056c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.event = EVT_CMD_STATUS;
 80056c6:	230f      	movs	r3, #15
 80056c8:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 80056ca:	f107 0317 	add.w	r3, r7, #23
 80056ce:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 80056d0:	2301      	movs	r3, #1
 80056d2:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 80056d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80056d8:	2100      	movs	r1, #0
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 fdf4 	bl	80062c8 <hci_send_req>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	da01      	bge.n	80056ea <aci_gap_create_connection+0x9e>
    return BLE_STATUS_TIMEOUT;
 80056e6:	23ff      	movs	r3, #255	; 0xff
 80056e8:	e000      	b.n	80056ec <aci_gap_create_connection+0xa0>

  return status;
 80056ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3748      	adds	r7, #72	; 0x48
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b088      	sub	sp, #32
 80056f8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80056fa:	f107 0308 	add.w	r3, r7, #8
 80056fe:	2218      	movs	r2, #24
 8005700:	2100      	movs	r1, #0
 8005702:	4618      	mov	r0, r3
 8005704:	f001 fa61 	bl	8006bca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005708:	233f      	movs	r3, #63	; 0x3f
 800570a:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 800570c:	f240 1301 	movw	r3, #257	; 0x101
 8005710:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005712:	1dfb      	adds	r3, r7, #7
 8005714:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005716:	2301      	movs	r3, #1
 8005718:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800571a:	f107 0308 	add.w	r3, r7, #8
 800571e:	2100      	movs	r1, #0
 8005720:	4618      	mov	r0, r3
 8005722:	f000 fdd1 	bl	80062c8 <hci_send_req>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	da01      	bge.n	8005730 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 800572c:	23ff      	movs	r3, #255	; 0xff
 800572e:	e000      	b.n	8005732 <aci_gatt_init+0x3e>

  return status;
 8005730:	79fb      	ldrb	r3, [r7, #7]
}
 8005732:	4618      	mov	r0, r3
 8005734:	3720      	adds	r7, #32
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b090      	sub	sp, #64	; 0x40
 800573e:	af00      	add	r7, sp, #0
 8005740:	6039      	str	r1, [r7, #0]
 8005742:	4611      	mov	r1, r2
 8005744:	461a      	mov	r2, r3
 8005746:	4603      	mov	r3, r0
 8005748:	71fb      	strb	r3, [r7, #7]
 800574a:	460b      	mov	r3, r1
 800574c:	71bb      	strb	r3, [r7, #6]
 800574e:	4613      	mov	r3, r2
 8005750:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8005752:	2300      	movs	r3, #0
 8005754:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 8005758:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800575c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005760:	4413      	add	r3, r2
 8005762:	79fa      	ldrb	r2, [r7, #7]
 8005764:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8005768:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800576c:	3301      	adds	r3, #1
 800576e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 8005772:	79fb      	ldrb	r3, [r7, #7]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d103      	bne.n	8005780 <aci_gatt_add_serv+0x46>
    uuid_len = 2;
 8005778:	2302      	movs	r3, #2
 800577a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800577e:	e002      	b.n	8005786 <aci_gatt_add_serv+0x4c>
  }
  else {
    uuid_len = 16;
 8005780:	2310      	movs	r3, #16
 8005782:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8005786:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800578a:	f107 020c 	add.w	r2, r7, #12
 800578e:	4413      	add	r3, r2
 8005790:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005794:	6839      	ldr	r1, [r7, #0]
 8005796:	4618      	mov	r0, r3
 8005798:	f001 fa0c 	bl	8006bb4 <memcpy>
  indx +=  uuid_len;
 800579c:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80057a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80057a4:	4413      	add	r3, r2
 80057a6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 80057aa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80057ae:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80057b2:	4413      	add	r3, r2
 80057b4:	79ba      	ldrb	r2, [r7, #6]
 80057b6:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80057ba:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80057be:	3301      	adds	r3, #1
 80057c0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 80057c4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80057c8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80057cc:	4413      	add	r3, r2
 80057ce:	797a      	ldrb	r2, [r7, #5]
 80057d0:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80057d4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80057d8:	3301      	adds	r3, #1
 80057da:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80057de:	f107 0320 	add.w	r3, r7, #32
 80057e2:	2203      	movs	r2, #3
 80057e4:	2100      	movs	r1, #0
 80057e6:	4618      	mov	r0, r3
 80057e8:	f001 f9ef 	bl	8006bca <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80057ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057f0:	2218      	movs	r2, #24
 80057f2:	2100      	movs	r1, #0
 80057f4:	4618      	mov	r0, r3
 80057f6:	f001 f9e8 	bl	8006bca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80057fa:	233f      	movs	r3, #63	; 0x3f
 80057fc:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 80057fe:	f44f 7381 	mov.w	r3, #258	; 0x102
 8005802:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 8005804:	f107 030c 	add.w	r3, r7, #12
 8005808:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 800580a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800580e:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 8005810:	f107 0320 	add.w	r3, r7, #32
 8005814:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8005816:	2303      	movs	r3, #3
 8005818:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 800581a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800581e:	2100      	movs	r1, #0
 8005820:	4618      	mov	r0, r3
 8005822:	f000 fd51 	bl	80062c8 <hci_send_req>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	da01      	bge.n	8005830 <aci_gatt_add_serv+0xf6>
    return BLE_STATUS_TIMEOUT;
 800582c:	23ff      	movs	r3, #255	; 0xff
 800582e:	e00c      	b.n	800584a <aci_gatt_add_serv+0x110>

  if (resp.status) {
 8005830:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d002      	beq.n	800583e <aci_gatt_add_serv+0x104>
    return resp.status;
 8005838:	f897 3020 	ldrb.w	r3, [r7, #32]
 800583c:	e005      	b.n	800584a <aci_gatt_add_serv+0x110>
  }
    
  *serviceHandle = btohs(resp.handle);
 800583e:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 8005842:	b29a      	uxth	r2, r3
 8005844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005846:	801a      	strh	r2, [r3, #0]

  return 0;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3740      	adds	r7, #64	; 0x40
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b092      	sub	sp, #72	; 0x48
 8005856:	af00      	add	r7, sp, #0
 8005858:	603a      	str	r2, [r7, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	4603      	mov	r3, r0
 800585e:	80fb      	strh	r3, [r7, #6]
 8005860:	460b      	mov	r3, r1
 8005862:	717b      	strb	r3, [r7, #5]
 8005864:	4613      	mov	r3, r2
 8005866:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8005868:	2300      	movs	r3, #0
 800586a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 800586e:	88fb      	ldrh	r3, [r7, #6]
 8005870:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8005872:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005876:	f107 020c 	add.w	r2, r7, #12
 800587a:	4413      	add	r3, r2
 800587c:	88fa      	ldrh	r2, [r7, #6]
 800587e:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8005880:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005884:	3302      	adds	r3, #2
 8005886:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 800588a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800588e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005892:	4413      	add	r3, r2
 8005894:	797a      	ldrb	r2, [r7, #5]
 8005896:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800589a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800589e:	3301      	adds	r3, #1
 80058a0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 80058a4:	797b      	ldrb	r3, [r7, #5]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d103      	bne.n	80058b2 <aci_gatt_add_char+0x60>
    uuid_len = 2;
 80058aa:	2302      	movs	r3, #2
 80058ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80058b0:	e002      	b.n	80058b8 <aci_gatt_add_char+0x66>
  }
  else {
    uuid_len = 16;
 80058b2:	2310      	movs	r3, #16
 80058b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80058b8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80058bc:	f107 020c 	add.w	r2, r7, #12
 80058c0:	4413      	add	r3, r2
 80058c2:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80058c6:	6839      	ldr	r1, [r7, #0]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f001 f973 	bl	8006bb4 <memcpy>
  indx +=  uuid_len;
 80058ce:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80058d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80058d6:	4413      	add	r3, r2
 80058d8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 80058dc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80058e0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80058e4:	4413      	add	r3, r2
 80058e6:	793a      	ldrb	r2, [r7, #4]
 80058e8:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80058ec:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80058f0:	3301      	adds	r3, #1
 80058f2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 80058f6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80058fa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80058fe:	4413      	add	r3, r2
 8005900:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8005904:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8005908:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800590c:	3301      	adds	r3, #1
 800590e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 8005912:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005916:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800591a:	4413      	add	r3, r2
 800591c:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8005920:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8005924:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005928:	3301      	adds	r3, #1
 800592a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 800592e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005932:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005936:	4413      	add	r3, r2
 8005938:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800593c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8005940:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005944:	3301      	adds	r3, #1
 8005946:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 800594a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800594e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005952:	4413      	add	r3, r2
 8005954:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8005958:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800595c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005960:	3301      	adds	r3, #1
 8005962:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 8005966:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800596a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800596e:	4413      	add	r3, r2
 8005970:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8005974:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8005978:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800597c:	3301      	adds	r3, #1
 800597e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005982:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005986:	2203      	movs	r2, #3
 8005988:	2100      	movs	r1, #0
 800598a:	4618      	mov	r0, r3
 800598c:	f001 f91d 	bl	8006bca <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005990:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005994:	2218      	movs	r2, #24
 8005996:	2100      	movs	r1, #0
 8005998:	4618      	mov	r0, r3
 800599a:	f001 f916 	bl	8006bca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800599e:	233f      	movs	r3, #63	; 0x3f
 80059a0:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 80059a2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80059a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 80059a8:	f107 030c 	add.w	r3, r7, #12
 80059ac:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 80059ae:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80059b2:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 80059b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 80059ba:	2303      	movs	r3, #3
 80059bc:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 80059be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80059c2:	2100      	movs	r1, #0
 80059c4:	4618      	mov	r0, r3
 80059c6:	f000 fc7f 	bl	80062c8 <hci_send_req>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	da01      	bge.n	80059d4 <aci_gatt_add_char+0x182>
    return BLE_STATUS_TIMEOUT;
 80059d0:	23ff      	movs	r3, #255	; 0xff
 80059d2:	e00c      	b.n	80059ee <aci_gatt_add_char+0x19c>

  if (resp.status) {
 80059d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <aci_gatt_add_char+0x190>
    return resp.status;
 80059dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80059e0:	e005      	b.n	80059ee <aci_gatt_add_char+0x19c>
  }
    
  *charHandle = btohs(resp.handle);
 80059e2:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059ea:	801a      	strh	r2, [r3, #0]

  return 0;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3748      	adds	r7, #72	; 0x48
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 80059f6:	b590      	push	{r4, r7, lr}
 80059f8:	b0ab      	sub	sp, #172	; 0xac
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	4604      	mov	r4, r0
 80059fe:	4608      	mov	r0, r1
 8005a00:	4611      	mov	r1, r2
 8005a02:	461a      	mov	r2, r3
 8005a04:	4623      	mov	r3, r4
 8005a06:	80fb      	strh	r3, [r7, #6]
 8005a08:	4603      	mov	r3, r0
 8005a0a:	80bb      	strh	r3, [r7, #4]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	70fb      	strb	r3, [r7, #3]
 8005a10:	4613      	mov	r3, r2
 8005a12:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8005a14:	2300      	movs	r3, #0
 8005a16:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8005a1a:	78bb      	ldrb	r3, [r7, #2]
 8005a1c:	3306      	adds	r3, #6
 8005a1e:	2b80      	cmp	r3, #128	; 0x80
 8005a20:	dd01      	ble.n	8005a26 <aci_gatt_update_char_value+0x30>
    return BLE_STATUS_INVALID_PARAMS;
 8005a22:	2342      	movs	r3, #66	; 0x42
 8005a24:	e076      	b.n	8005b14 <aci_gatt_update_char_value+0x11e>

  servHandle = htobs(servHandle);
 8005a26:	88fb      	ldrh	r3, [r7, #6]
 8005a28:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8005a2a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005a2e:	f107 0208 	add.w	r2, r7, #8
 8005a32:	4413      	add	r3, r2
 8005a34:	88fa      	ldrh	r2, [r7, #6]
 8005a36:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8005a38:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005a3c:	3302      	adds	r3, #2
 8005a3e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 8005a42:	88bb      	ldrh	r3, [r7, #4]
 8005a44:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8005a46:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005a4a:	f107 0208 	add.w	r2, r7, #8
 8005a4e:	4413      	add	r3, r2
 8005a50:	88ba      	ldrh	r2, [r7, #4]
 8005a52:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8005a54:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005a58:	3302      	adds	r3, #2
 8005a5a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 8005a5e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005a62:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005a66:	4413      	add	r3, r2
 8005a68:	78fa      	ldrb	r2, [r7, #3]
 8005a6a:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8005a6e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005a72:	3301      	adds	r3, #1
 8005a74:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 8005a78:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005a7c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005a80:	4413      	add	r3, r2
 8005a82:	78ba      	ldrb	r2, [r7, #2]
 8005a84:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8005a88:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8005a92:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005a96:	f107 0208 	add.w	r2, r7, #8
 8005a9a:	4413      	add	r3, r2
 8005a9c:	78ba      	ldrb	r2, [r7, #2]
 8005a9e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f001 f886 	bl	8006bb4 <memcpy>
  indx +=  charValueLen;
 8005aa8:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8005aac:	78bb      	ldrb	r3, [r7, #2]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005ab4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005ab8:	2218      	movs	r2, #24
 8005aba:	2100      	movs	r1, #0
 8005abc:	4618      	mov	r0, r3
 8005abe:	f001 f884 	bl	8006bca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005ac2:	233f      	movs	r3, #63	; 0x3f
 8005ac4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8005ac8:	f44f 7383 	mov.w	r3, #262	; 0x106
 8005acc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 8005ad0:	f107 0308 	add.w	r3, r7, #8
 8005ad4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8005ad8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005adc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8005ae0:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8005ae4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8005aee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005af2:	2100      	movs	r1, #0
 8005af4:	4618      	mov	r0, r3
 8005af6:	f000 fbe7 	bl	80062c8 <hci_send_req>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	da01      	bge.n	8005b04 <aci_gatt_update_char_value+0x10e>
    return BLE_STATUS_TIMEOUT;
 8005b00:	23ff      	movs	r3, #255	; 0xff
 8005b02:	e007      	b.n	8005b14 <aci_gatt_update_char_value+0x11e>

  if (status) {
 8005b04:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d002      	beq.n	8005b12 <aci_gatt_update_char_value+0x11c>
    return status;
 8005b0c:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8005b10:	e000      	b.n	8005b14 <aci_gatt_update_char_value+0x11e>
  }

  return 0;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	37ac      	adds	r7, #172	; 0xac
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd90      	pop	{r4, r7, pc}

08005b1c <aci_gatt_disc_charac_by_uuid>:
}

tBleStatus aci_gatt_disc_charac_by_uuid(uint16_t conn_handle, uint16_t start_handle,
				                     uint16_t end_handle, uint8_t charUuidType,
                                                     const uint8_t* charUuid)
{
 8005b1c:	b590      	push	{r4, r7, lr}
 8005b1e:	b091      	sub	sp, #68	; 0x44
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	4604      	mov	r4, r0
 8005b24:	4608      	mov	r0, r1
 8005b26:	4611      	mov	r1, r2
 8005b28:	461a      	mov	r2, r3
 8005b2a:	4623      	mov	r3, r4
 8005b2c:	80fb      	strh	r3, [r7, #6]
 8005b2e:	4603      	mov	r3, r0
 8005b30:	80bb      	strh	r3, [r7, #4]
 8005b32:	460b      	mov	r3, r1
 8005b34:	807b      	strh	r3, [r7, #2]
 8005b36:	4613      	mov	r3, r2
 8005b38:	707b      	strb	r3, [r7, #1]
  struct hci_request rq;
  uint8_t status;
  
  uint8_t buffer[23];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  conn_handle = htobs(conn_handle);
 8005b40:	88fb      	ldrh	r3, [r7, #6]
 8005b42:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 8005b44:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005b48:	f107 020c 	add.w	r2, r7, #12
 8005b4c:	4413      	add	r3, r2
 8005b4e:	88fa      	ldrh	r2, [r7, #6]
 8005b50:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8005b52:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005b56:	3302      	adds	r3, #2
 8005b58:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  start_handle = htobs(start_handle);
 8005b5c:	88bb      	ldrh	r3, [r7, #4]
 8005b5e:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &start_handle, 2);
 8005b60:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005b64:	f107 020c 	add.w	r2, r7, #12
 8005b68:	4413      	add	r3, r2
 8005b6a:	88ba      	ldrh	r2, [r7, #4]
 8005b6c:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8005b6e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005b72:	3302      	adds	r3, #2
 8005b74:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  
  end_handle = htobs(end_handle);
 8005b78:	887b      	ldrh	r3, [r7, #2]
 8005b7a:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &end_handle, 2);
 8005b7c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005b80:	f107 020c 	add.w	r2, r7, #12
 8005b84:	4413      	add	r3, r2
 8005b86:	887a      	ldrh	r2, [r7, #2]
 8005b88:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8005b8a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005b8e:	3302      	adds	r3, #2
 8005b90:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  
  buffer[indx] = charUuidType;
 8005b94:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005b98:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005b9c:	4413      	add	r3, r2
 8005b9e:	787a      	ldrb	r2, [r7, #1]
 8005ba0:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8005ba4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005ba8:	3301      	adds	r3, #1
 8005baa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(charUuidType == 0x01){
 8005bae:	787b      	ldrb	r3, [r7, #1]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d103      	bne.n	8005bbc <aci_gatt_disc_charac_by_uuid+0xa0>
    uuid_len = 2;
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005bba:	e002      	b.n	8005bc2 <aci_gatt_disc_charac_by_uuid+0xa6>
  }
  else {
    uuid_len = 16;
 8005bbc:	2310      	movs	r3, #16
 8005bbe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8005bc2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005bc6:	f107 020c 	add.w	r2, r7, #12
 8005bca:	4413      	add	r3, r2
 8005bcc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005bd0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 ffee 	bl	8006bb4 <memcpy>
  indx +=  uuid_len;
 8005bd8:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8005bdc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005be0:	4413      	add	r3, r2
 8005be2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bea:	2218      	movs	r2, #24
 8005bec:	2100      	movs	r1, #0
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 ffeb 	bl	8006bca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005bf4:	233f      	movs	r3, #63	; 0x3f
 8005bf6:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_DISC_CHARAC_BY_UUID;
 8005bf8:	f44f 738b 	mov.w	r3, #278	; 0x116
 8005bfc:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 8005bfe:	f107 030c 	add.w	r3, r7, #12
 8005c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 8005c04:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005c08:	633b      	str	r3, [r7, #48]	; 0x30
  rq.event = EVT_CMD_STATUS;
 8005c0a:	230f      	movs	r3, #15
 8005c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rparam = &status;
 8005c0e:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8005c12:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = 1;
 8005c14:	2301      	movs	r3, #1
 8005c16:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8005c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 fb52 	bl	80062c8 <hci_send_req>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	da01      	bge.n	8005c2e <aci_gatt_disc_charac_by_uuid+0x112>
    return BLE_STATUS_TIMEOUT;
 8005c2a:	23ff      	movs	r3, #255	; 0xff
 8005c2c:	e001      	b.n	8005c32 <aci_gatt_disc_charac_by_uuid+0x116>

  return status;
 8005c2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3744      	adds	r7, #68	; 0x44
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd90      	pop	{r4, r7, pc}

08005c3a <aci_gatt_write_charac_descriptor>:
  return status;
}

tBleStatus aci_gatt_write_charac_descriptor(uint16_t conn_handle, uint16_t attr_handle, 
					   uint8_t value_len, uint8_t *attr_value)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b0ac      	sub	sp, #176	; 0xb0
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	607b      	str	r3, [r7, #4]
 8005c42:	4603      	mov	r3, r0
 8005c44:	81fb      	strh	r3, [r7, #14]
 8005c46:	460b      	mov	r3, r1
 8005c48:	81bb      	strh	r3, [r7, #12]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 8005c54:	7afb      	ldrb	r3, [r7, #11]
 8005c56:	3305      	adds	r3, #5
 8005c58:	2b80      	cmp	r3, #128	; 0x80
 8005c5a:	dd01      	ble.n	8005c60 <aci_gatt_write_charac_descriptor+0x26>
    return BLE_STATUS_INVALID_PARAMS;
 8005c5c:	2342      	movs	r3, #66	; 0x42
 8005c5e:	e065      	b.n	8005d2c <aci_gatt_write_charac_descriptor+0xf2>

  conn_handle = htobs(conn_handle);
 8005c60:	89fb      	ldrh	r3, [r7, #14]
 8005c62:	81fb      	strh	r3, [r7, #14]
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 8005c64:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8005c68:	f107 0210 	add.w	r2, r7, #16
 8005c6c:	4413      	add	r3, r2
 8005c6e:	89fa      	ldrh	r2, [r7, #14]
 8005c70:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8005c72:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8005c76:	3302      	adds	r3, #2
 8005c78:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    
  attr_handle = htobs(attr_handle);
 8005c7c:	89bb      	ldrh	r3, [r7, #12]
 8005c7e:	81bb      	strh	r3, [r7, #12]
  BLUENRG_memcpy(buffer + indx, &attr_handle, 2);
 8005c80:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8005c84:	f107 0210 	add.w	r2, r7, #16
 8005c88:	4413      	add	r3, r2
 8005c8a:	89ba      	ldrh	r2, [r7, #12]
 8005c8c:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8005c8e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8005c92:	3302      	adds	r3, #2
 8005c94:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  buffer[indx] = value_len;
 8005c98:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8005c9c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8005ca0:	4413      	add	r3, r2
 8005ca2:	7afa      	ldrb	r2, [r7, #11]
 8005ca4:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8005ca8:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8005cac:	3301      	adds	r3, #1
 8005cae:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 8005cb2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8005cb6:	f107 0210 	add.w	r2, r7, #16
 8005cba:	4413      	add	r3, r2
 8005cbc:	7afa      	ldrb	r2, [r7, #11]
 8005cbe:	6879      	ldr	r1, [r7, #4]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f000 ff77 	bl	8006bb4 <memcpy>
  indx +=  value_len;
 8005cc6:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 8005cca:	7afb      	ldrb	r3, [r7, #11]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005cd2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005cd6:	2218      	movs	r2, #24
 8005cd8:	2100      	movs	r1, #0
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 ff75 	bl	8006bca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005ce0:	233f      	movs	r3, #63	; 0x3f
 8005ce2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
  rq.ocf = OCF_GATT_WRITE_CHAR_DESCRIPTOR;
 8005ce6:	f240 1321 	movw	r3, #289	; 0x121
 8005cea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
  rq.cparam = (void *)buffer;
 8005cee:	f107 0310 	add.w	r3, r7, #16
 8005cf2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.clen = indx;
 8005cf6:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8005cfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  rq.event = EVT_CMD_STATUS; 
 8005cfe:	230f      	movs	r3, #15
 8005d00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8005d04:	f107 0393 	add.w	r3, r7, #147	; 0x93
 8005d08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  rq.rlen = 1;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (hci_send_req(&rq, FALSE) < 0)
 8005d12:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005d16:	2100      	movs	r1, #0
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 fad5 	bl	80062c8 <hci_send_req>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	da01      	bge.n	8005d28 <aci_gatt_write_charac_descriptor+0xee>
    return BLE_STATUS_TIMEOUT;
 8005d24:	23ff      	movs	r3, #255	; 0xff
 8005d26:	e001      	b.n	8005d2c <aci_gatt_write_charac_descriptor+0xf2>

  return status;
 8005d28:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	37b0      	adds	r7, #176	; 0xb0
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <aci_gatt_write_without_response>:
  return status;
}

tBleStatus aci_gatt_write_without_response(uint16_t conn_handle, uint16_t attr_handle,
                                              uint8_t val_len, const uint8_t* attr_val)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b092      	sub	sp, #72	; 0x48
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	607b      	str	r3, [r7, #4]
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	81fb      	strh	r3, [r7, #14]
 8005d40:	460b      	mov	r3, r1
 8005d42:	81bb      	strh	r3, [r7, #12]
 8005d44:	4613      	mov	r3, r2
 8005d46:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  uint8_t status;
  gatt_write_without_resp_cp cp;
  
  if(val_len > sizeof(cp.attr_val))
 8005d48:	7afb      	ldrb	r3, [r7, #11]
 8005d4a:	2b14      	cmp	r3, #20
 8005d4c:	d901      	bls.n	8005d52 <aci_gatt_write_without_response+0x1e>
    return BLE_STATUS_INVALID_PARAMS;
 8005d4e:	2342      	movs	r3, #66	; 0x42
 8005d50:	e031      	b.n	8005db6 <aci_gatt_write_without_response+0x82>

  cp.conn_handle = htobs(conn_handle);
 8005d52:	89fb      	ldrh	r3, [r7, #14]
 8005d54:	82bb      	strh	r3, [r7, #20]
  cp.attr_handle = htobs(attr_handle);
 8005d56:	89bb      	ldrh	r3, [r7, #12]
 8005d58:	82fb      	strh	r3, [r7, #22]
  cp.val_len = val_len;
 8005d5a:	7afb      	ldrb	r3, [r7, #11]
 8005d5c:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(cp.attr_val, attr_val, val_len);
 8005d5e:	7afa      	ldrb	r2, [r7, #11]
 8005d60:	f107 0314 	add.w	r3, r7, #20
 8005d64:	3305      	adds	r3, #5
 8005d66:	6879      	ldr	r1, [r7, #4]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f000 ff23 	bl	8006bb4 <memcpy>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005d6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005d72:	2218      	movs	r2, #24
 8005d74:	2100      	movs	r1, #0
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 ff27 	bl	8006bca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005d7c:	233f      	movs	r3, #63	; 0x3f
 8005d7e:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_GATT_WRITE_WITHOUT_RESPONSE;
 8005d80:	f240 1323 	movw	r3, #291	; 0x123
 8005d84:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &cp;
 8005d86:	f107 0314 	add.w	r3, r7, #20
 8005d8a:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
 8005d8c:	7afb      	ldrb	r3, [r7, #11]
 8005d8e:	3305      	adds	r3, #5
 8005d90:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 8005d92:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8005d96:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	647b      	str	r3, [r7, #68]	; 0x44

  if (hci_send_req(&rq, FALSE) < 0)
 8005d9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005da0:	2100      	movs	r1, #0
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fa90 	bl	80062c8 <hci_send_req>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	da01      	bge.n	8005db2 <aci_gatt_write_without_response+0x7e>
    return BLE_STATUS_TIMEOUT;
 8005dae:	23ff      	movs	r3, #255	; 0xff
 8005db0:	e001      	b.n	8005db6 <aci_gatt_write_without_response+0x82>

  return status;
 8005db2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3748      	adds	r7, #72	; 0x48
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b0aa      	sub	sp, #168	; 0xa8
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	603a      	str	r2, [r7, #0]
 8005dc8:	71fb      	strb	r3, [r7, #7]
 8005dca:	460b      	mov	r3, r1
 8005dcc:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8005dd4:	79bb      	ldrb	r3, [r7, #6]
 8005dd6:	3302      	adds	r3, #2
 8005dd8:	2b80      	cmp	r3, #128	; 0x80
 8005dda:	dd01      	ble.n	8005de0 <aci_hal_write_config_data+0x22>
    return BLE_STATUS_INVALID_PARAMS;
 8005ddc:	2342      	movs	r3, #66	; 0x42
 8005dde:	e052      	b.n	8005e86 <aci_hal_write_config_data+0xc8>

  buffer[indx] = offset;
 8005de0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005de4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005de8:	4413      	add	r3, r2
 8005dea:	79fa      	ldrb	r2, [r7, #7]
 8005dec:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8005df0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005df4:	3301      	adds	r3, #1
 8005df6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = len;
 8005dfa:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005dfe:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005e02:	4413      	add	r3, r2
 8005e04:	79ba      	ldrb	r2, [r7, #6]
 8005e06:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8005e0a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005e0e:	3301      	adds	r3, #1
 8005e10:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, val, len);
 8005e14:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005e18:	f107 0208 	add.w	r2, r7, #8
 8005e1c:	4413      	add	r3, r2
 8005e1e:	79ba      	ldrb	r2, [r7, #6]
 8005e20:	6839      	ldr	r1, [r7, #0]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 fec6 	bl	8006bb4 <memcpy>
  indx +=  len;
 8005e28:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8005e2c:	79bb      	ldrb	r3, [r7, #6]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005e34:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005e38:	2218      	movs	r2, #24
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 fec4 	bl	8006bca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005e42:	233f      	movs	r3, #63	; 0x3f
 8005e44:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 8005e48:	230c      	movs	r3, #12
 8005e4a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 8005e4e:	f107 0308 	add.w	r3, r7, #8
 8005e52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8005e56:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005e5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8005e5e:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8005e62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 8005e66:	2301      	movs	r3, #1
 8005e68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8005e6c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005e70:	2100      	movs	r1, #0
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 fa28 	bl	80062c8 <hci_send_req>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	da01      	bge.n	8005e82 <aci_hal_write_config_data+0xc4>
    return BLE_STATUS_TIMEOUT;
 8005e7e:	23ff      	movs	r3, #255	; 0xff
 8005e80:	e001      	b.n	8005e86 <aci_hal_write_config_data+0xc8>

  return status;
 8005e82:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	37a8      	adds	r7, #168	; 0xa8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b08a      	sub	sp, #40	; 0x28
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	4603      	mov	r3, r0
 8005e96:	460a      	mov	r2, r1
 8005e98:	71fb      	strb	r3, [r7, #7]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8005e9e:	79fb      	ldrb	r3, [r7, #7]
 8005ea0:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 8005ea2:	79bb      	ldrb	r3, [r7, #6]
 8005ea4:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005ea6:	f107 0310 	add.w	r3, r7, #16
 8005eaa:	2218      	movs	r2, #24
 8005eac:	2100      	movs	r1, #0
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f000 fe8b 	bl	8006bca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005eb4:	233f      	movs	r3, #63	; 0x3f
 8005eb6:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8005eb8:	230f      	movs	r3, #15
 8005eba:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 8005ebc:	f107 030c 	add.w	r3, r7, #12
 8005ec0:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8005ec6:	f107 030b 	add.w	r3, r7, #11
 8005eca:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 8005ed0:	f107 0310 	add.w	r3, r7, #16
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 f9f6 	bl	80062c8 <hci_send_req>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	da01      	bge.n	8005ee6 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 8005ee2:	23ff      	movs	r3, #255	; 0xff
 8005ee4:	e000      	b.n	8005ee8 <aci_hal_set_tx_power_level+0x5a>

  return status;
 8005ee6:	7afb      	ldrb	r3, [r7, #11]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3728      	adds	r7, #40	; 0x28
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8005ef0:	b590      	push	{r4, r7, lr}
 8005ef2:	b089      	sub	sp, #36	; 0x24
 8005ef4:	af02      	add	r7, sp, #8
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8005efa:	f107 0410 	add.w	r4, r7, #16
 8005efe:	f107 0215 	add.w	r2, r7, #21
 8005f02:	f107 0112 	add.w	r1, r7, #18
 8005f06:	f107 0016 	add.w	r0, r7, #22
 8005f0a:	f107 030e 	add.w	r3, r7, #14
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	4623      	mov	r3, r4
 8005f12:	f000 f853 	bl	8005fbc <hci_le_read_local_version>
 8005f16:	4603      	mov	r3, r0
 8005f18:	75fb      	strb	r3, [r7, #23]
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8005f1a:	7dfb      	ldrb	r3, [r7, #23]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d126      	bne.n	8005f6e <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 8005f20:	8a7b      	ldrh	r3, [r7, #18]
 8005f22:	0a1b      	lsrs	r3, r3, #8
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	b2da      	uxtb	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8005f2c:	8a7b      	ldrh	r3, [r7, #18]
 8005f2e:	021b      	lsls	r3, r3, #8
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	b21a      	sxth	r2, r3
 8005f3c:	89fb      	ldrh	r3, [r7, #14]
 8005f3e:	091b      	lsrs	r3, r3, #4
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	011b      	lsls	r3, r3, #4
 8005f44:	b21b      	sxth	r3, r3
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	b21b      	sxth	r3, r3
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	b21b      	sxth	r3, r3
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	881b      	ldrh	r3, [r3, #0]
 8005f58:	b21a      	sxth	r2, r3
 8005f5a:	89fb      	ldrh	r3, [r7, #14]
 8005f5c:	b21b      	sxth	r3, r3
 8005f5e:	f003 030f 	and.w	r3, r3, #15
 8005f62:	b21b      	sxth	r3, r3
 8005f64:	4313      	orrs	r3, r2
 8005f66:	b21b      	sxth	r3, r3
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8005f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	371c      	adds	r7, #28
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd90      	pop	{r4, r7, pc}

08005f78 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b088      	sub	sp, #32
 8005f7c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005f7e:	f107 0308 	add.w	r3, r7, #8
 8005f82:	2218      	movs	r2, #24
 8005f84:	2100      	movs	r1, #0
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 fe1f 	bl	8006bca <memset>
  rq.ogf = OGF_HOST_CTL;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8005f90:	2303      	movs	r3, #3
 8005f92:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005f94:	1dfb      	adds	r3, r7, #7
 8005f96:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8005f9c:	f107 0308 	add.w	r3, r7, #8
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 f990 	bl	80062c8 <hci_send_req>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	da01      	bge.n	8005fb2 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8005fae:	23ff      	movs	r3, #255	; 0xff
 8005fb0:	e000      	b.n	8005fb4 <hci_reset+0x3c>
  
  return status;  
 8005fb2:	79fb      	ldrb	r3, [r7, #7]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3720      	adds	r7, #32
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b08e      	sub	sp, #56	; 0x38
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
 8005fc8:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005fca:	f107 0314 	add.w	r3, r7, #20
 8005fce:	2209      	movs	r2, #9
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 fdf9 	bl	8006bca <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005fd8:	f107 0320 	add.w	r3, r7, #32
 8005fdc:	2218      	movs	r2, #24
 8005fde:	2100      	movs	r1, #0
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 fdf2 	bl	8006bca <memset>
  rq.ogf = OGF_INFO_PARAM;
 8005fe6:	2304      	movs	r3, #4
 8005fe8:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8005fea:	2301      	movs	r3, #1
 8005fec:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 8005ff6:	f107 0314 	add.w	r3, r7, #20
 8005ffa:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8005ffc:	2309      	movs	r3, #9
 8005ffe:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8006000:	f107 0320 	add.w	r3, r7, #32
 8006004:	2100      	movs	r1, #0
 8006006:	4618      	mov	r0, r3
 8006008:	f000 f95e 	bl	80062c8 <hci_send_req>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	da01      	bge.n	8006016 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8006012:	23ff      	movs	r3, #255	; 0xff
 8006014:	e018      	b.n	8006048 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8006016:	7d3b      	ldrb	r3, [r7, #20]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d001      	beq.n	8006020 <hci_le_read_local_version+0x64>
    return resp.status;
 800601c:	7d3b      	ldrb	r3, [r7, #20]
 800601e:	e013      	b.n	8006048 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 8006020:	7d7a      	ldrb	r2, [r7, #21]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8006026:	8afa      	ldrh	r2, [r7, #22]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800602c:	7e3a      	ldrb	r2, [r7, #24]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8006032:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8006036:	b29a      	uxth	r2, r3
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800603c:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8006040:	b29a      	uxth	r2, r3
 8006042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006044:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3738      	adds	r7, #56	; 0x38
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b092      	sub	sp, #72	; 0x48
 8006054:	af00      	add	r7, sp, #0
 8006056:	4603      	mov	r3, r0
 8006058:	6039      	str	r1, [r7, #0]
 800605a:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800605c:	f107 0310 	add.w	r3, r7, #16
 8006060:	2220      	movs	r2, #32
 8006062:	2100      	movs	r1, #0
 8006064:	4618      	mov	r0, r3
 8006066:	f000 fdb0 	bl	8006bca <memset>
  scan_resp_cp.length = length;
 800606a:	79fb      	ldrb	r3, [r7, #7]
 800606c:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800606e:	79fb      	ldrb	r3, [r7, #7]
 8006070:	2b1f      	cmp	r3, #31
 8006072:	bf28      	it	cs
 8006074:	231f      	movcs	r3, #31
 8006076:	b2db      	uxtb	r3, r3
 8006078:	461a      	mov	r2, r3
 800607a:	f107 0310 	add.w	r3, r7, #16
 800607e:	3301      	adds	r3, #1
 8006080:	6839      	ldr	r1, [r7, #0]
 8006082:	4618      	mov	r0, r3
 8006084:	f000 fd96 	bl	8006bb4 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006088:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800608c:	2218      	movs	r2, #24
 800608e:	2100      	movs	r1, #0
 8006090:	4618      	mov	r0, r3
 8006092:	f000 fd9a 	bl	8006bca <memset>
  rq.ogf = OGF_LE_CTL;
 8006096:	2308      	movs	r3, #8
 8006098:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800609a:	2309      	movs	r3, #9
 800609c:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 800609e:	f107 0310 	add.w	r3, r7, #16
 80060a2:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 80060a4:	2320      	movs	r3, #32
 80060a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 80060a8:	f107 030f 	add.w	r3, r7, #15
 80060ac:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 80060ae:	2301      	movs	r3, #1
 80060b0:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 80060b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060b6:	2100      	movs	r1, #0
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 f905 	bl	80062c8 <hci_send_req>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	da01      	bge.n	80060c8 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 80060c4:	23ff      	movs	r3, #255	; 0xff
 80060c6:	e000      	b.n	80060ca <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3748      	adds	r7, #72	; 0x48
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 80060d2:	b480      	push	{r7}
 80060d4:	b085      	sub	sp, #20
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	3308      	adds	r3, #8
 80060de:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	2b04      	cmp	r3, #4
 80060e6:	d001      	beq.n	80060ec <verify_packet+0x1a>
    return 1; /* Incorrect type */
 80060e8:	2301      	movs	r3, #1
 80060ea:	e00c      	b.n	8006106 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	3302      	adds	r3, #2
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	461a      	mov	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80060fa:	3b03      	subs	r3, #3
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d001      	beq.n	8006104 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8006100:	2302      	movs	r3, #2
 8006102:	e000      	b.n	8006106 <verify_packet+0x34>
  
  return 0;      
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
	...

08006114 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b0a6      	sub	sp, #152	; 0x98
 8006118:	af00      	add	r7, sp, #0
 800611a:	607b      	str	r3, [r7, #4]
 800611c:	4603      	mov	r3, r0
 800611e:	81fb      	strh	r3, [r7, #14]
 8006120:	460b      	mov	r3, r1
 8006122:	81bb      	strh	r3, [r7, #12]
 8006124:	4613      	mov	r3, r2
 8006126:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8006128:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800612c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006130:	b21a      	sxth	r2, r3
 8006132:	89fb      	ldrh	r3, [r7, #14]
 8006134:	029b      	lsls	r3, r3, #10
 8006136:	b21b      	sxth	r3, r3
 8006138:	4313      	orrs	r3, r2
 800613a:	b21b      	sxth	r3, r3
 800613c:	b29b      	uxth	r3, r3
 800613e:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8006140:	7afb      	ldrb	r3, [r7, #11]
 8006142:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8006144:	2301      	movs	r3, #1
 8006146:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8006148:	f107 0318 	add.w	r3, r7, #24
 800614c:	3301      	adds	r3, #1
 800614e:	461a      	mov	r2, r3
 8006150:	f107 0314 	add.w	r3, r7, #20
 8006154:	8819      	ldrh	r1, [r3, #0]
 8006156:	789b      	ldrb	r3, [r3, #2]
 8006158:	8011      	strh	r1, [r2, #0]
 800615a:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800615c:	f107 0318 	add.w	r3, r7, #24
 8006160:	3304      	adds	r3, #4
 8006162:	7afa      	ldrb	r2, [r7, #11]
 8006164:	6879      	ldr	r1, [r7, #4]
 8006166:	4618      	mov	r0, r3
 8006168:	f000 fd24 	bl	8006bb4 <memcpy>
  
  if (hciContext.io.Send)
 800616c:	4b08      	ldr	r3, [pc, #32]	; (8006190 <send_cmd+0x7c>)
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d009      	beq.n	8006188 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8006174:	4b06      	ldr	r3, [pc, #24]	; (8006190 <send_cmd+0x7c>)
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	7afa      	ldrb	r2, [r7, #11]
 800617a:	b292      	uxth	r2, r2
 800617c:	3204      	adds	r2, #4
 800617e:	b291      	uxth	r1, r2
 8006180:	f107 0218 	add.w	r2, r7, #24
 8006184:	4610      	mov	r0, r2
 8006186:	4798      	blx	r3
  }
}
 8006188:	bf00      	nop
 800618a:	3798      	adds	r7, #152	; 0x98
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	200005e8 	.word	0x200005e8

08006194 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800619e:	e00a      	b.n	80061b6 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 80061a0:	f107 030c 	add.w	r3, r7, #12
 80061a4:	4619      	mov	r1, r3
 80061a6:	6838      	ldr	r0, [r7, #0]
 80061a8:	f000 fada 	bl	8006760 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4619      	mov	r1, r3
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fa49 	bl	8006648 <list_insert_head>
  while (!list_is_empty(src_list))
 80061b6:	6838      	ldr	r0, [r7, #0]
 80061b8:	f000 fa26 	bl	8006608 <list_is_empty>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d0ee      	beq.n	80061a0 <move_list+0xc>
  }
}
 80061c2:	bf00      	nop
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
	...

080061cc <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80061d2:	e009      	b.n	80061e8 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 80061d4:	1d3b      	adds	r3, r7, #4
 80061d6:	4619      	mov	r1, r3
 80061d8:	4808      	ldr	r0, [pc, #32]	; (80061fc <free_event_list+0x30>)
 80061da:	f000 fa9c 	bl	8006716 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4619      	mov	r1, r3
 80061e2:	4807      	ldr	r0, [pc, #28]	; (8006200 <free_event_list+0x34>)
 80061e4:	f000 fa54 	bl	8006690 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80061e8:	4805      	ldr	r0, [pc, #20]	; (8006200 <free_event_list+0x34>)
 80061ea:	f000 fade 	bl	80067aa <list_get_size>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	ddef      	ble.n	80061d4 <free_event_list+0x8>
  }
}
 80061f4:	bf00      	nop
 80061f6:	3708      	adds	r7, #8
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	20000714 	.word	0x20000714
 8006200:	2000070c 	.word	0x2000070c

08006204 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8006214:	4a18      	ldr	r2, [pc, #96]	; (8006278 <hci_init+0x74>)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800621a:	4818      	ldr	r0, [pc, #96]	; (800627c <hci_init+0x78>)
 800621c:	f000 f9e4 	bl	80065e8 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8006220:	4817      	ldr	r0, [pc, #92]	; (8006280 <hci_init+0x7c>)
 8006222:	f000 f9e1 	bl	80065e8 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8006226:	f7fb f989 	bl	800153c <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800622a:	2300      	movs	r3, #0
 800622c:	73fb      	strb	r3, [r7, #15]
 800622e:	e00c      	b.n	800624a <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8006230:	7bfb      	ldrb	r3, [r7, #15]
 8006232:	228c      	movs	r2, #140	; 0x8c
 8006234:	fb02 f303 	mul.w	r3, r2, r3
 8006238:	4a12      	ldr	r2, [pc, #72]	; (8006284 <hci_init+0x80>)
 800623a:	4413      	add	r3, r2
 800623c:	4619      	mov	r1, r3
 800623e:	480f      	ldr	r0, [pc, #60]	; (800627c <hci_init+0x78>)
 8006240:	f000 fa26 	bl	8006690 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8006244:	7bfb      	ldrb	r3, [r7, #15]
 8006246:	3301      	adds	r3, #1
 8006248:	73fb      	strb	r3, [r7, #15]
 800624a:	7bfb      	ldrb	r3, [r7, #15]
 800624c:	2b04      	cmp	r3, #4
 800624e:	d9ef      	bls.n	8006230 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8006250:	4b09      	ldr	r3, [pc, #36]	; (8006278 <hci_init+0x74>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d003      	beq.n	8006260 <hci_init+0x5c>
 8006258:	4b07      	ldr	r3, [pc, #28]	; (8006278 <hci_init+0x74>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2000      	movs	r0, #0
 800625e:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8006260:	4b05      	ldr	r3, [pc, #20]	; (8006278 <hci_init+0x74>)
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d002      	beq.n	800626e <hci_init+0x6a>
 8006268:	4b03      	ldr	r3, [pc, #12]	; (8006278 <hci_init+0x74>)
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	4798      	blx	r3
}
 800626e:	bf00      	nop
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	200005e8 	.word	0x200005e8
 800627c:	2000070c 	.word	0x2000070c
 8006280:	20000714 	.word	0x20000714
 8006284:	2000032c 	.word	0x2000032c

08006288 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a0b      	ldr	r2, [pc, #44]	; (80062c4 <hci_register_io_bus+0x3c>)
 8006296:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	4a09      	ldr	r2, [pc, #36]	; (80062c4 <hci_register_io_bus+0x3c>)
 800629e:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	4a07      	ldr	r2, [pc, #28]	; (80062c4 <hci_register_io_bus+0x3c>)
 80062a6:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	4a05      	ldr	r2, [pc, #20]	; (80062c4 <hci_register_io_bus+0x3c>)
 80062ae:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	4a03      	ldr	r2, [pc, #12]	; (80062c4 <hci_register_io_bus+0x3c>)
 80062b6:	6093      	str	r3, [r2, #8]
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr
 80062c4:	200005e8 	.word	0x200005e8

080062c8 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b08e      	sub	sp, #56	; 0x38
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	460b      	mov	r3, r1
 80062d2:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	885b      	ldrh	r3, [r3, #2]
 80062d8:	b21b      	sxth	r3, r3
 80062da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062de:	b21a      	sxth	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	881b      	ldrh	r3, [r3, #0]
 80062e4:	029b      	lsls	r3, r3, #10
 80062e6:	b21b      	sxth	r3, r3
 80062e8:	4313      	orrs	r3, r2
 80062ea:	b21b      	sxth	r3, r3
 80062ec:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 80062ee:	2300      	movs	r3, #0
 80062f0:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 80062f2:	f107 0308 	add.w	r3, r7, #8
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 f976 	bl	80065e8 <list_init_head>

  free_event_list();
 80062fc:	f7ff ff66 	bl	80061cc <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	8818      	ldrh	r0, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	8859      	ldrh	r1, [r3, #2]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	b2da      	uxtb	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f7ff feff 	bl	8006114 <send_cmd>
  
  if (async)
 8006316:	78fb      	ldrb	r3, [r7, #3]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <hci_send_req+0x58>
  {
    return 0;
 800631c:	2300      	movs	r3, #0
 800631e:	e0e2      	b.n	80064e6 <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8006320:	f7fb ff30 	bl	8002184 <HAL_GetTick>
 8006324:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8006326:	f7fb ff2d 	bl	8002184 <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006334:	f200 80b3 	bhi.w	800649e <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8006338:	486d      	ldr	r0, [pc, #436]	; (80064f0 <hci_send_req+0x228>)
 800633a:	f000 f965 	bl	8006608 <list_is_empty>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d000      	beq.n	8006346 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8006344:	e7ef      	b.n	8006326 <hci_send_req+0x5e>
      {
        break;
 8006346:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8006348:	f107 0310 	add.w	r3, r7, #16
 800634c:	4619      	mov	r1, r3
 800634e:	4868      	ldr	r0, [pc, #416]	; (80064f0 <hci_send_req+0x228>)
 8006350:	f000 f9e1 	bl	8006716 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	3308      	adds	r3, #8
 8006358:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800635a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	2b04      	cmp	r3, #4
 8006360:	d17a      	bne.n	8006458 <hci_send_req+0x190>
    {
      event_pckt = (void *)(hci_hdr->data);
 8006362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006364:	3301      	adds	r3, #1
 8006366:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	3308      	adds	r3, #8
 800636c:	3303      	adds	r3, #3
 800636e:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8006376:	3b03      	subs	r3, #3
 8006378:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800637a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	2b0f      	cmp	r3, #15
 8006380:	d00a      	beq.n	8006398 <hci_send_req+0xd0>
 8006382:	2b0f      	cmp	r3, #15
 8006384:	dc02      	bgt.n	800638c <hci_send_req+0xc4>
 8006386:	2b0e      	cmp	r3, #14
 8006388:	d028      	beq.n	80063dc <hci_send_req+0x114>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 800638a:	e06a      	b.n	8006462 <hci_send_req+0x19a>
      switch (event_pckt->evt) 
 800638c:	2b10      	cmp	r3, #16
 800638e:	f000 8088 	beq.w	80064a2 <hci_send_req+0x1da>
 8006392:	2b3e      	cmp	r3, #62	; 0x3e
 8006394:	d042      	beq.n	800641c <hci_send_req+0x154>
        break;
 8006396:	e064      	b.n	8006462 <hci_send_req+0x19a>
        cs = (void *) ptr;
 8006398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639a:	61bb      	str	r3, [r7, #24]
        if (cs->opcode != opcode)
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	885b      	ldrh	r3, [r3, #2]
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d17e      	bne.n	80064a6 <hci_send_req+0x1de>
        if (r->event != EVT_CMD_STATUS) {
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2b0f      	cmp	r3, #15
 80063ae:	d004      	beq.n	80063ba <hci_send_req+0xf2>
          if (cs->status) {
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d051      	beq.n	800645c <hci_send_req+0x194>
            goto failed;
 80063b8:	e078      	b.n	80064ac <hci_send_req+0x1e4>
        r->rlen = MIN(len, r->rlen);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	695a      	ldr	r2, [r3, #20]
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	bf28      	it	cs
 80063c4:	461a      	movcs	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6918      	ldr	r0, [r3, #16]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	461a      	mov	r2, r3
 80063d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063d6:	f000 fbed 	bl	8006bb4 <memcpy>
        goto done;
 80063da:	e078      	b.n	80064ce <hci_send_req+0x206>
        cc = (void *) ptr;
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	617b      	str	r3, [r7, #20]
        if (cc->opcode != opcode)
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d15d      	bne.n	80064aa <hci_send_req+0x1e2>
        ptr += EVT_CMD_COMPLETE_SIZE;
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	3303      	adds	r3, #3
 80063f2:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	3b03      	subs	r3, #3
 80063f8:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	695a      	ldr	r2, [r3, #20]
 80063fe:	6a3b      	ldr	r3, [r7, #32]
 8006400:	429a      	cmp	r2, r3
 8006402:	bf28      	it	cs
 8006404:	461a      	movcs	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6918      	ldr	r0, [r3, #16]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	461a      	mov	r2, r3
 8006414:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006416:	f000 fbcd 	bl	8006bb4 <memcpy>
        goto done;
 800641a:	e058      	b.n	80064ce <hci_send_req+0x206>
        me = (void *) ptr;
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	61fb      	str	r3, [r7, #28]
        if (me->subevent != r->event)
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	461a      	mov	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	429a      	cmp	r2, r3
 800642c:	d118      	bne.n	8006460 <hci_send_req+0x198>
        len -= 1;
 800642e:	6a3b      	ldr	r3, [r7, #32]
 8006430:	3b01      	subs	r3, #1
 8006432:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	695a      	ldr	r2, [r3, #20]
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	429a      	cmp	r2, r3
 800643c:	bf28      	it	cs
 800643e:	461a      	movcs	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6918      	ldr	r0, [r3, #16]
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	1c59      	adds	r1, r3, #1
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	461a      	mov	r2, r3
 8006452:	f000 fbaf 	bl	8006bb4 <memcpy>
        goto done;
 8006456:	e03a      	b.n	80064ce <hci_send_req+0x206>
      }
    }
 8006458:	bf00      	nop
 800645a:	e002      	b.n	8006462 <hci_send_req+0x19a>
          break;
 800645c:	bf00      	nop
 800645e:	e000      	b.n	8006462 <hci_send_req+0x19a>
          break;
 8006460:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8006462:	4824      	ldr	r0, [pc, #144]	; (80064f4 <hci_send_req+0x22c>)
 8006464:	f000 f8d0 	bl	8006608 <list_is_empty>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00d      	beq.n	800648a <hci_send_req+0x1c2>
 800646e:	4820      	ldr	r0, [pc, #128]	; (80064f0 <hci_send_req+0x228>)
 8006470:	f000 f8ca 	bl	8006608 <list_is_empty>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d007      	beq.n	800648a <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	4619      	mov	r1, r3
 800647e:	481d      	ldr	r0, [pc, #116]	; (80064f4 <hci_send_req+0x22c>)
 8006480:	f000 f906 	bl	8006690 <list_insert_tail>
      hciReadPacket=NULL;
 8006484:	2300      	movs	r3, #0
 8006486:	613b      	str	r3, [r7, #16]
 8006488:	e008      	b.n	800649c <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	f107 0308 	add.w	r3, r7, #8
 8006490:	4611      	mov	r1, r2
 8006492:	4618      	mov	r0, r3
 8006494:	f000 f8fc 	bl	8006690 <list_insert_tail>
      hciReadPacket=NULL;
 8006498:	2300      	movs	r3, #0
 800649a:	613b      	str	r3, [r7, #16]
  {
 800649c:	e740      	b.n	8006320 <hci_send_req+0x58>
        goto failed;
 800649e:	bf00      	nop
 80064a0:	e004      	b.n	80064ac <hci_send_req+0x1e4>
        goto failed;
 80064a2:	bf00      	nop
 80064a4:	e002      	b.n	80064ac <hci_send_req+0x1e4>
          goto failed;
 80064a6:	bf00      	nop
 80064a8:	e000      	b.n	80064ac <hci_send_req+0x1e4>
          goto failed;
 80064aa:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d004      	beq.n	80064bc <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	4619      	mov	r1, r3
 80064b6:	480f      	ldr	r0, [pc, #60]	; (80064f4 <hci_send_req+0x22c>)
 80064b8:	f000 f8c6 	bl	8006648 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80064bc:	f107 0308 	add.w	r3, r7, #8
 80064c0:	4619      	mov	r1, r3
 80064c2:	480b      	ldr	r0, [pc, #44]	; (80064f0 <hci_send_req+0x228>)
 80064c4:	f7ff fe66 	bl	8006194 <move_list>

  return -1;
 80064c8:	f04f 33ff 	mov.w	r3, #4294967295
 80064cc:	e00b      	b.n	80064e6 <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	4619      	mov	r1, r3
 80064d2:	4808      	ldr	r0, [pc, #32]	; (80064f4 <hci_send_req+0x22c>)
 80064d4:	f000 f8b8 	bl	8006648 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80064d8:	f107 0308 	add.w	r3, r7, #8
 80064dc:	4619      	mov	r1, r3
 80064de:	4804      	ldr	r0, [pc, #16]	; (80064f0 <hci_send_req+0x228>)
 80064e0:	f7ff fe58 	bl	8006194 <move_list>

  return 0;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3738      	adds	r7, #56	; 0x38
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	20000714 	.word	0x20000714
 80064f4:	2000070c 	.word	0x2000070c

080064f8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 80064fe:	2300      	movs	r3, #0
 8006500:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8006502:	e013      	b.n	800652c <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8006504:	1d3b      	adds	r3, r7, #4
 8006506:	4619      	mov	r1, r3
 8006508:	480d      	ldr	r0, [pc, #52]	; (8006540 <hci_user_evt_proc+0x48>)
 800650a:	f000 f904 	bl	8006716 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800650e:	4b0d      	ldr	r3, [pc, #52]	; (8006544 <hci_user_evt_proc+0x4c>)
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d005      	beq.n	8006522 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8006516:	4b0b      	ldr	r3, [pc, #44]	; (8006544 <hci_user_evt_proc+0x4c>)
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	3208      	adds	r2, #8
 800651e:	4610      	mov	r0, r2
 8006520:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4619      	mov	r1, r3
 8006526:	4808      	ldr	r0, [pc, #32]	; (8006548 <hci_user_evt_proc+0x50>)
 8006528:	f000 f8b2 	bl	8006690 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800652c:	4804      	ldr	r0, [pc, #16]	; (8006540 <hci_user_evt_proc+0x48>)
 800652e:	f000 f86b 	bl	8006608 <list_is_empty>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d0e5      	beq.n	8006504 <hci_user_evt_proc+0xc>
  }
}
 8006538:	bf00      	nop
 800653a:	3708      	adds	r7, #8
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	20000714 	.word	0x20000714
 8006544:	200005e8 	.word	0x200005e8
 8006548:	2000070c 	.word	0x2000070c

0800654c <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8006554:	2300      	movs	r3, #0
 8006556:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8006558:	2300      	movs	r3, #0
 800655a:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800655c:	481f      	ldr	r0, [pc, #124]	; (80065dc <hci_notify_asynch_evt+0x90>)
 800655e:	f000 f853 	bl	8006608 <list_is_empty>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d132      	bne.n	80065ce <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8006568:	f107 030c 	add.w	r3, r7, #12
 800656c:	4619      	mov	r1, r3
 800656e:	481b      	ldr	r0, [pc, #108]	; (80065dc <hci_notify_asynch_evt+0x90>)
 8006570:	f000 f8d1 	bl	8006716 <list_remove_head>
    
    if (hciContext.io.Receive)
 8006574:	4b1a      	ldr	r3, [pc, #104]	; (80065e0 <hci_notify_asynch_evt+0x94>)
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d02a      	beq.n	80065d2 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800657c:	4b18      	ldr	r3, [pc, #96]	; (80065e0 <hci_notify_asynch_evt+0x94>)
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	3208      	adds	r2, #8
 8006584:	2180      	movs	r1, #128	; 0x80
 8006586:	4610      	mov	r0, r2
 8006588:	4798      	blx	r3
 800658a:	4603      	mov	r3, r0
 800658c:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800658e:	7cfb      	ldrb	r3, [r7, #19]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d016      	beq.n	80065c2 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	7cfa      	ldrb	r2, [r7, #19]
 8006598:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	4618      	mov	r0, r3
 80065a0:	f7ff fd97 	bl	80060d2 <verify_packet>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d105      	bne.n	80065b6 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	4619      	mov	r1, r3
 80065ae:	480d      	ldr	r0, [pc, #52]	; (80065e4 <hci_notify_asynch_evt+0x98>)
 80065b0:	f000 f86e 	bl	8006690 <list_insert_tail>
 80065b4:	e00d      	b.n	80065d2 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	4619      	mov	r1, r3
 80065ba:	4808      	ldr	r0, [pc, #32]	; (80065dc <hci_notify_asynch_evt+0x90>)
 80065bc:	f000 f844 	bl	8006648 <list_insert_head>
 80065c0:	e007      	b.n	80065d2 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	4619      	mov	r1, r3
 80065c6:	4805      	ldr	r0, [pc, #20]	; (80065dc <hci_notify_asynch_evt+0x90>)
 80065c8:	f000 f83e 	bl	8006648 <list_insert_head>
 80065cc:	e001      	b.n	80065d2 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 80065ce:	2301      	movs	r3, #1
 80065d0:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80065d2:	697b      	ldr	r3, [r7, #20]

}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3718      	adds	r7, #24
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	2000070c 	.word	0x2000070c
 80065e0:	200005e8 	.word	0x200005e8
 80065e4:	20000714 	.word	0x20000714

080065e8 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	605a      	str	r2, [r3, #4]
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8006608:	b480      	push	{r7}
 800660a:	b087      	sub	sp, #28
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006610:	f3ef 8310 	mrs	r3, PRIMASK
 8006614:	60fb      	str	r3, [r7, #12]
  return(result);
 8006616:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006618:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800661a:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	429a      	cmp	r2, r3
 8006624:	d102      	bne.n	800662c <list_is_empty+0x24>
  {
    return_value = 1;
 8006626:	2301      	movs	r3, #1
 8006628:	75fb      	strb	r3, [r7, #23]
 800662a:	e001      	b.n	8006630 <list_is_empty+0x28>
  }
  else
  {
    return_value = 0;
 800662c:	2300      	movs	r3, #0
 800662e:	75fb      	strb	r3, [r7, #23]
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800663a:	7dfb      	ldrb	r3, [r7, #23]
}
 800663c:	4618      	mov	r0, r3
 800663e:	371c      	adds	r7, #28
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8006648:	b480      	push	{r7}
 800664a:	b087      	sub	sp, #28
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006652:	f3ef 8310 	mrs	r3, PRIMASK
 8006656:	60fb      	str	r3, [r7, #12]
  return(result);
 8006658:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800665a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800665c:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	605a      	str	r2, [r3, #4]
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8006684:	bf00      	nop
 8006686:	371c      	adds	r7, #28
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8006690:	b480      	push	{r7}
 8006692:	b087      	sub	sp, #28
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800669a:	f3ef 8310 	mrs	r3, PRIMASK
 800669e:	60fb      	str	r3, [r7, #12]
  return(result);
 80066a0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80066a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80066a4:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685a      	ldr	r2, [r3, #4]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	683a      	ldr	r2, [r7, #0]
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80066cc:	bf00      	nop
 80066ce:	371c      	adds	r7, #28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 80066d8:	b480      	push	{r7}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066e0:	f3ef 8310 	mrs	r3, PRIMASK
 80066e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80066e6:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80066e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80066ea:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	6812      	ldr	r2, [r2, #0]
 80066f4:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	6852      	ldr	r2, [r2, #4]
 80066fe:	605a      	str	r2, [r3, #4]
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800670a:	bf00      	nop
 800670c:	371c      	adds	r7, #28
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b086      	sub	sp, #24
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
 800671e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006720:	f3ef 8310 	mrs	r3, PRIMASK
 8006724:	60fb      	str	r3, [r7, #12]
  return(result);
 8006726:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006728:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800672a:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4618      	mov	r0, r3
 800673a:	f7ff ffcd 	bl	80066d8 <list_remove_node>
  (*node)->next = NULL;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2200      	movs	r2, #0
 8006744:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2200      	movs	r2, #0
 800674c:	605a      	str	r2, [r3, #4]
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8006758:	bf00      	nop
 800675a:	3718      	adds	r7, #24
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800676a:	f3ef 8310 	mrs	r3, PRIMASK
 800676e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006770:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006772:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006774:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	4618      	mov	r0, r3
 8006784:	f7ff ffa8 	bl	80066d8 <list_remove_node>
  (*node)->next = NULL;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2200      	movs	r2, #0
 800678e:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2200      	movs	r2, #0
 8006796:	605a      	str	r2, [r3, #4]
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80067a2:	bf00      	nop
 80067a4:	3718      	adds	r7, #24
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b089      	sub	sp, #36	; 0x24
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  int size = 0;
 80067b2:	2300      	movs	r3, #0
 80067b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067b6:	f3ef 8310 	mrs	r3, PRIMASK
 80067ba:	613b      	str	r3, [r7, #16]
  return(result);
 80067bc:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80067be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80067c0:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80067c8:	e005      	b.n	80067d6 <list_get_size+0x2c>
  {
    size++;
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	3301      	adds	r3, #1
 80067ce:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80067d6:	69ba      	ldr	r2, [r7, #24]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d1f5      	bne.n	80067ca <list_get_size+0x20>
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 80067e8:	69fb      	ldr	r3, [r7, #28]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3724      	adds	r7, #36	; 0x24
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b084      	sub	sp, #16
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 8006802:	215c      	movs	r1, #92	; 0x5c
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fb74 	bl	8006ef2 <strrchr>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d007      	beq.n	8006820 <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 8006810:	215c      	movs	r1, #92	; 0x5c
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fb6d 	bl	8006ef2 <strrchr>
 8006818:	4603      	mov	r3, r0
 800681a:	3301      	adds	r3, #1
 800681c:	60fb      	str	r3, [r7, #12]
 800681e:	e00d      	b.n	800683c <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 8006820:	212f      	movs	r1, #47	; 0x2f
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fb65 	bl	8006ef2 <strrchr>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d006      	beq.n	800683c <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 800682e:	212f      	movs	r1, #47	; 0x2f
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fb5e 	bl	8006ef2 <strrchr>
 8006836:	4603      	mov	r3, r0
 8006838:	3301      	adds	r3, #1
 800683a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800683c:	68fb      	ldr	r3, [r7, #12]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
	...

08006848 <__errno>:
 8006848:	4b01      	ldr	r3, [pc, #4]	; (8006850 <__errno+0x8>)
 800684a:	6818      	ldr	r0, [r3, #0]
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	20000024 	.word	0x20000024

08006854 <__sflush_r>:
 8006854:	898a      	ldrh	r2, [r1, #12]
 8006856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800685a:	4605      	mov	r5, r0
 800685c:	0710      	lsls	r0, r2, #28
 800685e:	460c      	mov	r4, r1
 8006860:	d458      	bmi.n	8006914 <__sflush_r+0xc0>
 8006862:	684b      	ldr	r3, [r1, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	dc05      	bgt.n	8006874 <__sflush_r+0x20>
 8006868:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800686a:	2b00      	cmp	r3, #0
 800686c:	dc02      	bgt.n	8006874 <__sflush_r+0x20>
 800686e:	2000      	movs	r0, #0
 8006870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006874:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006876:	2e00      	cmp	r6, #0
 8006878:	d0f9      	beq.n	800686e <__sflush_r+0x1a>
 800687a:	2300      	movs	r3, #0
 800687c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006880:	682f      	ldr	r7, [r5, #0]
 8006882:	6a21      	ldr	r1, [r4, #32]
 8006884:	602b      	str	r3, [r5, #0]
 8006886:	d032      	beq.n	80068ee <__sflush_r+0x9a>
 8006888:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800688a:	89a3      	ldrh	r3, [r4, #12]
 800688c:	075a      	lsls	r2, r3, #29
 800688e:	d505      	bpl.n	800689c <__sflush_r+0x48>
 8006890:	6863      	ldr	r3, [r4, #4]
 8006892:	1ac0      	subs	r0, r0, r3
 8006894:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006896:	b10b      	cbz	r3, 800689c <__sflush_r+0x48>
 8006898:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800689a:	1ac0      	subs	r0, r0, r3
 800689c:	2300      	movs	r3, #0
 800689e:	4602      	mov	r2, r0
 80068a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068a2:	6a21      	ldr	r1, [r4, #32]
 80068a4:	4628      	mov	r0, r5
 80068a6:	47b0      	blx	r6
 80068a8:	1c43      	adds	r3, r0, #1
 80068aa:	89a3      	ldrh	r3, [r4, #12]
 80068ac:	d106      	bne.n	80068bc <__sflush_r+0x68>
 80068ae:	6829      	ldr	r1, [r5, #0]
 80068b0:	291d      	cmp	r1, #29
 80068b2:	d848      	bhi.n	8006946 <__sflush_r+0xf2>
 80068b4:	4a29      	ldr	r2, [pc, #164]	; (800695c <__sflush_r+0x108>)
 80068b6:	40ca      	lsrs	r2, r1
 80068b8:	07d6      	lsls	r6, r2, #31
 80068ba:	d544      	bpl.n	8006946 <__sflush_r+0xf2>
 80068bc:	2200      	movs	r2, #0
 80068be:	6062      	str	r2, [r4, #4]
 80068c0:	04d9      	lsls	r1, r3, #19
 80068c2:	6922      	ldr	r2, [r4, #16]
 80068c4:	6022      	str	r2, [r4, #0]
 80068c6:	d504      	bpl.n	80068d2 <__sflush_r+0x7e>
 80068c8:	1c42      	adds	r2, r0, #1
 80068ca:	d101      	bne.n	80068d0 <__sflush_r+0x7c>
 80068cc:	682b      	ldr	r3, [r5, #0]
 80068ce:	b903      	cbnz	r3, 80068d2 <__sflush_r+0x7e>
 80068d0:	6560      	str	r0, [r4, #84]	; 0x54
 80068d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068d4:	602f      	str	r7, [r5, #0]
 80068d6:	2900      	cmp	r1, #0
 80068d8:	d0c9      	beq.n	800686e <__sflush_r+0x1a>
 80068da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068de:	4299      	cmp	r1, r3
 80068e0:	d002      	beq.n	80068e8 <__sflush_r+0x94>
 80068e2:	4628      	mov	r0, r5
 80068e4:	f000 f97a 	bl	8006bdc <_free_r>
 80068e8:	2000      	movs	r0, #0
 80068ea:	6360      	str	r0, [r4, #52]	; 0x34
 80068ec:	e7c0      	b.n	8006870 <__sflush_r+0x1c>
 80068ee:	2301      	movs	r3, #1
 80068f0:	4628      	mov	r0, r5
 80068f2:	47b0      	blx	r6
 80068f4:	1c41      	adds	r1, r0, #1
 80068f6:	d1c8      	bne.n	800688a <__sflush_r+0x36>
 80068f8:	682b      	ldr	r3, [r5, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d0c5      	beq.n	800688a <__sflush_r+0x36>
 80068fe:	2b1d      	cmp	r3, #29
 8006900:	d001      	beq.n	8006906 <__sflush_r+0xb2>
 8006902:	2b16      	cmp	r3, #22
 8006904:	d101      	bne.n	800690a <__sflush_r+0xb6>
 8006906:	602f      	str	r7, [r5, #0]
 8006908:	e7b1      	b.n	800686e <__sflush_r+0x1a>
 800690a:	89a3      	ldrh	r3, [r4, #12]
 800690c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006910:	81a3      	strh	r3, [r4, #12]
 8006912:	e7ad      	b.n	8006870 <__sflush_r+0x1c>
 8006914:	690f      	ldr	r7, [r1, #16]
 8006916:	2f00      	cmp	r7, #0
 8006918:	d0a9      	beq.n	800686e <__sflush_r+0x1a>
 800691a:	0793      	lsls	r3, r2, #30
 800691c:	680e      	ldr	r6, [r1, #0]
 800691e:	bf08      	it	eq
 8006920:	694b      	ldreq	r3, [r1, #20]
 8006922:	600f      	str	r7, [r1, #0]
 8006924:	bf18      	it	ne
 8006926:	2300      	movne	r3, #0
 8006928:	eba6 0807 	sub.w	r8, r6, r7
 800692c:	608b      	str	r3, [r1, #8]
 800692e:	f1b8 0f00 	cmp.w	r8, #0
 8006932:	dd9c      	ble.n	800686e <__sflush_r+0x1a>
 8006934:	4643      	mov	r3, r8
 8006936:	463a      	mov	r2, r7
 8006938:	6a21      	ldr	r1, [r4, #32]
 800693a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800693c:	4628      	mov	r0, r5
 800693e:	47b0      	blx	r6
 8006940:	2800      	cmp	r0, #0
 8006942:	dc06      	bgt.n	8006952 <__sflush_r+0xfe>
 8006944:	89a3      	ldrh	r3, [r4, #12]
 8006946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800694a:	81a3      	strh	r3, [r4, #12]
 800694c:	f04f 30ff 	mov.w	r0, #4294967295
 8006950:	e78e      	b.n	8006870 <__sflush_r+0x1c>
 8006952:	4407      	add	r7, r0
 8006954:	eba8 0800 	sub.w	r8, r8, r0
 8006958:	e7e9      	b.n	800692e <__sflush_r+0xda>
 800695a:	bf00      	nop
 800695c:	20400001 	.word	0x20400001

08006960 <_fflush_r>:
 8006960:	b538      	push	{r3, r4, r5, lr}
 8006962:	690b      	ldr	r3, [r1, #16]
 8006964:	4605      	mov	r5, r0
 8006966:	460c      	mov	r4, r1
 8006968:	b1db      	cbz	r3, 80069a2 <_fflush_r+0x42>
 800696a:	b118      	cbz	r0, 8006974 <_fflush_r+0x14>
 800696c:	6983      	ldr	r3, [r0, #24]
 800696e:	b90b      	cbnz	r3, 8006974 <_fflush_r+0x14>
 8006970:	f000 f872 	bl	8006a58 <__sinit>
 8006974:	4b0c      	ldr	r3, [pc, #48]	; (80069a8 <_fflush_r+0x48>)
 8006976:	429c      	cmp	r4, r3
 8006978:	d109      	bne.n	800698e <_fflush_r+0x2e>
 800697a:	686c      	ldr	r4, [r5, #4]
 800697c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006980:	b17b      	cbz	r3, 80069a2 <_fflush_r+0x42>
 8006982:	4621      	mov	r1, r4
 8006984:	4628      	mov	r0, r5
 8006986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800698a:	f7ff bf63 	b.w	8006854 <__sflush_r>
 800698e:	4b07      	ldr	r3, [pc, #28]	; (80069ac <_fflush_r+0x4c>)
 8006990:	429c      	cmp	r4, r3
 8006992:	d101      	bne.n	8006998 <_fflush_r+0x38>
 8006994:	68ac      	ldr	r4, [r5, #8]
 8006996:	e7f1      	b.n	800697c <_fflush_r+0x1c>
 8006998:	4b05      	ldr	r3, [pc, #20]	; (80069b0 <_fflush_r+0x50>)
 800699a:	429c      	cmp	r4, r3
 800699c:	bf08      	it	eq
 800699e:	68ec      	ldreq	r4, [r5, #12]
 80069a0:	e7ec      	b.n	800697c <_fflush_r+0x1c>
 80069a2:	2000      	movs	r0, #0
 80069a4:	bd38      	pop	{r3, r4, r5, pc}
 80069a6:	bf00      	nop
 80069a8:	08007f80 	.word	0x08007f80
 80069ac:	08007fa0 	.word	0x08007fa0
 80069b0:	08007f60 	.word	0x08007f60

080069b4 <fflush>:
 80069b4:	4601      	mov	r1, r0
 80069b6:	b920      	cbnz	r0, 80069c2 <fflush+0xe>
 80069b8:	4b04      	ldr	r3, [pc, #16]	; (80069cc <fflush+0x18>)
 80069ba:	4905      	ldr	r1, [pc, #20]	; (80069d0 <fflush+0x1c>)
 80069bc:	6818      	ldr	r0, [r3, #0]
 80069be:	f000 b8b7 	b.w	8006b30 <_fwalk_reent>
 80069c2:	4b04      	ldr	r3, [pc, #16]	; (80069d4 <fflush+0x20>)
 80069c4:	6818      	ldr	r0, [r3, #0]
 80069c6:	f7ff bfcb 	b.w	8006960 <_fflush_r>
 80069ca:	bf00      	nop
 80069cc:	08007fc0 	.word	0x08007fc0
 80069d0:	08006961 	.word	0x08006961
 80069d4:	20000024 	.word	0x20000024

080069d8 <std>:
 80069d8:	2300      	movs	r3, #0
 80069da:	b510      	push	{r4, lr}
 80069dc:	4604      	mov	r4, r0
 80069de:	e9c0 3300 	strd	r3, r3, [r0]
 80069e2:	6083      	str	r3, [r0, #8]
 80069e4:	8181      	strh	r1, [r0, #12]
 80069e6:	6643      	str	r3, [r0, #100]	; 0x64
 80069e8:	81c2      	strh	r2, [r0, #14]
 80069ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069ee:	6183      	str	r3, [r0, #24]
 80069f0:	4619      	mov	r1, r3
 80069f2:	2208      	movs	r2, #8
 80069f4:	305c      	adds	r0, #92	; 0x5c
 80069f6:	f000 f8e8 	bl	8006bca <memset>
 80069fa:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <std+0x38>)
 80069fc:	6263      	str	r3, [r4, #36]	; 0x24
 80069fe:	4b05      	ldr	r3, [pc, #20]	; (8006a14 <std+0x3c>)
 8006a00:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a02:	4b05      	ldr	r3, [pc, #20]	; (8006a18 <std+0x40>)
 8006a04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a06:	4b05      	ldr	r3, [pc, #20]	; (8006a1c <std+0x44>)
 8006a08:	6224      	str	r4, [r4, #32]
 8006a0a:	6323      	str	r3, [r4, #48]	; 0x30
 8006a0c:	bd10      	pop	{r4, pc}
 8006a0e:	bf00      	nop
 8006a10:	08006e6d 	.word	0x08006e6d
 8006a14:	08006e8f 	.word	0x08006e8f
 8006a18:	08006ec7 	.word	0x08006ec7
 8006a1c:	08006eeb 	.word	0x08006eeb

08006a20 <_cleanup_r>:
 8006a20:	4901      	ldr	r1, [pc, #4]	; (8006a28 <_cleanup_r+0x8>)
 8006a22:	f000 b885 	b.w	8006b30 <_fwalk_reent>
 8006a26:	bf00      	nop
 8006a28:	08006961 	.word	0x08006961

08006a2c <__sfmoreglue>:
 8006a2c:	b570      	push	{r4, r5, r6, lr}
 8006a2e:	1e4a      	subs	r2, r1, #1
 8006a30:	2568      	movs	r5, #104	; 0x68
 8006a32:	4355      	muls	r5, r2
 8006a34:	460e      	mov	r6, r1
 8006a36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006a3a:	f000 f91d 	bl	8006c78 <_malloc_r>
 8006a3e:	4604      	mov	r4, r0
 8006a40:	b140      	cbz	r0, 8006a54 <__sfmoreglue+0x28>
 8006a42:	2100      	movs	r1, #0
 8006a44:	e9c0 1600 	strd	r1, r6, [r0]
 8006a48:	300c      	adds	r0, #12
 8006a4a:	60a0      	str	r0, [r4, #8]
 8006a4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a50:	f000 f8bb 	bl	8006bca <memset>
 8006a54:	4620      	mov	r0, r4
 8006a56:	bd70      	pop	{r4, r5, r6, pc}

08006a58 <__sinit>:
 8006a58:	6983      	ldr	r3, [r0, #24]
 8006a5a:	b510      	push	{r4, lr}
 8006a5c:	4604      	mov	r4, r0
 8006a5e:	bb33      	cbnz	r3, 8006aae <__sinit+0x56>
 8006a60:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006a64:	6503      	str	r3, [r0, #80]	; 0x50
 8006a66:	4b12      	ldr	r3, [pc, #72]	; (8006ab0 <__sinit+0x58>)
 8006a68:	4a12      	ldr	r2, [pc, #72]	; (8006ab4 <__sinit+0x5c>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6282      	str	r2, [r0, #40]	; 0x28
 8006a6e:	4298      	cmp	r0, r3
 8006a70:	bf04      	itt	eq
 8006a72:	2301      	moveq	r3, #1
 8006a74:	6183      	streq	r3, [r0, #24]
 8006a76:	f000 f81f 	bl	8006ab8 <__sfp>
 8006a7a:	6060      	str	r0, [r4, #4]
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f000 f81b 	bl	8006ab8 <__sfp>
 8006a82:	60a0      	str	r0, [r4, #8]
 8006a84:	4620      	mov	r0, r4
 8006a86:	f000 f817 	bl	8006ab8 <__sfp>
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	60e0      	str	r0, [r4, #12]
 8006a8e:	2104      	movs	r1, #4
 8006a90:	6860      	ldr	r0, [r4, #4]
 8006a92:	f7ff ffa1 	bl	80069d8 <std>
 8006a96:	2201      	movs	r2, #1
 8006a98:	2109      	movs	r1, #9
 8006a9a:	68a0      	ldr	r0, [r4, #8]
 8006a9c:	f7ff ff9c 	bl	80069d8 <std>
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	2112      	movs	r1, #18
 8006aa4:	68e0      	ldr	r0, [r4, #12]
 8006aa6:	f7ff ff97 	bl	80069d8 <std>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	61a3      	str	r3, [r4, #24]
 8006aae:	bd10      	pop	{r4, pc}
 8006ab0:	08007fc0 	.word	0x08007fc0
 8006ab4:	08006a21 	.word	0x08006a21

08006ab8 <__sfp>:
 8006ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aba:	4b1b      	ldr	r3, [pc, #108]	; (8006b28 <__sfp+0x70>)
 8006abc:	681e      	ldr	r6, [r3, #0]
 8006abe:	69b3      	ldr	r3, [r6, #24]
 8006ac0:	4607      	mov	r7, r0
 8006ac2:	b913      	cbnz	r3, 8006aca <__sfp+0x12>
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	f7ff ffc7 	bl	8006a58 <__sinit>
 8006aca:	3648      	adds	r6, #72	; 0x48
 8006acc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	d503      	bpl.n	8006adc <__sfp+0x24>
 8006ad4:	6833      	ldr	r3, [r6, #0]
 8006ad6:	b133      	cbz	r3, 8006ae6 <__sfp+0x2e>
 8006ad8:	6836      	ldr	r6, [r6, #0]
 8006ada:	e7f7      	b.n	8006acc <__sfp+0x14>
 8006adc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ae0:	b16d      	cbz	r5, 8006afe <__sfp+0x46>
 8006ae2:	3468      	adds	r4, #104	; 0x68
 8006ae4:	e7f4      	b.n	8006ad0 <__sfp+0x18>
 8006ae6:	2104      	movs	r1, #4
 8006ae8:	4638      	mov	r0, r7
 8006aea:	f7ff ff9f 	bl	8006a2c <__sfmoreglue>
 8006aee:	6030      	str	r0, [r6, #0]
 8006af0:	2800      	cmp	r0, #0
 8006af2:	d1f1      	bne.n	8006ad8 <__sfp+0x20>
 8006af4:	230c      	movs	r3, #12
 8006af6:	603b      	str	r3, [r7, #0]
 8006af8:	4604      	mov	r4, r0
 8006afa:	4620      	mov	r0, r4
 8006afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006afe:	4b0b      	ldr	r3, [pc, #44]	; (8006b2c <__sfp+0x74>)
 8006b00:	6665      	str	r5, [r4, #100]	; 0x64
 8006b02:	e9c4 5500 	strd	r5, r5, [r4]
 8006b06:	60a5      	str	r5, [r4, #8]
 8006b08:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006b0c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006b10:	2208      	movs	r2, #8
 8006b12:	4629      	mov	r1, r5
 8006b14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006b18:	f000 f857 	bl	8006bca <memset>
 8006b1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006b24:	e7e9      	b.n	8006afa <__sfp+0x42>
 8006b26:	bf00      	nop
 8006b28:	08007fc0 	.word	0x08007fc0
 8006b2c:	ffff0001 	.word	0xffff0001

08006b30 <_fwalk_reent>:
 8006b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b34:	4680      	mov	r8, r0
 8006b36:	4689      	mov	r9, r1
 8006b38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b3c:	2600      	movs	r6, #0
 8006b3e:	b914      	cbnz	r4, 8006b46 <_fwalk_reent+0x16>
 8006b40:	4630      	mov	r0, r6
 8006b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b46:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006b4a:	3f01      	subs	r7, #1
 8006b4c:	d501      	bpl.n	8006b52 <_fwalk_reent+0x22>
 8006b4e:	6824      	ldr	r4, [r4, #0]
 8006b50:	e7f5      	b.n	8006b3e <_fwalk_reent+0xe>
 8006b52:	89ab      	ldrh	r3, [r5, #12]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d907      	bls.n	8006b68 <_fwalk_reent+0x38>
 8006b58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	d003      	beq.n	8006b68 <_fwalk_reent+0x38>
 8006b60:	4629      	mov	r1, r5
 8006b62:	4640      	mov	r0, r8
 8006b64:	47c8      	blx	r9
 8006b66:	4306      	orrs	r6, r0
 8006b68:	3568      	adds	r5, #104	; 0x68
 8006b6a:	e7ee      	b.n	8006b4a <_fwalk_reent+0x1a>

08006b6c <__libc_init_array>:
 8006b6c:	b570      	push	{r4, r5, r6, lr}
 8006b6e:	4e0d      	ldr	r6, [pc, #52]	; (8006ba4 <__libc_init_array+0x38>)
 8006b70:	4c0d      	ldr	r4, [pc, #52]	; (8006ba8 <__libc_init_array+0x3c>)
 8006b72:	1ba4      	subs	r4, r4, r6
 8006b74:	10a4      	asrs	r4, r4, #2
 8006b76:	2500      	movs	r5, #0
 8006b78:	42a5      	cmp	r5, r4
 8006b7a:	d109      	bne.n	8006b90 <__libc_init_array+0x24>
 8006b7c:	4e0b      	ldr	r6, [pc, #44]	; (8006bac <__libc_init_array+0x40>)
 8006b7e:	4c0c      	ldr	r4, [pc, #48]	; (8006bb0 <__libc_init_array+0x44>)
 8006b80:	f000 ff18 	bl	80079b4 <_init>
 8006b84:	1ba4      	subs	r4, r4, r6
 8006b86:	10a4      	asrs	r4, r4, #2
 8006b88:	2500      	movs	r5, #0
 8006b8a:	42a5      	cmp	r5, r4
 8006b8c:	d105      	bne.n	8006b9a <__libc_init_array+0x2e>
 8006b8e:	bd70      	pop	{r4, r5, r6, pc}
 8006b90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b94:	4798      	blx	r3
 8006b96:	3501      	adds	r5, #1
 8006b98:	e7ee      	b.n	8006b78 <__libc_init_array+0xc>
 8006b9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b9e:	4798      	blx	r3
 8006ba0:	3501      	adds	r5, #1
 8006ba2:	e7f2      	b.n	8006b8a <__libc_init_array+0x1e>
 8006ba4:	0800810c 	.word	0x0800810c
 8006ba8:	0800810c 	.word	0x0800810c
 8006bac:	0800810c 	.word	0x0800810c
 8006bb0:	08008110 	.word	0x08008110

08006bb4 <memcpy>:
 8006bb4:	b510      	push	{r4, lr}
 8006bb6:	1e43      	subs	r3, r0, #1
 8006bb8:	440a      	add	r2, r1
 8006bba:	4291      	cmp	r1, r2
 8006bbc:	d100      	bne.n	8006bc0 <memcpy+0xc>
 8006bbe:	bd10      	pop	{r4, pc}
 8006bc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bc8:	e7f7      	b.n	8006bba <memcpy+0x6>

08006bca <memset>:
 8006bca:	4402      	add	r2, r0
 8006bcc:	4603      	mov	r3, r0
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d100      	bne.n	8006bd4 <memset+0xa>
 8006bd2:	4770      	bx	lr
 8006bd4:	f803 1b01 	strb.w	r1, [r3], #1
 8006bd8:	e7f9      	b.n	8006bce <memset+0x4>
	...

08006bdc <_free_r>:
 8006bdc:	b538      	push	{r3, r4, r5, lr}
 8006bde:	4605      	mov	r5, r0
 8006be0:	2900      	cmp	r1, #0
 8006be2:	d045      	beq.n	8006c70 <_free_r+0x94>
 8006be4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006be8:	1f0c      	subs	r4, r1, #4
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	bfb8      	it	lt
 8006bee:	18e4      	addlt	r4, r4, r3
 8006bf0:	f000 fb92 	bl	8007318 <__malloc_lock>
 8006bf4:	4a1f      	ldr	r2, [pc, #124]	; (8006c74 <_free_r+0x98>)
 8006bf6:	6813      	ldr	r3, [r2, #0]
 8006bf8:	4610      	mov	r0, r2
 8006bfa:	b933      	cbnz	r3, 8006c0a <_free_r+0x2e>
 8006bfc:	6063      	str	r3, [r4, #4]
 8006bfe:	6014      	str	r4, [r2, #0]
 8006c00:	4628      	mov	r0, r5
 8006c02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c06:	f000 bb88 	b.w	800731a <__malloc_unlock>
 8006c0a:	42a3      	cmp	r3, r4
 8006c0c:	d90c      	bls.n	8006c28 <_free_r+0x4c>
 8006c0e:	6821      	ldr	r1, [r4, #0]
 8006c10:	1862      	adds	r2, r4, r1
 8006c12:	4293      	cmp	r3, r2
 8006c14:	bf04      	itt	eq
 8006c16:	681a      	ldreq	r2, [r3, #0]
 8006c18:	685b      	ldreq	r3, [r3, #4]
 8006c1a:	6063      	str	r3, [r4, #4]
 8006c1c:	bf04      	itt	eq
 8006c1e:	1852      	addeq	r2, r2, r1
 8006c20:	6022      	streq	r2, [r4, #0]
 8006c22:	6004      	str	r4, [r0, #0]
 8006c24:	e7ec      	b.n	8006c00 <_free_r+0x24>
 8006c26:	4613      	mov	r3, r2
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	b10a      	cbz	r2, 8006c30 <_free_r+0x54>
 8006c2c:	42a2      	cmp	r2, r4
 8006c2e:	d9fa      	bls.n	8006c26 <_free_r+0x4a>
 8006c30:	6819      	ldr	r1, [r3, #0]
 8006c32:	1858      	adds	r0, r3, r1
 8006c34:	42a0      	cmp	r0, r4
 8006c36:	d10b      	bne.n	8006c50 <_free_r+0x74>
 8006c38:	6820      	ldr	r0, [r4, #0]
 8006c3a:	4401      	add	r1, r0
 8006c3c:	1858      	adds	r0, r3, r1
 8006c3e:	4282      	cmp	r2, r0
 8006c40:	6019      	str	r1, [r3, #0]
 8006c42:	d1dd      	bne.n	8006c00 <_free_r+0x24>
 8006c44:	6810      	ldr	r0, [r2, #0]
 8006c46:	6852      	ldr	r2, [r2, #4]
 8006c48:	605a      	str	r2, [r3, #4]
 8006c4a:	4401      	add	r1, r0
 8006c4c:	6019      	str	r1, [r3, #0]
 8006c4e:	e7d7      	b.n	8006c00 <_free_r+0x24>
 8006c50:	d902      	bls.n	8006c58 <_free_r+0x7c>
 8006c52:	230c      	movs	r3, #12
 8006c54:	602b      	str	r3, [r5, #0]
 8006c56:	e7d3      	b.n	8006c00 <_free_r+0x24>
 8006c58:	6820      	ldr	r0, [r4, #0]
 8006c5a:	1821      	adds	r1, r4, r0
 8006c5c:	428a      	cmp	r2, r1
 8006c5e:	bf04      	itt	eq
 8006c60:	6811      	ldreq	r1, [r2, #0]
 8006c62:	6852      	ldreq	r2, [r2, #4]
 8006c64:	6062      	str	r2, [r4, #4]
 8006c66:	bf04      	itt	eq
 8006c68:	1809      	addeq	r1, r1, r0
 8006c6a:	6021      	streq	r1, [r4, #0]
 8006c6c:	605c      	str	r4, [r3, #4]
 8006c6e:	e7c7      	b.n	8006c00 <_free_r+0x24>
 8006c70:	bd38      	pop	{r3, r4, r5, pc}
 8006c72:	bf00      	nop
 8006c74:	20000608 	.word	0x20000608

08006c78 <_malloc_r>:
 8006c78:	b570      	push	{r4, r5, r6, lr}
 8006c7a:	1ccd      	adds	r5, r1, #3
 8006c7c:	f025 0503 	bic.w	r5, r5, #3
 8006c80:	3508      	adds	r5, #8
 8006c82:	2d0c      	cmp	r5, #12
 8006c84:	bf38      	it	cc
 8006c86:	250c      	movcc	r5, #12
 8006c88:	2d00      	cmp	r5, #0
 8006c8a:	4606      	mov	r6, r0
 8006c8c:	db01      	blt.n	8006c92 <_malloc_r+0x1a>
 8006c8e:	42a9      	cmp	r1, r5
 8006c90:	d903      	bls.n	8006c9a <_malloc_r+0x22>
 8006c92:	230c      	movs	r3, #12
 8006c94:	6033      	str	r3, [r6, #0]
 8006c96:	2000      	movs	r0, #0
 8006c98:	bd70      	pop	{r4, r5, r6, pc}
 8006c9a:	f000 fb3d 	bl	8007318 <__malloc_lock>
 8006c9e:	4a21      	ldr	r2, [pc, #132]	; (8006d24 <_malloc_r+0xac>)
 8006ca0:	6814      	ldr	r4, [r2, #0]
 8006ca2:	4621      	mov	r1, r4
 8006ca4:	b991      	cbnz	r1, 8006ccc <_malloc_r+0x54>
 8006ca6:	4c20      	ldr	r4, [pc, #128]	; (8006d28 <_malloc_r+0xb0>)
 8006ca8:	6823      	ldr	r3, [r4, #0]
 8006caa:	b91b      	cbnz	r3, 8006cb4 <_malloc_r+0x3c>
 8006cac:	4630      	mov	r0, r6
 8006cae:	f000 f8cd 	bl	8006e4c <_sbrk_r>
 8006cb2:	6020      	str	r0, [r4, #0]
 8006cb4:	4629      	mov	r1, r5
 8006cb6:	4630      	mov	r0, r6
 8006cb8:	f000 f8c8 	bl	8006e4c <_sbrk_r>
 8006cbc:	1c43      	adds	r3, r0, #1
 8006cbe:	d124      	bne.n	8006d0a <_malloc_r+0x92>
 8006cc0:	230c      	movs	r3, #12
 8006cc2:	6033      	str	r3, [r6, #0]
 8006cc4:	4630      	mov	r0, r6
 8006cc6:	f000 fb28 	bl	800731a <__malloc_unlock>
 8006cca:	e7e4      	b.n	8006c96 <_malloc_r+0x1e>
 8006ccc:	680b      	ldr	r3, [r1, #0]
 8006cce:	1b5b      	subs	r3, r3, r5
 8006cd0:	d418      	bmi.n	8006d04 <_malloc_r+0x8c>
 8006cd2:	2b0b      	cmp	r3, #11
 8006cd4:	d90f      	bls.n	8006cf6 <_malloc_r+0x7e>
 8006cd6:	600b      	str	r3, [r1, #0]
 8006cd8:	50cd      	str	r5, [r1, r3]
 8006cda:	18cc      	adds	r4, r1, r3
 8006cdc:	4630      	mov	r0, r6
 8006cde:	f000 fb1c 	bl	800731a <__malloc_unlock>
 8006ce2:	f104 000b 	add.w	r0, r4, #11
 8006ce6:	1d23      	adds	r3, r4, #4
 8006ce8:	f020 0007 	bic.w	r0, r0, #7
 8006cec:	1ac3      	subs	r3, r0, r3
 8006cee:	d0d3      	beq.n	8006c98 <_malloc_r+0x20>
 8006cf0:	425a      	negs	r2, r3
 8006cf2:	50e2      	str	r2, [r4, r3]
 8006cf4:	e7d0      	b.n	8006c98 <_malloc_r+0x20>
 8006cf6:	428c      	cmp	r4, r1
 8006cf8:	684b      	ldr	r3, [r1, #4]
 8006cfa:	bf16      	itet	ne
 8006cfc:	6063      	strne	r3, [r4, #4]
 8006cfe:	6013      	streq	r3, [r2, #0]
 8006d00:	460c      	movne	r4, r1
 8006d02:	e7eb      	b.n	8006cdc <_malloc_r+0x64>
 8006d04:	460c      	mov	r4, r1
 8006d06:	6849      	ldr	r1, [r1, #4]
 8006d08:	e7cc      	b.n	8006ca4 <_malloc_r+0x2c>
 8006d0a:	1cc4      	adds	r4, r0, #3
 8006d0c:	f024 0403 	bic.w	r4, r4, #3
 8006d10:	42a0      	cmp	r0, r4
 8006d12:	d005      	beq.n	8006d20 <_malloc_r+0xa8>
 8006d14:	1a21      	subs	r1, r4, r0
 8006d16:	4630      	mov	r0, r6
 8006d18:	f000 f898 	bl	8006e4c <_sbrk_r>
 8006d1c:	3001      	adds	r0, #1
 8006d1e:	d0cf      	beq.n	8006cc0 <_malloc_r+0x48>
 8006d20:	6025      	str	r5, [r4, #0]
 8006d22:	e7db      	b.n	8006cdc <_malloc_r+0x64>
 8006d24:	20000608 	.word	0x20000608
 8006d28:	2000060c 	.word	0x2000060c

08006d2c <iprintf>:
 8006d2c:	b40f      	push	{r0, r1, r2, r3}
 8006d2e:	4b0a      	ldr	r3, [pc, #40]	; (8006d58 <iprintf+0x2c>)
 8006d30:	b513      	push	{r0, r1, r4, lr}
 8006d32:	681c      	ldr	r4, [r3, #0]
 8006d34:	b124      	cbz	r4, 8006d40 <iprintf+0x14>
 8006d36:	69a3      	ldr	r3, [r4, #24]
 8006d38:	b913      	cbnz	r3, 8006d40 <iprintf+0x14>
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	f7ff fe8c 	bl	8006a58 <__sinit>
 8006d40:	ab05      	add	r3, sp, #20
 8006d42:	9a04      	ldr	r2, [sp, #16]
 8006d44:	68a1      	ldr	r1, [r4, #8]
 8006d46:	9301      	str	r3, [sp, #4]
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f000 fb11 	bl	8007370 <_vfiprintf_r>
 8006d4e:	b002      	add	sp, #8
 8006d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d54:	b004      	add	sp, #16
 8006d56:	4770      	bx	lr
 8006d58:	20000024 	.word	0x20000024

08006d5c <putchar>:
 8006d5c:	b538      	push	{r3, r4, r5, lr}
 8006d5e:	4b08      	ldr	r3, [pc, #32]	; (8006d80 <putchar+0x24>)
 8006d60:	681c      	ldr	r4, [r3, #0]
 8006d62:	4605      	mov	r5, r0
 8006d64:	b124      	cbz	r4, 8006d70 <putchar+0x14>
 8006d66:	69a3      	ldr	r3, [r4, #24]
 8006d68:	b913      	cbnz	r3, 8006d70 <putchar+0x14>
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	f7ff fe74 	bl	8006a58 <__sinit>
 8006d70:	68a2      	ldr	r2, [r4, #8]
 8006d72:	4629      	mov	r1, r5
 8006d74:	4620      	mov	r0, r4
 8006d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d7a:	f000 bd97 	b.w	80078ac <_putc_r>
 8006d7e:	bf00      	nop
 8006d80:	20000024 	.word	0x20000024

08006d84 <_puts_r>:
 8006d84:	b570      	push	{r4, r5, r6, lr}
 8006d86:	460e      	mov	r6, r1
 8006d88:	4605      	mov	r5, r0
 8006d8a:	b118      	cbz	r0, 8006d94 <_puts_r+0x10>
 8006d8c:	6983      	ldr	r3, [r0, #24]
 8006d8e:	b90b      	cbnz	r3, 8006d94 <_puts_r+0x10>
 8006d90:	f7ff fe62 	bl	8006a58 <__sinit>
 8006d94:	69ab      	ldr	r3, [r5, #24]
 8006d96:	68ac      	ldr	r4, [r5, #8]
 8006d98:	b913      	cbnz	r3, 8006da0 <_puts_r+0x1c>
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	f7ff fe5c 	bl	8006a58 <__sinit>
 8006da0:	4b23      	ldr	r3, [pc, #140]	; (8006e30 <_puts_r+0xac>)
 8006da2:	429c      	cmp	r4, r3
 8006da4:	d117      	bne.n	8006dd6 <_puts_r+0x52>
 8006da6:	686c      	ldr	r4, [r5, #4]
 8006da8:	89a3      	ldrh	r3, [r4, #12]
 8006daa:	071b      	lsls	r3, r3, #28
 8006dac:	d51d      	bpl.n	8006dea <_puts_r+0x66>
 8006dae:	6923      	ldr	r3, [r4, #16]
 8006db0:	b1db      	cbz	r3, 8006dea <_puts_r+0x66>
 8006db2:	3e01      	subs	r6, #1
 8006db4:	68a3      	ldr	r3, [r4, #8]
 8006db6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	60a3      	str	r3, [r4, #8]
 8006dbe:	b9e9      	cbnz	r1, 8006dfc <_puts_r+0x78>
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	da2e      	bge.n	8006e22 <_puts_r+0x9e>
 8006dc4:	4622      	mov	r2, r4
 8006dc6:	210a      	movs	r1, #10
 8006dc8:	4628      	mov	r0, r5
 8006dca:	f000 f937 	bl	800703c <__swbuf_r>
 8006dce:	3001      	adds	r0, #1
 8006dd0:	d011      	beq.n	8006df6 <_puts_r+0x72>
 8006dd2:	200a      	movs	r0, #10
 8006dd4:	e011      	b.n	8006dfa <_puts_r+0x76>
 8006dd6:	4b17      	ldr	r3, [pc, #92]	; (8006e34 <_puts_r+0xb0>)
 8006dd8:	429c      	cmp	r4, r3
 8006dda:	d101      	bne.n	8006de0 <_puts_r+0x5c>
 8006ddc:	68ac      	ldr	r4, [r5, #8]
 8006dde:	e7e3      	b.n	8006da8 <_puts_r+0x24>
 8006de0:	4b15      	ldr	r3, [pc, #84]	; (8006e38 <_puts_r+0xb4>)
 8006de2:	429c      	cmp	r4, r3
 8006de4:	bf08      	it	eq
 8006de6:	68ec      	ldreq	r4, [r5, #12]
 8006de8:	e7de      	b.n	8006da8 <_puts_r+0x24>
 8006dea:	4621      	mov	r1, r4
 8006dec:	4628      	mov	r0, r5
 8006dee:	f000 f989 	bl	8007104 <__swsetup_r>
 8006df2:	2800      	cmp	r0, #0
 8006df4:	d0dd      	beq.n	8006db2 <_puts_r+0x2e>
 8006df6:	f04f 30ff 	mov.w	r0, #4294967295
 8006dfa:	bd70      	pop	{r4, r5, r6, pc}
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	da04      	bge.n	8006e0a <_puts_r+0x86>
 8006e00:	69a2      	ldr	r2, [r4, #24]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	dc06      	bgt.n	8006e14 <_puts_r+0x90>
 8006e06:	290a      	cmp	r1, #10
 8006e08:	d004      	beq.n	8006e14 <_puts_r+0x90>
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	1c5a      	adds	r2, r3, #1
 8006e0e:	6022      	str	r2, [r4, #0]
 8006e10:	7019      	strb	r1, [r3, #0]
 8006e12:	e7cf      	b.n	8006db4 <_puts_r+0x30>
 8006e14:	4622      	mov	r2, r4
 8006e16:	4628      	mov	r0, r5
 8006e18:	f000 f910 	bl	800703c <__swbuf_r>
 8006e1c:	3001      	adds	r0, #1
 8006e1e:	d1c9      	bne.n	8006db4 <_puts_r+0x30>
 8006e20:	e7e9      	b.n	8006df6 <_puts_r+0x72>
 8006e22:	6823      	ldr	r3, [r4, #0]
 8006e24:	200a      	movs	r0, #10
 8006e26:	1c5a      	adds	r2, r3, #1
 8006e28:	6022      	str	r2, [r4, #0]
 8006e2a:	7018      	strb	r0, [r3, #0]
 8006e2c:	e7e5      	b.n	8006dfa <_puts_r+0x76>
 8006e2e:	bf00      	nop
 8006e30:	08007f80 	.word	0x08007f80
 8006e34:	08007fa0 	.word	0x08007fa0
 8006e38:	08007f60 	.word	0x08007f60

08006e3c <puts>:
 8006e3c:	4b02      	ldr	r3, [pc, #8]	; (8006e48 <puts+0xc>)
 8006e3e:	4601      	mov	r1, r0
 8006e40:	6818      	ldr	r0, [r3, #0]
 8006e42:	f7ff bf9f 	b.w	8006d84 <_puts_r>
 8006e46:	bf00      	nop
 8006e48:	20000024 	.word	0x20000024

08006e4c <_sbrk_r>:
 8006e4c:	b538      	push	{r3, r4, r5, lr}
 8006e4e:	4c06      	ldr	r4, [pc, #24]	; (8006e68 <_sbrk_r+0x1c>)
 8006e50:	2300      	movs	r3, #0
 8006e52:	4605      	mov	r5, r0
 8006e54:	4608      	mov	r0, r1
 8006e56:	6023      	str	r3, [r4, #0]
 8006e58:	f7fa fe86 	bl	8001b68 <_sbrk>
 8006e5c:	1c43      	adds	r3, r0, #1
 8006e5e:	d102      	bne.n	8006e66 <_sbrk_r+0x1a>
 8006e60:	6823      	ldr	r3, [r4, #0]
 8006e62:	b103      	cbz	r3, 8006e66 <_sbrk_r+0x1a>
 8006e64:	602b      	str	r3, [r5, #0]
 8006e66:	bd38      	pop	{r3, r4, r5, pc}
 8006e68:	2000071c 	.word	0x2000071c

08006e6c <__sread>:
 8006e6c:	b510      	push	{r4, lr}
 8006e6e:	460c      	mov	r4, r1
 8006e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e74:	f000 fd50 	bl	8007918 <_read_r>
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	bfab      	itete	ge
 8006e7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e7e:	89a3      	ldrhlt	r3, [r4, #12]
 8006e80:	181b      	addge	r3, r3, r0
 8006e82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e86:	bfac      	ite	ge
 8006e88:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e8a:	81a3      	strhlt	r3, [r4, #12]
 8006e8c:	bd10      	pop	{r4, pc}

08006e8e <__swrite>:
 8006e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e92:	461f      	mov	r7, r3
 8006e94:	898b      	ldrh	r3, [r1, #12]
 8006e96:	05db      	lsls	r3, r3, #23
 8006e98:	4605      	mov	r5, r0
 8006e9a:	460c      	mov	r4, r1
 8006e9c:	4616      	mov	r6, r2
 8006e9e:	d505      	bpl.n	8006eac <__swrite+0x1e>
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ea8:	f000 f9ae 	bl	8007208 <_lseek_r>
 8006eac:	89a3      	ldrh	r3, [r4, #12]
 8006eae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006eb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006eb6:	81a3      	strh	r3, [r4, #12]
 8006eb8:	4632      	mov	r2, r6
 8006eba:	463b      	mov	r3, r7
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ec2:	f000 b90d 	b.w	80070e0 <_write_r>

08006ec6 <__sseek>:
 8006ec6:	b510      	push	{r4, lr}
 8006ec8:	460c      	mov	r4, r1
 8006eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ece:	f000 f99b 	bl	8007208 <_lseek_r>
 8006ed2:	1c43      	adds	r3, r0, #1
 8006ed4:	89a3      	ldrh	r3, [r4, #12]
 8006ed6:	bf15      	itete	ne
 8006ed8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006eda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ede:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ee2:	81a3      	strheq	r3, [r4, #12]
 8006ee4:	bf18      	it	ne
 8006ee6:	81a3      	strhne	r3, [r4, #12]
 8006ee8:	bd10      	pop	{r4, pc}

08006eea <__sclose>:
 8006eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eee:	f000 b977 	b.w	80071e0 <_close_r>

08006ef2 <strrchr>:
 8006ef2:	b538      	push	{r3, r4, r5, lr}
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	460d      	mov	r5, r1
 8006ef8:	b969      	cbnz	r1, 8006f16 <strrchr+0x24>
 8006efa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006efe:	f000 bd1d 	b.w	800793c <strchr>
 8006f02:	1c43      	adds	r3, r0, #1
 8006f04:	4604      	mov	r4, r0
 8006f06:	4629      	mov	r1, r5
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f000 fd17 	bl	800793c <strchr>
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	d1f7      	bne.n	8006f02 <strrchr+0x10>
 8006f12:	4620      	mov	r0, r4
 8006f14:	bd38      	pop	{r3, r4, r5, pc}
 8006f16:	2400      	movs	r4, #0
 8006f18:	e7f5      	b.n	8006f06 <strrchr+0x14>

08006f1a <_strtol_l.isra.0>:
 8006f1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f1e:	4680      	mov	r8, r0
 8006f20:	4689      	mov	r9, r1
 8006f22:	4692      	mov	sl, r2
 8006f24:	461e      	mov	r6, r3
 8006f26:	460f      	mov	r7, r1
 8006f28:	463d      	mov	r5, r7
 8006f2a:	9808      	ldr	r0, [sp, #32]
 8006f2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f30:	f000 f966 	bl	8007200 <__locale_ctype_ptr_l>
 8006f34:	4420      	add	r0, r4
 8006f36:	7843      	ldrb	r3, [r0, #1]
 8006f38:	f013 0308 	ands.w	r3, r3, #8
 8006f3c:	d132      	bne.n	8006fa4 <_strtol_l.isra.0+0x8a>
 8006f3e:	2c2d      	cmp	r4, #45	; 0x2d
 8006f40:	d132      	bne.n	8006fa8 <_strtol_l.isra.0+0x8e>
 8006f42:	787c      	ldrb	r4, [r7, #1]
 8006f44:	1cbd      	adds	r5, r7, #2
 8006f46:	2201      	movs	r2, #1
 8006f48:	2e00      	cmp	r6, #0
 8006f4a:	d05d      	beq.n	8007008 <_strtol_l.isra.0+0xee>
 8006f4c:	2e10      	cmp	r6, #16
 8006f4e:	d109      	bne.n	8006f64 <_strtol_l.isra.0+0x4a>
 8006f50:	2c30      	cmp	r4, #48	; 0x30
 8006f52:	d107      	bne.n	8006f64 <_strtol_l.isra.0+0x4a>
 8006f54:	782b      	ldrb	r3, [r5, #0]
 8006f56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006f5a:	2b58      	cmp	r3, #88	; 0x58
 8006f5c:	d14f      	bne.n	8006ffe <_strtol_l.isra.0+0xe4>
 8006f5e:	786c      	ldrb	r4, [r5, #1]
 8006f60:	2610      	movs	r6, #16
 8006f62:	3502      	adds	r5, #2
 8006f64:	2a00      	cmp	r2, #0
 8006f66:	bf14      	ite	ne
 8006f68:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006f6c:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006f70:	2700      	movs	r7, #0
 8006f72:	fbb1 fcf6 	udiv	ip, r1, r6
 8006f76:	4638      	mov	r0, r7
 8006f78:	fb06 1e1c 	mls	lr, r6, ip, r1
 8006f7c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006f80:	2b09      	cmp	r3, #9
 8006f82:	d817      	bhi.n	8006fb4 <_strtol_l.isra.0+0x9a>
 8006f84:	461c      	mov	r4, r3
 8006f86:	42a6      	cmp	r6, r4
 8006f88:	dd23      	ble.n	8006fd2 <_strtol_l.isra.0+0xb8>
 8006f8a:	1c7b      	adds	r3, r7, #1
 8006f8c:	d007      	beq.n	8006f9e <_strtol_l.isra.0+0x84>
 8006f8e:	4584      	cmp	ip, r0
 8006f90:	d31c      	bcc.n	8006fcc <_strtol_l.isra.0+0xb2>
 8006f92:	d101      	bne.n	8006f98 <_strtol_l.isra.0+0x7e>
 8006f94:	45a6      	cmp	lr, r4
 8006f96:	db19      	blt.n	8006fcc <_strtol_l.isra.0+0xb2>
 8006f98:	fb00 4006 	mla	r0, r0, r6, r4
 8006f9c:	2701      	movs	r7, #1
 8006f9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006fa2:	e7eb      	b.n	8006f7c <_strtol_l.isra.0+0x62>
 8006fa4:	462f      	mov	r7, r5
 8006fa6:	e7bf      	b.n	8006f28 <_strtol_l.isra.0+0xe>
 8006fa8:	2c2b      	cmp	r4, #43	; 0x2b
 8006faa:	bf04      	itt	eq
 8006fac:	1cbd      	addeq	r5, r7, #2
 8006fae:	787c      	ldrbeq	r4, [r7, #1]
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	e7c9      	b.n	8006f48 <_strtol_l.isra.0+0x2e>
 8006fb4:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006fb8:	2b19      	cmp	r3, #25
 8006fba:	d801      	bhi.n	8006fc0 <_strtol_l.isra.0+0xa6>
 8006fbc:	3c37      	subs	r4, #55	; 0x37
 8006fbe:	e7e2      	b.n	8006f86 <_strtol_l.isra.0+0x6c>
 8006fc0:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006fc4:	2b19      	cmp	r3, #25
 8006fc6:	d804      	bhi.n	8006fd2 <_strtol_l.isra.0+0xb8>
 8006fc8:	3c57      	subs	r4, #87	; 0x57
 8006fca:	e7dc      	b.n	8006f86 <_strtol_l.isra.0+0x6c>
 8006fcc:	f04f 37ff 	mov.w	r7, #4294967295
 8006fd0:	e7e5      	b.n	8006f9e <_strtol_l.isra.0+0x84>
 8006fd2:	1c7b      	adds	r3, r7, #1
 8006fd4:	d108      	bne.n	8006fe8 <_strtol_l.isra.0+0xce>
 8006fd6:	2322      	movs	r3, #34	; 0x22
 8006fd8:	f8c8 3000 	str.w	r3, [r8]
 8006fdc:	4608      	mov	r0, r1
 8006fde:	f1ba 0f00 	cmp.w	sl, #0
 8006fe2:	d107      	bne.n	8006ff4 <_strtol_l.isra.0+0xda>
 8006fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe8:	b102      	cbz	r2, 8006fec <_strtol_l.isra.0+0xd2>
 8006fea:	4240      	negs	r0, r0
 8006fec:	f1ba 0f00 	cmp.w	sl, #0
 8006ff0:	d0f8      	beq.n	8006fe4 <_strtol_l.isra.0+0xca>
 8006ff2:	b10f      	cbz	r7, 8006ff8 <_strtol_l.isra.0+0xde>
 8006ff4:	f105 39ff 	add.w	r9, r5, #4294967295
 8006ff8:	f8ca 9000 	str.w	r9, [sl]
 8006ffc:	e7f2      	b.n	8006fe4 <_strtol_l.isra.0+0xca>
 8006ffe:	2430      	movs	r4, #48	; 0x30
 8007000:	2e00      	cmp	r6, #0
 8007002:	d1af      	bne.n	8006f64 <_strtol_l.isra.0+0x4a>
 8007004:	2608      	movs	r6, #8
 8007006:	e7ad      	b.n	8006f64 <_strtol_l.isra.0+0x4a>
 8007008:	2c30      	cmp	r4, #48	; 0x30
 800700a:	d0a3      	beq.n	8006f54 <_strtol_l.isra.0+0x3a>
 800700c:	260a      	movs	r6, #10
 800700e:	e7a9      	b.n	8006f64 <_strtol_l.isra.0+0x4a>

08007010 <strtol>:
 8007010:	4b08      	ldr	r3, [pc, #32]	; (8007034 <strtol+0x24>)
 8007012:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007014:	681c      	ldr	r4, [r3, #0]
 8007016:	4d08      	ldr	r5, [pc, #32]	; (8007038 <strtol+0x28>)
 8007018:	6a23      	ldr	r3, [r4, #32]
 800701a:	2b00      	cmp	r3, #0
 800701c:	bf08      	it	eq
 800701e:	462b      	moveq	r3, r5
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	4613      	mov	r3, r2
 8007024:	460a      	mov	r2, r1
 8007026:	4601      	mov	r1, r0
 8007028:	4620      	mov	r0, r4
 800702a:	f7ff ff76 	bl	8006f1a <_strtol_l.isra.0>
 800702e:	b003      	add	sp, #12
 8007030:	bd30      	pop	{r4, r5, pc}
 8007032:	bf00      	nop
 8007034:	20000024 	.word	0x20000024
 8007038:	20000088 	.word	0x20000088

0800703c <__swbuf_r>:
 800703c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800703e:	460e      	mov	r6, r1
 8007040:	4614      	mov	r4, r2
 8007042:	4605      	mov	r5, r0
 8007044:	b118      	cbz	r0, 800704e <__swbuf_r+0x12>
 8007046:	6983      	ldr	r3, [r0, #24]
 8007048:	b90b      	cbnz	r3, 800704e <__swbuf_r+0x12>
 800704a:	f7ff fd05 	bl	8006a58 <__sinit>
 800704e:	4b21      	ldr	r3, [pc, #132]	; (80070d4 <__swbuf_r+0x98>)
 8007050:	429c      	cmp	r4, r3
 8007052:	d12a      	bne.n	80070aa <__swbuf_r+0x6e>
 8007054:	686c      	ldr	r4, [r5, #4]
 8007056:	69a3      	ldr	r3, [r4, #24]
 8007058:	60a3      	str	r3, [r4, #8]
 800705a:	89a3      	ldrh	r3, [r4, #12]
 800705c:	071a      	lsls	r2, r3, #28
 800705e:	d52e      	bpl.n	80070be <__swbuf_r+0x82>
 8007060:	6923      	ldr	r3, [r4, #16]
 8007062:	b363      	cbz	r3, 80070be <__swbuf_r+0x82>
 8007064:	6923      	ldr	r3, [r4, #16]
 8007066:	6820      	ldr	r0, [r4, #0]
 8007068:	1ac0      	subs	r0, r0, r3
 800706a:	6963      	ldr	r3, [r4, #20]
 800706c:	b2f6      	uxtb	r6, r6
 800706e:	4283      	cmp	r3, r0
 8007070:	4637      	mov	r7, r6
 8007072:	dc04      	bgt.n	800707e <__swbuf_r+0x42>
 8007074:	4621      	mov	r1, r4
 8007076:	4628      	mov	r0, r5
 8007078:	f7ff fc72 	bl	8006960 <_fflush_r>
 800707c:	bb28      	cbnz	r0, 80070ca <__swbuf_r+0x8e>
 800707e:	68a3      	ldr	r3, [r4, #8]
 8007080:	3b01      	subs	r3, #1
 8007082:	60a3      	str	r3, [r4, #8]
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	1c5a      	adds	r2, r3, #1
 8007088:	6022      	str	r2, [r4, #0]
 800708a:	701e      	strb	r6, [r3, #0]
 800708c:	6963      	ldr	r3, [r4, #20]
 800708e:	3001      	adds	r0, #1
 8007090:	4283      	cmp	r3, r0
 8007092:	d004      	beq.n	800709e <__swbuf_r+0x62>
 8007094:	89a3      	ldrh	r3, [r4, #12]
 8007096:	07db      	lsls	r3, r3, #31
 8007098:	d519      	bpl.n	80070ce <__swbuf_r+0x92>
 800709a:	2e0a      	cmp	r6, #10
 800709c:	d117      	bne.n	80070ce <__swbuf_r+0x92>
 800709e:	4621      	mov	r1, r4
 80070a0:	4628      	mov	r0, r5
 80070a2:	f7ff fc5d 	bl	8006960 <_fflush_r>
 80070a6:	b190      	cbz	r0, 80070ce <__swbuf_r+0x92>
 80070a8:	e00f      	b.n	80070ca <__swbuf_r+0x8e>
 80070aa:	4b0b      	ldr	r3, [pc, #44]	; (80070d8 <__swbuf_r+0x9c>)
 80070ac:	429c      	cmp	r4, r3
 80070ae:	d101      	bne.n	80070b4 <__swbuf_r+0x78>
 80070b0:	68ac      	ldr	r4, [r5, #8]
 80070b2:	e7d0      	b.n	8007056 <__swbuf_r+0x1a>
 80070b4:	4b09      	ldr	r3, [pc, #36]	; (80070dc <__swbuf_r+0xa0>)
 80070b6:	429c      	cmp	r4, r3
 80070b8:	bf08      	it	eq
 80070ba:	68ec      	ldreq	r4, [r5, #12]
 80070bc:	e7cb      	b.n	8007056 <__swbuf_r+0x1a>
 80070be:	4621      	mov	r1, r4
 80070c0:	4628      	mov	r0, r5
 80070c2:	f000 f81f 	bl	8007104 <__swsetup_r>
 80070c6:	2800      	cmp	r0, #0
 80070c8:	d0cc      	beq.n	8007064 <__swbuf_r+0x28>
 80070ca:	f04f 37ff 	mov.w	r7, #4294967295
 80070ce:	4638      	mov	r0, r7
 80070d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070d2:	bf00      	nop
 80070d4:	08007f80 	.word	0x08007f80
 80070d8:	08007fa0 	.word	0x08007fa0
 80070dc:	08007f60 	.word	0x08007f60

080070e0 <_write_r>:
 80070e0:	b538      	push	{r3, r4, r5, lr}
 80070e2:	4c07      	ldr	r4, [pc, #28]	; (8007100 <_write_r+0x20>)
 80070e4:	4605      	mov	r5, r0
 80070e6:	4608      	mov	r0, r1
 80070e8:	4611      	mov	r1, r2
 80070ea:	2200      	movs	r2, #0
 80070ec:	6022      	str	r2, [r4, #0]
 80070ee:	461a      	mov	r2, r3
 80070f0:	f7fa fce9 	bl	8001ac6 <_write>
 80070f4:	1c43      	adds	r3, r0, #1
 80070f6:	d102      	bne.n	80070fe <_write_r+0x1e>
 80070f8:	6823      	ldr	r3, [r4, #0]
 80070fa:	b103      	cbz	r3, 80070fe <_write_r+0x1e>
 80070fc:	602b      	str	r3, [r5, #0]
 80070fe:	bd38      	pop	{r3, r4, r5, pc}
 8007100:	2000071c 	.word	0x2000071c

08007104 <__swsetup_r>:
 8007104:	4b32      	ldr	r3, [pc, #200]	; (80071d0 <__swsetup_r+0xcc>)
 8007106:	b570      	push	{r4, r5, r6, lr}
 8007108:	681d      	ldr	r5, [r3, #0]
 800710a:	4606      	mov	r6, r0
 800710c:	460c      	mov	r4, r1
 800710e:	b125      	cbz	r5, 800711a <__swsetup_r+0x16>
 8007110:	69ab      	ldr	r3, [r5, #24]
 8007112:	b913      	cbnz	r3, 800711a <__swsetup_r+0x16>
 8007114:	4628      	mov	r0, r5
 8007116:	f7ff fc9f 	bl	8006a58 <__sinit>
 800711a:	4b2e      	ldr	r3, [pc, #184]	; (80071d4 <__swsetup_r+0xd0>)
 800711c:	429c      	cmp	r4, r3
 800711e:	d10f      	bne.n	8007140 <__swsetup_r+0x3c>
 8007120:	686c      	ldr	r4, [r5, #4]
 8007122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007126:	b29a      	uxth	r2, r3
 8007128:	0715      	lsls	r5, r2, #28
 800712a:	d42c      	bmi.n	8007186 <__swsetup_r+0x82>
 800712c:	06d0      	lsls	r0, r2, #27
 800712e:	d411      	bmi.n	8007154 <__swsetup_r+0x50>
 8007130:	2209      	movs	r2, #9
 8007132:	6032      	str	r2, [r6, #0]
 8007134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007138:	81a3      	strh	r3, [r4, #12]
 800713a:	f04f 30ff 	mov.w	r0, #4294967295
 800713e:	e03e      	b.n	80071be <__swsetup_r+0xba>
 8007140:	4b25      	ldr	r3, [pc, #148]	; (80071d8 <__swsetup_r+0xd4>)
 8007142:	429c      	cmp	r4, r3
 8007144:	d101      	bne.n	800714a <__swsetup_r+0x46>
 8007146:	68ac      	ldr	r4, [r5, #8]
 8007148:	e7eb      	b.n	8007122 <__swsetup_r+0x1e>
 800714a:	4b24      	ldr	r3, [pc, #144]	; (80071dc <__swsetup_r+0xd8>)
 800714c:	429c      	cmp	r4, r3
 800714e:	bf08      	it	eq
 8007150:	68ec      	ldreq	r4, [r5, #12]
 8007152:	e7e6      	b.n	8007122 <__swsetup_r+0x1e>
 8007154:	0751      	lsls	r1, r2, #29
 8007156:	d512      	bpl.n	800717e <__swsetup_r+0x7a>
 8007158:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800715a:	b141      	cbz	r1, 800716e <__swsetup_r+0x6a>
 800715c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007160:	4299      	cmp	r1, r3
 8007162:	d002      	beq.n	800716a <__swsetup_r+0x66>
 8007164:	4630      	mov	r0, r6
 8007166:	f7ff fd39 	bl	8006bdc <_free_r>
 800716a:	2300      	movs	r3, #0
 800716c:	6363      	str	r3, [r4, #52]	; 0x34
 800716e:	89a3      	ldrh	r3, [r4, #12]
 8007170:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007174:	81a3      	strh	r3, [r4, #12]
 8007176:	2300      	movs	r3, #0
 8007178:	6063      	str	r3, [r4, #4]
 800717a:	6923      	ldr	r3, [r4, #16]
 800717c:	6023      	str	r3, [r4, #0]
 800717e:	89a3      	ldrh	r3, [r4, #12]
 8007180:	f043 0308 	orr.w	r3, r3, #8
 8007184:	81a3      	strh	r3, [r4, #12]
 8007186:	6923      	ldr	r3, [r4, #16]
 8007188:	b94b      	cbnz	r3, 800719e <__swsetup_r+0x9a>
 800718a:	89a3      	ldrh	r3, [r4, #12]
 800718c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007194:	d003      	beq.n	800719e <__swsetup_r+0x9a>
 8007196:	4621      	mov	r1, r4
 8007198:	4630      	mov	r0, r6
 800719a:	f000 f86b 	bl	8007274 <__smakebuf_r>
 800719e:	89a2      	ldrh	r2, [r4, #12]
 80071a0:	f012 0301 	ands.w	r3, r2, #1
 80071a4:	d00c      	beq.n	80071c0 <__swsetup_r+0xbc>
 80071a6:	2300      	movs	r3, #0
 80071a8:	60a3      	str	r3, [r4, #8]
 80071aa:	6963      	ldr	r3, [r4, #20]
 80071ac:	425b      	negs	r3, r3
 80071ae:	61a3      	str	r3, [r4, #24]
 80071b0:	6923      	ldr	r3, [r4, #16]
 80071b2:	b953      	cbnz	r3, 80071ca <__swsetup_r+0xc6>
 80071b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071b8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80071bc:	d1ba      	bne.n	8007134 <__swsetup_r+0x30>
 80071be:	bd70      	pop	{r4, r5, r6, pc}
 80071c0:	0792      	lsls	r2, r2, #30
 80071c2:	bf58      	it	pl
 80071c4:	6963      	ldrpl	r3, [r4, #20]
 80071c6:	60a3      	str	r3, [r4, #8]
 80071c8:	e7f2      	b.n	80071b0 <__swsetup_r+0xac>
 80071ca:	2000      	movs	r0, #0
 80071cc:	e7f7      	b.n	80071be <__swsetup_r+0xba>
 80071ce:	bf00      	nop
 80071d0:	20000024 	.word	0x20000024
 80071d4:	08007f80 	.word	0x08007f80
 80071d8:	08007fa0 	.word	0x08007fa0
 80071dc:	08007f60 	.word	0x08007f60

080071e0 <_close_r>:
 80071e0:	b538      	push	{r3, r4, r5, lr}
 80071e2:	4c06      	ldr	r4, [pc, #24]	; (80071fc <_close_r+0x1c>)
 80071e4:	2300      	movs	r3, #0
 80071e6:	4605      	mov	r5, r0
 80071e8:	4608      	mov	r0, r1
 80071ea:	6023      	str	r3, [r4, #0]
 80071ec:	f7fa fc87 	bl	8001afe <_close>
 80071f0:	1c43      	adds	r3, r0, #1
 80071f2:	d102      	bne.n	80071fa <_close_r+0x1a>
 80071f4:	6823      	ldr	r3, [r4, #0]
 80071f6:	b103      	cbz	r3, 80071fa <_close_r+0x1a>
 80071f8:	602b      	str	r3, [r5, #0]
 80071fa:	bd38      	pop	{r3, r4, r5, pc}
 80071fc:	2000071c 	.word	0x2000071c

08007200 <__locale_ctype_ptr_l>:
 8007200:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007204:	4770      	bx	lr
	...

08007208 <_lseek_r>:
 8007208:	b538      	push	{r3, r4, r5, lr}
 800720a:	4c07      	ldr	r4, [pc, #28]	; (8007228 <_lseek_r+0x20>)
 800720c:	4605      	mov	r5, r0
 800720e:	4608      	mov	r0, r1
 8007210:	4611      	mov	r1, r2
 8007212:	2200      	movs	r2, #0
 8007214:	6022      	str	r2, [r4, #0]
 8007216:	461a      	mov	r2, r3
 8007218:	f7fa fc98 	bl	8001b4c <_lseek>
 800721c:	1c43      	adds	r3, r0, #1
 800721e:	d102      	bne.n	8007226 <_lseek_r+0x1e>
 8007220:	6823      	ldr	r3, [r4, #0]
 8007222:	b103      	cbz	r3, 8007226 <_lseek_r+0x1e>
 8007224:	602b      	str	r3, [r5, #0]
 8007226:	bd38      	pop	{r3, r4, r5, pc}
 8007228:	2000071c 	.word	0x2000071c

0800722c <__swhatbuf_r>:
 800722c:	b570      	push	{r4, r5, r6, lr}
 800722e:	460e      	mov	r6, r1
 8007230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007234:	2900      	cmp	r1, #0
 8007236:	b096      	sub	sp, #88	; 0x58
 8007238:	4614      	mov	r4, r2
 800723a:	461d      	mov	r5, r3
 800723c:	da07      	bge.n	800724e <__swhatbuf_r+0x22>
 800723e:	2300      	movs	r3, #0
 8007240:	602b      	str	r3, [r5, #0]
 8007242:	89b3      	ldrh	r3, [r6, #12]
 8007244:	061a      	lsls	r2, r3, #24
 8007246:	d410      	bmi.n	800726a <__swhatbuf_r+0x3e>
 8007248:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800724c:	e00e      	b.n	800726c <__swhatbuf_r+0x40>
 800724e:	466a      	mov	r2, sp
 8007250:	f000 fb8e 	bl	8007970 <_fstat_r>
 8007254:	2800      	cmp	r0, #0
 8007256:	dbf2      	blt.n	800723e <__swhatbuf_r+0x12>
 8007258:	9a01      	ldr	r2, [sp, #4]
 800725a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800725e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007262:	425a      	negs	r2, r3
 8007264:	415a      	adcs	r2, r3
 8007266:	602a      	str	r2, [r5, #0]
 8007268:	e7ee      	b.n	8007248 <__swhatbuf_r+0x1c>
 800726a:	2340      	movs	r3, #64	; 0x40
 800726c:	2000      	movs	r0, #0
 800726e:	6023      	str	r3, [r4, #0]
 8007270:	b016      	add	sp, #88	; 0x58
 8007272:	bd70      	pop	{r4, r5, r6, pc}

08007274 <__smakebuf_r>:
 8007274:	898b      	ldrh	r3, [r1, #12]
 8007276:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007278:	079d      	lsls	r5, r3, #30
 800727a:	4606      	mov	r6, r0
 800727c:	460c      	mov	r4, r1
 800727e:	d507      	bpl.n	8007290 <__smakebuf_r+0x1c>
 8007280:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007284:	6023      	str	r3, [r4, #0]
 8007286:	6123      	str	r3, [r4, #16]
 8007288:	2301      	movs	r3, #1
 800728a:	6163      	str	r3, [r4, #20]
 800728c:	b002      	add	sp, #8
 800728e:	bd70      	pop	{r4, r5, r6, pc}
 8007290:	ab01      	add	r3, sp, #4
 8007292:	466a      	mov	r2, sp
 8007294:	f7ff ffca 	bl	800722c <__swhatbuf_r>
 8007298:	9900      	ldr	r1, [sp, #0]
 800729a:	4605      	mov	r5, r0
 800729c:	4630      	mov	r0, r6
 800729e:	f7ff fceb 	bl	8006c78 <_malloc_r>
 80072a2:	b948      	cbnz	r0, 80072b8 <__smakebuf_r+0x44>
 80072a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072a8:	059a      	lsls	r2, r3, #22
 80072aa:	d4ef      	bmi.n	800728c <__smakebuf_r+0x18>
 80072ac:	f023 0303 	bic.w	r3, r3, #3
 80072b0:	f043 0302 	orr.w	r3, r3, #2
 80072b4:	81a3      	strh	r3, [r4, #12]
 80072b6:	e7e3      	b.n	8007280 <__smakebuf_r+0xc>
 80072b8:	4b0d      	ldr	r3, [pc, #52]	; (80072f0 <__smakebuf_r+0x7c>)
 80072ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80072bc:	89a3      	ldrh	r3, [r4, #12]
 80072be:	6020      	str	r0, [r4, #0]
 80072c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072c4:	81a3      	strh	r3, [r4, #12]
 80072c6:	9b00      	ldr	r3, [sp, #0]
 80072c8:	6163      	str	r3, [r4, #20]
 80072ca:	9b01      	ldr	r3, [sp, #4]
 80072cc:	6120      	str	r0, [r4, #16]
 80072ce:	b15b      	cbz	r3, 80072e8 <__smakebuf_r+0x74>
 80072d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072d4:	4630      	mov	r0, r6
 80072d6:	f000 fb5d 	bl	8007994 <_isatty_r>
 80072da:	b128      	cbz	r0, 80072e8 <__smakebuf_r+0x74>
 80072dc:	89a3      	ldrh	r3, [r4, #12]
 80072de:	f023 0303 	bic.w	r3, r3, #3
 80072e2:	f043 0301 	orr.w	r3, r3, #1
 80072e6:	81a3      	strh	r3, [r4, #12]
 80072e8:	89a3      	ldrh	r3, [r4, #12]
 80072ea:	431d      	orrs	r5, r3
 80072ec:	81a5      	strh	r5, [r4, #12]
 80072ee:	e7cd      	b.n	800728c <__smakebuf_r+0x18>
 80072f0:	08006a21 	.word	0x08006a21

080072f4 <__ascii_mbtowc>:
 80072f4:	b082      	sub	sp, #8
 80072f6:	b901      	cbnz	r1, 80072fa <__ascii_mbtowc+0x6>
 80072f8:	a901      	add	r1, sp, #4
 80072fa:	b142      	cbz	r2, 800730e <__ascii_mbtowc+0x1a>
 80072fc:	b14b      	cbz	r3, 8007312 <__ascii_mbtowc+0x1e>
 80072fe:	7813      	ldrb	r3, [r2, #0]
 8007300:	600b      	str	r3, [r1, #0]
 8007302:	7812      	ldrb	r2, [r2, #0]
 8007304:	1c10      	adds	r0, r2, #0
 8007306:	bf18      	it	ne
 8007308:	2001      	movne	r0, #1
 800730a:	b002      	add	sp, #8
 800730c:	4770      	bx	lr
 800730e:	4610      	mov	r0, r2
 8007310:	e7fb      	b.n	800730a <__ascii_mbtowc+0x16>
 8007312:	f06f 0001 	mvn.w	r0, #1
 8007316:	e7f8      	b.n	800730a <__ascii_mbtowc+0x16>

08007318 <__malloc_lock>:
 8007318:	4770      	bx	lr

0800731a <__malloc_unlock>:
 800731a:	4770      	bx	lr

0800731c <__sfputc_r>:
 800731c:	6893      	ldr	r3, [r2, #8]
 800731e:	3b01      	subs	r3, #1
 8007320:	2b00      	cmp	r3, #0
 8007322:	b410      	push	{r4}
 8007324:	6093      	str	r3, [r2, #8]
 8007326:	da08      	bge.n	800733a <__sfputc_r+0x1e>
 8007328:	6994      	ldr	r4, [r2, #24]
 800732a:	42a3      	cmp	r3, r4
 800732c:	db01      	blt.n	8007332 <__sfputc_r+0x16>
 800732e:	290a      	cmp	r1, #10
 8007330:	d103      	bne.n	800733a <__sfputc_r+0x1e>
 8007332:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007336:	f7ff be81 	b.w	800703c <__swbuf_r>
 800733a:	6813      	ldr	r3, [r2, #0]
 800733c:	1c58      	adds	r0, r3, #1
 800733e:	6010      	str	r0, [r2, #0]
 8007340:	7019      	strb	r1, [r3, #0]
 8007342:	4608      	mov	r0, r1
 8007344:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007348:	4770      	bx	lr

0800734a <__sfputs_r>:
 800734a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734c:	4606      	mov	r6, r0
 800734e:	460f      	mov	r7, r1
 8007350:	4614      	mov	r4, r2
 8007352:	18d5      	adds	r5, r2, r3
 8007354:	42ac      	cmp	r4, r5
 8007356:	d101      	bne.n	800735c <__sfputs_r+0x12>
 8007358:	2000      	movs	r0, #0
 800735a:	e007      	b.n	800736c <__sfputs_r+0x22>
 800735c:	463a      	mov	r2, r7
 800735e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007362:	4630      	mov	r0, r6
 8007364:	f7ff ffda 	bl	800731c <__sfputc_r>
 8007368:	1c43      	adds	r3, r0, #1
 800736a:	d1f3      	bne.n	8007354 <__sfputs_r+0xa>
 800736c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007370 <_vfiprintf_r>:
 8007370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007374:	460c      	mov	r4, r1
 8007376:	b09d      	sub	sp, #116	; 0x74
 8007378:	4617      	mov	r7, r2
 800737a:	461d      	mov	r5, r3
 800737c:	4606      	mov	r6, r0
 800737e:	b118      	cbz	r0, 8007388 <_vfiprintf_r+0x18>
 8007380:	6983      	ldr	r3, [r0, #24]
 8007382:	b90b      	cbnz	r3, 8007388 <_vfiprintf_r+0x18>
 8007384:	f7ff fb68 	bl	8006a58 <__sinit>
 8007388:	4b7c      	ldr	r3, [pc, #496]	; (800757c <_vfiprintf_r+0x20c>)
 800738a:	429c      	cmp	r4, r3
 800738c:	d158      	bne.n	8007440 <_vfiprintf_r+0xd0>
 800738e:	6874      	ldr	r4, [r6, #4]
 8007390:	89a3      	ldrh	r3, [r4, #12]
 8007392:	0718      	lsls	r0, r3, #28
 8007394:	d55e      	bpl.n	8007454 <_vfiprintf_r+0xe4>
 8007396:	6923      	ldr	r3, [r4, #16]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d05b      	beq.n	8007454 <_vfiprintf_r+0xe4>
 800739c:	2300      	movs	r3, #0
 800739e:	9309      	str	r3, [sp, #36]	; 0x24
 80073a0:	2320      	movs	r3, #32
 80073a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073a6:	2330      	movs	r3, #48	; 0x30
 80073a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073ac:	9503      	str	r5, [sp, #12]
 80073ae:	f04f 0b01 	mov.w	fp, #1
 80073b2:	46b8      	mov	r8, r7
 80073b4:	4645      	mov	r5, r8
 80073b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80073ba:	b10b      	cbz	r3, 80073c0 <_vfiprintf_r+0x50>
 80073bc:	2b25      	cmp	r3, #37	; 0x25
 80073be:	d154      	bne.n	800746a <_vfiprintf_r+0xfa>
 80073c0:	ebb8 0a07 	subs.w	sl, r8, r7
 80073c4:	d00b      	beq.n	80073de <_vfiprintf_r+0x6e>
 80073c6:	4653      	mov	r3, sl
 80073c8:	463a      	mov	r2, r7
 80073ca:	4621      	mov	r1, r4
 80073cc:	4630      	mov	r0, r6
 80073ce:	f7ff ffbc 	bl	800734a <__sfputs_r>
 80073d2:	3001      	adds	r0, #1
 80073d4:	f000 80c2 	beq.w	800755c <_vfiprintf_r+0x1ec>
 80073d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073da:	4453      	add	r3, sl
 80073dc:	9309      	str	r3, [sp, #36]	; 0x24
 80073de:	f898 3000 	ldrb.w	r3, [r8]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f000 80ba 	beq.w	800755c <_vfiprintf_r+0x1ec>
 80073e8:	2300      	movs	r3, #0
 80073ea:	f04f 32ff 	mov.w	r2, #4294967295
 80073ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073f2:	9304      	str	r3, [sp, #16]
 80073f4:	9307      	str	r3, [sp, #28]
 80073f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073fa:	931a      	str	r3, [sp, #104]	; 0x68
 80073fc:	46a8      	mov	r8, r5
 80073fe:	2205      	movs	r2, #5
 8007400:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007404:	485e      	ldr	r0, [pc, #376]	; (8007580 <_vfiprintf_r+0x210>)
 8007406:	f7f8 feeb 	bl	80001e0 <memchr>
 800740a:	9b04      	ldr	r3, [sp, #16]
 800740c:	bb78      	cbnz	r0, 800746e <_vfiprintf_r+0xfe>
 800740e:	06d9      	lsls	r1, r3, #27
 8007410:	bf44      	itt	mi
 8007412:	2220      	movmi	r2, #32
 8007414:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007418:	071a      	lsls	r2, r3, #28
 800741a:	bf44      	itt	mi
 800741c:	222b      	movmi	r2, #43	; 0x2b
 800741e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007422:	782a      	ldrb	r2, [r5, #0]
 8007424:	2a2a      	cmp	r2, #42	; 0x2a
 8007426:	d02a      	beq.n	800747e <_vfiprintf_r+0x10e>
 8007428:	9a07      	ldr	r2, [sp, #28]
 800742a:	46a8      	mov	r8, r5
 800742c:	2000      	movs	r0, #0
 800742e:	250a      	movs	r5, #10
 8007430:	4641      	mov	r1, r8
 8007432:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007436:	3b30      	subs	r3, #48	; 0x30
 8007438:	2b09      	cmp	r3, #9
 800743a:	d969      	bls.n	8007510 <_vfiprintf_r+0x1a0>
 800743c:	b360      	cbz	r0, 8007498 <_vfiprintf_r+0x128>
 800743e:	e024      	b.n	800748a <_vfiprintf_r+0x11a>
 8007440:	4b50      	ldr	r3, [pc, #320]	; (8007584 <_vfiprintf_r+0x214>)
 8007442:	429c      	cmp	r4, r3
 8007444:	d101      	bne.n	800744a <_vfiprintf_r+0xda>
 8007446:	68b4      	ldr	r4, [r6, #8]
 8007448:	e7a2      	b.n	8007390 <_vfiprintf_r+0x20>
 800744a:	4b4f      	ldr	r3, [pc, #316]	; (8007588 <_vfiprintf_r+0x218>)
 800744c:	429c      	cmp	r4, r3
 800744e:	bf08      	it	eq
 8007450:	68f4      	ldreq	r4, [r6, #12]
 8007452:	e79d      	b.n	8007390 <_vfiprintf_r+0x20>
 8007454:	4621      	mov	r1, r4
 8007456:	4630      	mov	r0, r6
 8007458:	f7ff fe54 	bl	8007104 <__swsetup_r>
 800745c:	2800      	cmp	r0, #0
 800745e:	d09d      	beq.n	800739c <_vfiprintf_r+0x2c>
 8007460:	f04f 30ff 	mov.w	r0, #4294967295
 8007464:	b01d      	add	sp, #116	; 0x74
 8007466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800746a:	46a8      	mov	r8, r5
 800746c:	e7a2      	b.n	80073b4 <_vfiprintf_r+0x44>
 800746e:	4a44      	ldr	r2, [pc, #272]	; (8007580 <_vfiprintf_r+0x210>)
 8007470:	1a80      	subs	r0, r0, r2
 8007472:	fa0b f000 	lsl.w	r0, fp, r0
 8007476:	4318      	orrs	r0, r3
 8007478:	9004      	str	r0, [sp, #16]
 800747a:	4645      	mov	r5, r8
 800747c:	e7be      	b.n	80073fc <_vfiprintf_r+0x8c>
 800747e:	9a03      	ldr	r2, [sp, #12]
 8007480:	1d11      	adds	r1, r2, #4
 8007482:	6812      	ldr	r2, [r2, #0]
 8007484:	9103      	str	r1, [sp, #12]
 8007486:	2a00      	cmp	r2, #0
 8007488:	db01      	blt.n	800748e <_vfiprintf_r+0x11e>
 800748a:	9207      	str	r2, [sp, #28]
 800748c:	e004      	b.n	8007498 <_vfiprintf_r+0x128>
 800748e:	4252      	negs	r2, r2
 8007490:	f043 0302 	orr.w	r3, r3, #2
 8007494:	9207      	str	r2, [sp, #28]
 8007496:	9304      	str	r3, [sp, #16]
 8007498:	f898 3000 	ldrb.w	r3, [r8]
 800749c:	2b2e      	cmp	r3, #46	; 0x2e
 800749e:	d10e      	bne.n	80074be <_vfiprintf_r+0x14e>
 80074a0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80074a4:	2b2a      	cmp	r3, #42	; 0x2a
 80074a6:	d138      	bne.n	800751a <_vfiprintf_r+0x1aa>
 80074a8:	9b03      	ldr	r3, [sp, #12]
 80074aa:	1d1a      	adds	r2, r3, #4
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	9203      	str	r2, [sp, #12]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	bfb8      	it	lt
 80074b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80074b8:	f108 0802 	add.w	r8, r8, #2
 80074bc:	9305      	str	r3, [sp, #20]
 80074be:	4d33      	ldr	r5, [pc, #204]	; (800758c <_vfiprintf_r+0x21c>)
 80074c0:	f898 1000 	ldrb.w	r1, [r8]
 80074c4:	2203      	movs	r2, #3
 80074c6:	4628      	mov	r0, r5
 80074c8:	f7f8 fe8a 	bl	80001e0 <memchr>
 80074cc:	b140      	cbz	r0, 80074e0 <_vfiprintf_r+0x170>
 80074ce:	2340      	movs	r3, #64	; 0x40
 80074d0:	1b40      	subs	r0, r0, r5
 80074d2:	fa03 f000 	lsl.w	r0, r3, r0
 80074d6:	9b04      	ldr	r3, [sp, #16]
 80074d8:	4303      	orrs	r3, r0
 80074da:	f108 0801 	add.w	r8, r8, #1
 80074de:	9304      	str	r3, [sp, #16]
 80074e0:	f898 1000 	ldrb.w	r1, [r8]
 80074e4:	482a      	ldr	r0, [pc, #168]	; (8007590 <_vfiprintf_r+0x220>)
 80074e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074ea:	2206      	movs	r2, #6
 80074ec:	f108 0701 	add.w	r7, r8, #1
 80074f0:	f7f8 fe76 	bl	80001e0 <memchr>
 80074f4:	2800      	cmp	r0, #0
 80074f6:	d037      	beq.n	8007568 <_vfiprintf_r+0x1f8>
 80074f8:	4b26      	ldr	r3, [pc, #152]	; (8007594 <_vfiprintf_r+0x224>)
 80074fa:	bb1b      	cbnz	r3, 8007544 <_vfiprintf_r+0x1d4>
 80074fc:	9b03      	ldr	r3, [sp, #12]
 80074fe:	3307      	adds	r3, #7
 8007500:	f023 0307 	bic.w	r3, r3, #7
 8007504:	3308      	adds	r3, #8
 8007506:	9303      	str	r3, [sp, #12]
 8007508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800750a:	444b      	add	r3, r9
 800750c:	9309      	str	r3, [sp, #36]	; 0x24
 800750e:	e750      	b.n	80073b2 <_vfiprintf_r+0x42>
 8007510:	fb05 3202 	mla	r2, r5, r2, r3
 8007514:	2001      	movs	r0, #1
 8007516:	4688      	mov	r8, r1
 8007518:	e78a      	b.n	8007430 <_vfiprintf_r+0xc0>
 800751a:	2300      	movs	r3, #0
 800751c:	f108 0801 	add.w	r8, r8, #1
 8007520:	9305      	str	r3, [sp, #20]
 8007522:	4619      	mov	r1, r3
 8007524:	250a      	movs	r5, #10
 8007526:	4640      	mov	r0, r8
 8007528:	f810 2b01 	ldrb.w	r2, [r0], #1
 800752c:	3a30      	subs	r2, #48	; 0x30
 800752e:	2a09      	cmp	r2, #9
 8007530:	d903      	bls.n	800753a <_vfiprintf_r+0x1ca>
 8007532:	2b00      	cmp	r3, #0
 8007534:	d0c3      	beq.n	80074be <_vfiprintf_r+0x14e>
 8007536:	9105      	str	r1, [sp, #20]
 8007538:	e7c1      	b.n	80074be <_vfiprintf_r+0x14e>
 800753a:	fb05 2101 	mla	r1, r5, r1, r2
 800753e:	2301      	movs	r3, #1
 8007540:	4680      	mov	r8, r0
 8007542:	e7f0      	b.n	8007526 <_vfiprintf_r+0x1b6>
 8007544:	ab03      	add	r3, sp, #12
 8007546:	9300      	str	r3, [sp, #0]
 8007548:	4622      	mov	r2, r4
 800754a:	4b13      	ldr	r3, [pc, #76]	; (8007598 <_vfiprintf_r+0x228>)
 800754c:	a904      	add	r1, sp, #16
 800754e:	4630      	mov	r0, r6
 8007550:	f3af 8000 	nop.w
 8007554:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007558:	4681      	mov	r9, r0
 800755a:	d1d5      	bne.n	8007508 <_vfiprintf_r+0x198>
 800755c:	89a3      	ldrh	r3, [r4, #12]
 800755e:	065b      	lsls	r3, r3, #25
 8007560:	f53f af7e 	bmi.w	8007460 <_vfiprintf_r+0xf0>
 8007564:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007566:	e77d      	b.n	8007464 <_vfiprintf_r+0xf4>
 8007568:	ab03      	add	r3, sp, #12
 800756a:	9300      	str	r3, [sp, #0]
 800756c:	4622      	mov	r2, r4
 800756e:	4b0a      	ldr	r3, [pc, #40]	; (8007598 <_vfiprintf_r+0x228>)
 8007570:	a904      	add	r1, sp, #16
 8007572:	4630      	mov	r0, r6
 8007574:	f000 f888 	bl	8007688 <_printf_i>
 8007578:	e7ec      	b.n	8007554 <_vfiprintf_r+0x1e4>
 800757a:	bf00      	nop
 800757c:	08007f80 	.word	0x08007f80
 8007580:	08007fce 	.word	0x08007fce
 8007584:	08007fa0 	.word	0x08007fa0
 8007588:	08007f60 	.word	0x08007f60
 800758c:	08007fd4 	.word	0x08007fd4
 8007590:	08007fd8 	.word	0x08007fd8
 8007594:	00000000 	.word	0x00000000
 8007598:	0800734b 	.word	0x0800734b

0800759c <_printf_common>:
 800759c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075a0:	4691      	mov	r9, r2
 80075a2:	461f      	mov	r7, r3
 80075a4:	688a      	ldr	r2, [r1, #8]
 80075a6:	690b      	ldr	r3, [r1, #16]
 80075a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80075ac:	4293      	cmp	r3, r2
 80075ae:	bfb8      	it	lt
 80075b0:	4613      	movlt	r3, r2
 80075b2:	f8c9 3000 	str.w	r3, [r9]
 80075b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80075ba:	4606      	mov	r6, r0
 80075bc:	460c      	mov	r4, r1
 80075be:	b112      	cbz	r2, 80075c6 <_printf_common+0x2a>
 80075c0:	3301      	adds	r3, #1
 80075c2:	f8c9 3000 	str.w	r3, [r9]
 80075c6:	6823      	ldr	r3, [r4, #0]
 80075c8:	0699      	lsls	r1, r3, #26
 80075ca:	bf42      	ittt	mi
 80075cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80075d0:	3302      	addmi	r3, #2
 80075d2:	f8c9 3000 	strmi.w	r3, [r9]
 80075d6:	6825      	ldr	r5, [r4, #0]
 80075d8:	f015 0506 	ands.w	r5, r5, #6
 80075dc:	d107      	bne.n	80075ee <_printf_common+0x52>
 80075de:	f104 0a19 	add.w	sl, r4, #25
 80075e2:	68e3      	ldr	r3, [r4, #12]
 80075e4:	f8d9 2000 	ldr.w	r2, [r9]
 80075e8:	1a9b      	subs	r3, r3, r2
 80075ea:	42ab      	cmp	r3, r5
 80075ec:	dc28      	bgt.n	8007640 <_printf_common+0xa4>
 80075ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80075f2:	6822      	ldr	r2, [r4, #0]
 80075f4:	3300      	adds	r3, #0
 80075f6:	bf18      	it	ne
 80075f8:	2301      	movne	r3, #1
 80075fa:	0692      	lsls	r2, r2, #26
 80075fc:	d42d      	bmi.n	800765a <_printf_common+0xbe>
 80075fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007602:	4639      	mov	r1, r7
 8007604:	4630      	mov	r0, r6
 8007606:	47c0      	blx	r8
 8007608:	3001      	adds	r0, #1
 800760a:	d020      	beq.n	800764e <_printf_common+0xb2>
 800760c:	6823      	ldr	r3, [r4, #0]
 800760e:	68e5      	ldr	r5, [r4, #12]
 8007610:	f8d9 2000 	ldr.w	r2, [r9]
 8007614:	f003 0306 	and.w	r3, r3, #6
 8007618:	2b04      	cmp	r3, #4
 800761a:	bf08      	it	eq
 800761c:	1aad      	subeq	r5, r5, r2
 800761e:	68a3      	ldr	r3, [r4, #8]
 8007620:	6922      	ldr	r2, [r4, #16]
 8007622:	bf0c      	ite	eq
 8007624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007628:	2500      	movne	r5, #0
 800762a:	4293      	cmp	r3, r2
 800762c:	bfc4      	itt	gt
 800762e:	1a9b      	subgt	r3, r3, r2
 8007630:	18ed      	addgt	r5, r5, r3
 8007632:	f04f 0900 	mov.w	r9, #0
 8007636:	341a      	adds	r4, #26
 8007638:	454d      	cmp	r5, r9
 800763a:	d11a      	bne.n	8007672 <_printf_common+0xd6>
 800763c:	2000      	movs	r0, #0
 800763e:	e008      	b.n	8007652 <_printf_common+0xb6>
 8007640:	2301      	movs	r3, #1
 8007642:	4652      	mov	r2, sl
 8007644:	4639      	mov	r1, r7
 8007646:	4630      	mov	r0, r6
 8007648:	47c0      	blx	r8
 800764a:	3001      	adds	r0, #1
 800764c:	d103      	bne.n	8007656 <_printf_common+0xba>
 800764e:	f04f 30ff 	mov.w	r0, #4294967295
 8007652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007656:	3501      	adds	r5, #1
 8007658:	e7c3      	b.n	80075e2 <_printf_common+0x46>
 800765a:	18e1      	adds	r1, r4, r3
 800765c:	1c5a      	adds	r2, r3, #1
 800765e:	2030      	movs	r0, #48	; 0x30
 8007660:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007664:	4422      	add	r2, r4
 8007666:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800766a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800766e:	3302      	adds	r3, #2
 8007670:	e7c5      	b.n	80075fe <_printf_common+0x62>
 8007672:	2301      	movs	r3, #1
 8007674:	4622      	mov	r2, r4
 8007676:	4639      	mov	r1, r7
 8007678:	4630      	mov	r0, r6
 800767a:	47c0      	blx	r8
 800767c:	3001      	adds	r0, #1
 800767e:	d0e6      	beq.n	800764e <_printf_common+0xb2>
 8007680:	f109 0901 	add.w	r9, r9, #1
 8007684:	e7d8      	b.n	8007638 <_printf_common+0x9c>
	...

08007688 <_printf_i>:
 8007688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800768c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007690:	460c      	mov	r4, r1
 8007692:	7e09      	ldrb	r1, [r1, #24]
 8007694:	b085      	sub	sp, #20
 8007696:	296e      	cmp	r1, #110	; 0x6e
 8007698:	4617      	mov	r7, r2
 800769a:	4606      	mov	r6, r0
 800769c:	4698      	mov	r8, r3
 800769e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076a0:	f000 80b3 	beq.w	800780a <_printf_i+0x182>
 80076a4:	d822      	bhi.n	80076ec <_printf_i+0x64>
 80076a6:	2963      	cmp	r1, #99	; 0x63
 80076a8:	d036      	beq.n	8007718 <_printf_i+0x90>
 80076aa:	d80a      	bhi.n	80076c2 <_printf_i+0x3a>
 80076ac:	2900      	cmp	r1, #0
 80076ae:	f000 80b9 	beq.w	8007824 <_printf_i+0x19c>
 80076b2:	2958      	cmp	r1, #88	; 0x58
 80076b4:	f000 8083 	beq.w	80077be <_printf_i+0x136>
 80076b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80076c0:	e032      	b.n	8007728 <_printf_i+0xa0>
 80076c2:	2964      	cmp	r1, #100	; 0x64
 80076c4:	d001      	beq.n	80076ca <_printf_i+0x42>
 80076c6:	2969      	cmp	r1, #105	; 0x69
 80076c8:	d1f6      	bne.n	80076b8 <_printf_i+0x30>
 80076ca:	6820      	ldr	r0, [r4, #0]
 80076cc:	6813      	ldr	r3, [r2, #0]
 80076ce:	0605      	lsls	r5, r0, #24
 80076d0:	f103 0104 	add.w	r1, r3, #4
 80076d4:	d52a      	bpl.n	800772c <_printf_i+0xa4>
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6011      	str	r1, [r2, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	da03      	bge.n	80076e6 <_printf_i+0x5e>
 80076de:	222d      	movs	r2, #45	; 0x2d
 80076e0:	425b      	negs	r3, r3
 80076e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80076e6:	486f      	ldr	r0, [pc, #444]	; (80078a4 <_printf_i+0x21c>)
 80076e8:	220a      	movs	r2, #10
 80076ea:	e039      	b.n	8007760 <_printf_i+0xd8>
 80076ec:	2973      	cmp	r1, #115	; 0x73
 80076ee:	f000 809d 	beq.w	800782c <_printf_i+0x1a4>
 80076f2:	d808      	bhi.n	8007706 <_printf_i+0x7e>
 80076f4:	296f      	cmp	r1, #111	; 0x6f
 80076f6:	d020      	beq.n	800773a <_printf_i+0xb2>
 80076f8:	2970      	cmp	r1, #112	; 0x70
 80076fa:	d1dd      	bne.n	80076b8 <_printf_i+0x30>
 80076fc:	6823      	ldr	r3, [r4, #0]
 80076fe:	f043 0320 	orr.w	r3, r3, #32
 8007702:	6023      	str	r3, [r4, #0]
 8007704:	e003      	b.n	800770e <_printf_i+0x86>
 8007706:	2975      	cmp	r1, #117	; 0x75
 8007708:	d017      	beq.n	800773a <_printf_i+0xb2>
 800770a:	2978      	cmp	r1, #120	; 0x78
 800770c:	d1d4      	bne.n	80076b8 <_printf_i+0x30>
 800770e:	2378      	movs	r3, #120	; 0x78
 8007710:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007714:	4864      	ldr	r0, [pc, #400]	; (80078a8 <_printf_i+0x220>)
 8007716:	e055      	b.n	80077c4 <_printf_i+0x13c>
 8007718:	6813      	ldr	r3, [r2, #0]
 800771a:	1d19      	adds	r1, r3, #4
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	6011      	str	r1, [r2, #0]
 8007720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007728:	2301      	movs	r3, #1
 800772a:	e08c      	b.n	8007846 <_printf_i+0x1be>
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	6011      	str	r1, [r2, #0]
 8007730:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007734:	bf18      	it	ne
 8007736:	b21b      	sxthne	r3, r3
 8007738:	e7cf      	b.n	80076da <_printf_i+0x52>
 800773a:	6813      	ldr	r3, [r2, #0]
 800773c:	6825      	ldr	r5, [r4, #0]
 800773e:	1d18      	adds	r0, r3, #4
 8007740:	6010      	str	r0, [r2, #0]
 8007742:	0628      	lsls	r0, r5, #24
 8007744:	d501      	bpl.n	800774a <_printf_i+0xc2>
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	e002      	b.n	8007750 <_printf_i+0xc8>
 800774a:	0668      	lsls	r0, r5, #25
 800774c:	d5fb      	bpl.n	8007746 <_printf_i+0xbe>
 800774e:	881b      	ldrh	r3, [r3, #0]
 8007750:	4854      	ldr	r0, [pc, #336]	; (80078a4 <_printf_i+0x21c>)
 8007752:	296f      	cmp	r1, #111	; 0x6f
 8007754:	bf14      	ite	ne
 8007756:	220a      	movne	r2, #10
 8007758:	2208      	moveq	r2, #8
 800775a:	2100      	movs	r1, #0
 800775c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007760:	6865      	ldr	r5, [r4, #4]
 8007762:	60a5      	str	r5, [r4, #8]
 8007764:	2d00      	cmp	r5, #0
 8007766:	f2c0 8095 	blt.w	8007894 <_printf_i+0x20c>
 800776a:	6821      	ldr	r1, [r4, #0]
 800776c:	f021 0104 	bic.w	r1, r1, #4
 8007770:	6021      	str	r1, [r4, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d13d      	bne.n	80077f2 <_printf_i+0x16a>
 8007776:	2d00      	cmp	r5, #0
 8007778:	f040 808e 	bne.w	8007898 <_printf_i+0x210>
 800777c:	4665      	mov	r5, ip
 800777e:	2a08      	cmp	r2, #8
 8007780:	d10b      	bne.n	800779a <_printf_i+0x112>
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	07db      	lsls	r3, r3, #31
 8007786:	d508      	bpl.n	800779a <_printf_i+0x112>
 8007788:	6923      	ldr	r3, [r4, #16]
 800778a:	6862      	ldr	r2, [r4, #4]
 800778c:	429a      	cmp	r2, r3
 800778e:	bfde      	ittt	le
 8007790:	2330      	movle	r3, #48	; 0x30
 8007792:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007796:	f105 35ff 	addle.w	r5, r5, #4294967295
 800779a:	ebac 0305 	sub.w	r3, ip, r5
 800779e:	6123      	str	r3, [r4, #16]
 80077a0:	f8cd 8000 	str.w	r8, [sp]
 80077a4:	463b      	mov	r3, r7
 80077a6:	aa03      	add	r2, sp, #12
 80077a8:	4621      	mov	r1, r4
 80077aa:	4630      	mov	r0, r6
 80077ac:	f7ff fef6 	bl	800759c <_printf_common>
 80077b0:	3001      	adds	r0, #1
 80077b2:	d14d      	bne.n	8007850 <_printf_i+0x1c8>
 80077b4:	f04f 30ff 	mov.w	r0, #4294967295
 80077b8:	b005      	add	sp, #20
 80077ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077be:	4839      	ldr	r0, [pc, #228]	; (80078a4 <_printf_i+0x21c>)
 80077c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80077c4:	6813      	ldr	r3, [r2, #0]
 80077c6:	6821      	ldr	r1, [r4, #0]
 80077c8:	1d1d      	adds	r5, r3, #4
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6015      	str	r5, [r2, #0]
 80077ce:	060a      	lsls	r2, r1, #24
 80077d0:	d50b      	bpl.n	80077ea <_printf_i+0x162>
 80077d2:	07ca      	lsls	r2, r1, #31
 80077d4:	bf44      	itt	mi
 80077d6:	f041 0120 	orrmi.w	r1, r1, #32
 80077da:	6021      	strmi	r1, [r4, #0]
 80077dc:	b91b      	cbnz	r3, 80077e6 <_printf_i+0x15e>
 80077de:	6822      	ldr	r2, [r4, #0]
 80077e0:	f022 0220 	bic.w	r2, r2, #32
 80077e4:	6022      	str	r2, [r4, #0]
 80077e6:	2210      	movs	r2, #16
 80077e8:	e7b7      	b.n	800775a <_printf_i+0xd2>
 80077ea:	064d      	lsls	r5, r1, #25
 80077ec:	bf48      	it	mi
 80077ee:	b29b      	uxthmi	r3, r3
 80077f0:	e7ef      	b.n	80077d2 <_printf_i+0x14a>
 80077f2:	4665      	mov	r5, ip
 80077f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80077f8:	fb02 3311 	mls	r3, r2, r1, r3
 80077fc:	5cc3      	ldrb	r3, [r0, r3]
 80077fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007802:	460b      	mov	r3, r1
 8007804:	2900      	cmp	r1, #0
 8007806:	d1f5      	bne.n	80077f4 <_printf_i+0x16c>
 8007808:	e7b9      	b.n	800777e <_printf_i+0xf6>
 800780a:	6813      	ldr	r3, [r2, #0]
 800780c:	6825      	ldr	r5, [r4, #0]
 800780e:	6961      	ldr	r1, [r4, #20]
 8007810:	1d18      	adds	r0, r3, #4
 8007812:	6010      	str	r0, [r2, #0]
 8007814:	0628      	lsls	r0, r5, #24
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	d501      	bpl.n	800781e <_printf_i+0x196>
 800781a:	6019      	str	r1, [r3, #0]
 800781c:	e002      	b.n	8007824 <_printf_i+0x19c>
 800781e:	066a      	lsls	r2, r5, #25
 8007820:	d5fb      	bpl.n	800781a <_printf_i+0x192>
 8007822:	8019      	strh	r1, [r3, #0]
 8007824:	2300      	movs	r3, #0
 8007826:	6123      	str	r3, [r4, #16]
 8007828:	4665      	mov	r5, ip
 800782a:	e7b9      	b.n	80077a0 <_printf_i+0x118>
 800782c:	6813      	ldr	r3, [r2, #0]
 800782e:	1d19      	adds	r1, r3, #4
 8007830:	6011      	str	r1, [r2, #0]
 8007832:	681d      	ldr	r5, [r3, #0]
 8007834:	6862      	ldr	r2, [r4, #4]
 8007836:	2100      	movs	r1, #0
 8007838:	4628      	mov	r0, r5
 800783a:	f7f8 fcd1 	bl	80001e0 <memchr>
 800783e:	b108      	cbz	r0, 8007844 <_printf_i+0x1bc>
 8007840:	1b40      	subs	r0, r0, r5
 8007842:	6060      	str	r0, [r4, #4]
 8007844:	6863      	ldr	r3, [r4, #4]
 8007846:	6123      	str	r3, [r4, #16]
 8007848:	2300      	movs	r3, #0
 800784a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800784e:	e7a7      	b.n	80077a0 <_printf_i+0x118>
 8007850:	6923      	ldr	r3, [r4, #16]
 8007852:	462a      	mov	r2, r5
 8007854:	4639      	mov	r1, r7
 8007856:	4630      	mov	r0, r6
 8007858:	47c0      	blx	r8
 800785a:	3001      	adds	r0, #1
 800785c:	d0aa      	beq.n	80077b4 <_printf_i+0x12c>
 800785e:	6823      	ldr	r3, [r4, #0]
 8007860:	079b      	lsls	r3, r3, #30
 8007862:	d413      	bmi.n	800788c <_printf_i+0x204>
 8007864:	68e0      	ldr	r0, [r4, #12]
 8007866:	9b03      	ldr	r3, [sp, #12]
 8007868:	4298      	cmp	r0, r3
 800786a:	bfb8      	it	lt
 800786c:	4618      	movlt	r0, r3
 800786e:	e7a3      	b.n	80077b8 <_printf_i+0x130>
 8007870:	2301      	movs	r3, #1
 8007872:	464a      	mov	r2, r9
 8007874:	4639      	mov	r1, r7
 8007876:	4630      	mov	r0, r6
 8007878:	47c0      	blx	r8
 800787a:	3001      	adds	r0, #1
 800787c:	d09a      	beq.n	80077b4 <_printf_i+0x12c>
 800787e:	3501      	adds	r5, #1
 8007880:	68e3      	ldr	r3, [r4, #12]
 8007882:	9a03      	ldr	r2, [sp, #12]
 8007884:	1a9b      	subs	r3, r3, r2
 8007886:	42ab      	cmp	r3, r5
 8007888:	dcf2      	bgt.n	8007870 <_printf_i+0x1e8>
 800788a:	e7eb      	b.n	8007864 <_printf_i+0x1dc>
 800788c:	2500      	movs	r5, #0
 800788e:	f104 0919 	add.w	r9, r4, #25
 8007892:	e7f5      	b.n	8007880 <_printf_i+0x1f8>
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1ac      	bne.n	80077f2 <_printf_i+0x16a>
 8007898:	7803      	ldrb	r3, [r0, #0]
 800789a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800789e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078a2:	e76c      	b.n	800777e <_printf_i+0xf6>
 80078a4:	08007fdf 	.word	0x08007fdf
 80078a8:	08007ff0 	.word	0x08007ff0

080078ac <_putc_r>:
 80078ac:	b570      	push	{r4, r5, r6, lr}
 80078ae:	460d      	mov	r5, r1
 80078b0:	4614      	mov	r4, r2
 80078b2:	4606      	mov	r6, r0
 80078b4:	b118      	cbz	r0, 80078be <_putc_r+0x12>
 80078b6:	6983      	ldr	r3, [r0, #24]
 80078b8:	b90b      	cbnz	r3, 80078be <_putc_r+0x12>
 80078ba:	f7ff f8cd 	bl	8006a58 <__sinit>
 80078be:	4b13      	ldr	r3, [pc, #76]	; (800790c <_putc_r+0x60>)
 80078c0:	429c      	cmp	r4, r3
 80078c2:	d112      	bne.n	80078ea <_putc_r+0x3e>
 80078c4:	6874      	ldr	r4, [r6, #4]
 80078c6:	68a3      	ldr	r3, [r4, #8]
 80078c8:	3b01      	subs	r3, #1
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	60a3      	str	r3, [r4, #8]
 80078ce:	da16      	bge.n	80078fe <_putc_r+0x52>
 80078d0:	69a2      	ldr	r2, [r4, #24]
 80078d2:	4293      	cmp	r3, r2
 80078d4:	db02      	blt.n	80078dc <_putc_r+0x30>
 80078d6:	b2eb      	uxtb	r3, r5
 80078d8:	2b0a      	cmp	r3, #10
 80078da:	d110      	bne.n	80078fe <_putc_r+0x52>
 80078dc:	4622      	mov	r2, r4
 80078de:	4629      	mov	r1, r5
 80078e0:	4630      	mov	r0, r6
 80078e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80078e6:	f7ff bba9 	b.w	800703c <__swbuf_r>
 80078ea:	4b09      	ldr	r3, [pc, #36]	; (8007910 <_putc_r+0x64>)
 80078ec:	429c      	cmp	r4, r3
 80078ee:	d101      	bne.n	80078f4 <_putc_r+0x48>
 80078f0:	68b4      	ldr	r4, [r6, #8]
 80078f2:	e7e8      	b.n	80078c6 <_putc_r+0x1a>
 80078f4:	4b07      	ldr	r3, [pc, #28]	; (8007914 <_putc_r+0x68>)
 80078f6:	429c      	cmp	r4, r3
 80078f8:	bf08      	it	eq
 80078fa:	68f4      	ldreq	r4, [r6, #12]
 80078fc:	e7e3      	b.n	80078c6 <_putc_r+0x1a>
 80078fe:	6823      	ldr	r3, [r4, #0]
 8007900:	1c5a      	adds	r2, r3, #1
 8007902:	6022      	str	r2, [r4, #0]
 8007904:	701d      	strb	r5, [r3, #0]
 8007906:	b2e8      	uxtb	r0, r5
 8007908:	bd70      	pop	{r4, r5, r6, pc}
 800790a:	bf00      	nop
 800790c:	08007f80 	.word	0x08007f80
 8007910:	08007fa0 	.word	0x08007fa0
 8007914:	08007f60 	.word	0x08007f60

08007918 <_read_r>:
 8007918:	b538      	push	{r3, r4, r5, lr}
 800791a:	4c07      	ldr	r4, [pc, #28]	; (8007938 <_read_r+0x20>)
 800791c:	4605      	mov	r5, r0
 800791e:	4608      	mov	r0, r1
 8007920:	4611      	mov	r1, r2
 8007922:	2200      	movs	r2, #0
 8007924:	6022      	str	r2, [r4, #0]
 8007926:	461a      	mov	r2, r3
 8007928:	f7fa f8b0 	bl	8001a8c <_read>
 800792c:	1c43      	adds	r3, r0, #1
 800792e:	d102      	bne.n	8007936 <_read_r+0x1e>
 8007930:	6823      	ldr	r3, [r4, #0]
 8007932:	b103      	cbz	r3, 8007936 <_read_r+0x1e>
 8007934:	602b      	str	r3, [r5, #0]
 8007936:	bd38      	pop	{r3, r4, r5, pc}
 8007938:	2000071c 	.word	0x2000071c

0800793c <strchr>:
 800793c:	b2c9      	uxtb	r1, r1
 800793e:	4603      	mov	r3, r0
 8007940:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007944:	b11a      	cbz	r2, 800794e <strchr+0x12>
 8007946:	428a      	cmp	r2, r1
 8007948:	d1f9      	bne.n	800793e <strchr+0x2>
 800794a:	4618      	mov	r0, r3
 800794c:	4770      	bx	lr
 800794e:	2900      	cmp	r1, #0
 8007950:	bf18      	it	ne
 8007952:	2300      	movne	r3, #0
 8007954:	e7f9      	b.n	800794a <strchr+0xe>

08007956 <__ascii_wctomb>:
 8007956:	b149      	cbz	r1, 800796c <__ascii_wctomb+0x16>
 8007958:	2aff      	cmp	r2, #255	; 0xff
 800795a:	bf85      	ittet	hi
 800795c:	238a      	movhi	r3, #138	; 0x8a
 800795e:	6003      	strhi	r3, [r0, #0]
 8007960:	700a      	strbls	r2, [r1, #0]
 8007962:	f04f 30ff 	movhi.w	r0, #4294967295
 8007966:	bf98      	it	ls
 8007968:	2001      	movls	r0, #1
 800796a:	4770      	bx	lr
 800796c:	4608      	mov	r0, r1
 800796e:	4770      	bx	lr

08007970 <_fstat_r>:
 8007970:	b538      	push	{r3, r4, r5, lr}
 8007972:	4c07      	ldr	r4, [pc, #28]	; (8007990 <_fstat_r+0x20>)
 8007974:	2300      	movs	r3, #0
 8007976:	4605      	mov	r5, r0
 8007978:	4608      	mov	r0, r1
 800797a:	4611      	mov	r1, r2
 800797c:	6023      	str	r3, [r4, #0]
 800797e:	f7fa f8ca 	bl	8001b16 <_fstat>
 8007982:	1c43      	adds	r3, r0, #1
 8007984:	d102      	bne.n	800798c <_fstat_r+0x1c>
 8007986:	6823      	ldr	r3, [r4, #0]
 8007988:	b103      	cbz	r3, 800798c <_fstat_r+0x1c>
 800798a:	602b      	str	r3, [r5, #0]
 800798c:	bd38      	pop	{r3, r4, r5, pc}
 800798e:	bf00      	nop
 8007990:	2000071c 	.word	0x2000071c

08007994 <_isatty_r>:
 8007994:	b538      	push	{r3, r4, r5, lr}
 8007996:	4c06      	ldr	r4, [pc, #24]	; (80079b0 <_isatty_r+0x1c>)
 8007998:	2300      	movs	r3, #0
 800799a:	4605      	mov	r5, r0
 800799c:	4608      	mov	r0, r1
 800799e:	6023      	str	r3, [r4, #0]
 80079a0:	f7fa f8c9 	bl	8001b36 <_isatty>
 80079a4:	1c43      	adds	r3, r0, #1
 80079a6:	d102      	bne.n	80079ae <_isatty_r+0x1a>
 80079a8:	6823      	ldr	r3, [r4, #0]
 80079aa:	b103      	cbz	r3, 80079ae <_isatty_r+0x1a>
 80079ac:	602b      	str	r3, [r5, #0]
 80079ae:	bd38      	pop	{r3, r4, r5, pc}
 80079b0:	2000071c 	.word	0x2000071c

080079b4 <_init>:
 80079b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b6:	bf00      	nop
 80079b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ba:	bc08      	pop	{r3}
 80079bc:	469e      	mov	lr, r3
 80079be:	4770      	bx	lr

080079c0 <_fini>:
 80079c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c2:	bf00      	nop
 80079c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079c6:	bc08      	pop	{r3}
 80079c8:	469e      	mov	lr, r3
 80079ca:	4770      	bx	lr
