
Nucleo_L476RG_XBLE1_SampleApp_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007528  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  080076b8  080076b8  000176b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b00  08007b00  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08007b00  08007b00  00017b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b08  08007b08  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b08  08007b08  00017b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b0c  08007b0c  00017b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08007b10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000052c  200001f4  08007d04  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000720  08007d04  00020720  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021291  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000390d  00000000  00000000  000414b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012f0  00000000  00000000  00044dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001180  00000000  00000000  000460b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b925  00000000  00000000  00047238  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001280a  00000000  00000000  00072b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f6c0d  00000000  00000000  00085367  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017bf74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000559c  00000000  00000000  0017bff0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080076a0 	.word	0x080076a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	080076a0 	.word	0x080076a0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", ms/(60*60*1000)%24, ms/(60*1000)%60, (ms/1000)%60, ms%1000);
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08e      	sub	sp, #56	; 0x38
 8000584:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  uint8_t CLIENT_BDADDR[] = {0xbb, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8000586:	4a73      	ldr	r2, [pc, #460]	; (8000754 <MX_BlueNRG_MS_Init+0x1d4>)
 8000588:	f107 031c 	add.w	r3, r7, #28
 800058c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000590:	6018      	str	r0, [r3, #0]
 8000592:	3304      	adds	r3, #4
 8000594:	8019      	strh	r1, [r3, #0]
  uint8_t SERVER_BDADDR[] = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8000596:	4a70      	ldr	r2, [pc, #448]	; (8000758 <MX_BlueNRG_MS_Init+0x1d8>)
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005a0:	6018      	str	r0, [r3, #0]
 80005a2:	3304      	adds	r3, #4
 80005a4:	8019      	strh	r1, [r3, #0]

  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 80005a6:	f000 f8fd 	bl	80007a4 <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 80005aa:	2000      	movs	r0, #0
 80005ac:	f001 fb16 	bl	8001bdc <BSP_PB_GetState>
 80005b0:	4603      	mov	r3, r0
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	4b69      	ldr	r3, [pc, #420]	; (800075c <MX_BlueNRG_MS_Init+0x1dc>)
 80005b6:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 80005b8:	2100      	movs	r1, #0
 80005ba:	4869      	ldr	r0, [pc, #420]	; (8000760 <MX_BlueNRG_MS_Init+0x1e0>)
 80005bc:	f005 fce0 	bl	8005f80 <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 80005c0:	1cba      	adds	r2, r7, #2
 80005c2:	1d7b      	adds	r3, r7, #5
 80005c4:	4611      	mov	r1, r2
 80005c6:	4618      	mov	r0, r3
 80005c8:	f005 fb50 	bl	8005c6c <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 80005cc:	f005 fb92 	bl	8005cf4 <hci_reset>

  HAL_Delay(100);
 80005d0:	2064      	movs	r0, #100	; 0x64
 80005d2:	f001 fca1 	bl	8001f18 <HAL_Delay>

  printf("HWver %d, FWver %d\n", hwVersion, fwVersion);
 80005d6:	797b      	ldrb	r3, [r7, #5]
 80005d8:	4619      	mov	r1, r3
 80005da:	887b      	ldrh	r3, [r7, #2]
 80005dc:	461a      	mov	r2, r3
 80005de:	4861      	ldr	r0, [pc, #388]	; (8000764 <MX_BlueNRG_MS_Init+0x1e4>)
 80005e0:	f006 fa3a 	bl	8006a58 <iprintf>

  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 80005e4:	797b      	ldrb	r3, [r7, #5]
 80005e6:	2b30      	cmp	r3, #48	; 0x30
 80005e8:	d902      	bls.n	80005f0 <MX_BlueNRG_MS_Init+0x70>
    bnrg_expansion_board = IDB05A1;
 80005ea:	4b5f      	ldr	r3, [pc, #380]	; (8000768 <MX_BlueNRG_MS_Init+0x1e8>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	701a      	strb	r2, [r3, #0]
  }

  if (BLE_Role == CLIENT) {
 80005f0:	4b5e      	ldr	r3, [pc, #376]	; (800076c <MX_BlueNRG_MS_Init+0x1ec>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d109      	bne.n	800060c <MX_BlueNRG_MS_Init+0x8c>
    BLUENRG_memcpy(bdaddr, CLIENT_BDADDR, sizeof(CLIENT_BDADDR));
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	f107 021c 	add.w	r2, r7, #28
 8000600:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000604:	6018      	str	r0, [r3, #0]
 8000606:	3304      	adds	r3, #4
 8000608:	8019      	strh	r1, [r3, #0]
 800060a:	e008      	b.n	800061e <MX_BlueNRG_MS_Init+0x9e>
  } else {
    BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	f107 0214 	add.w	r2, r7, #20
 8000614:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000618:	6018      	str	r0, [r3, #0]
 800061a:	3304      	adds	r3, #4
 800061c:	8019      	strh	r1, [r3, #0]
  }

  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	461a      	mov	r2, r3
 8000624:	2106      	movs	r1, #6
 8000626:	2000      	movs	r0, #0
 8000628:	f005 fa87 	bl	8005b3a <aci_hal_write_config_data>
 800062c:	4603      	mov	r3, r0
 800062e:	627b      	str	r3, [r7, #36]	; 0x24
                                  CONFIG_DATA_PUBADDR_LEN,
                                  bdaddr);
  if (ret) {
 8000630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000632:	2b00      	cmp	r3, #0
 8000634:	d003      	beq.n	800063e <MX_BlueNRG_MS_Init+0xbe>
    printf("Setting BD_ADDR failed 0x%02x.\n", ret);
 8000636:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000638:	484d      	ldr	r0, [pc, #308]	; (8000770 <MX_BlueNRG_MS_Init+0x1f0>)
 800063a:	f006 fa0d 	bl	8006a58 <iprintf>
  }

  ret = aci_gatt_init();
 800063e:	f004 ff17 	bl	8005470 <aci_gatt_init>
 8000642:	4603      	mov	r3, r0
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
  if (ret) {
 8000646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000648:	2b00      	cmp	r3, #0
 800064a:	d002      	beq.n	8000652 <MX_BlueNRG_MS_Init+0xd2>
    printf("GATT_Init failed.\n");
 800064c:	4849      	ldr	r0, [pc, #292]	; (8000774 <MX_BlueNRG_MS_Init+0x1f4>)
 800064e:	f006 fa8b 	bl	8006b68 <puts>
  }

  if (BLE_Role == SERVER) {
 8000652:	4b46      	ldr	r3, [pc, #280]	; (800076c <MX_BlueNRG_MS_Init+0x1ec>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d11e      	bne.n	8000698 <MX_BlueNRG_MS_Init+0x118>
    if (bnrg_expansion_board == IDB05A1) {
 800065a:	4b43      	ldr	r3, [pc, #268]	; (8000768 <MX_BlueNRG_MS_Init+0x1e8>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d10f      	bne.n	8000682 <MX_BlueNRG_MS_Init+0x102>
      ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000662:	f107 020a 	add.w	r2, r7, #10
 8000666:	1dbb      	adds	r3, r7, #6
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	4613      	mov	r3, r2
 8000672:	2207      	movs	r2, #7
 8000674:	2100      	movs	r1, #0
 8000676:	2001      	movs	r0, #1
 8000678:	f004 fcc6 	bl	8005008 <aci_gap_init_IDB05A1>
 800067c:	4603      	mov	r3, r0
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
 8000680:	e028      	b.n	80006d4 <MX_BlueNRG_MS_Init+0x154>
    }
    else {
      ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000682:	1dbb      	adds	r3, r7, #6
 8000684:	f107 0208 	add.w	r2, r7, #8
 8000688:	f107 010a 	add.w	r1, r7, #10
 800068c:	2001      	movs	r0, #1
 800068e:	f004 fd0b 	bl	80050a8 <aci_gap_init_IDB04A1>
 8000692:	4603      	mov	r3, r0
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
 8000696:	e01d      	b.n	80006d4 <MX_BlueNRG_MS_Init+0x154>
    }
  }
  else {
    if (bnrg_expansion_board == IDB05A1) {
 8000698:	4b33      	ldr	r3, [pc, #204]	; (8000768 <MX_BlueNRG_MS_Init+0x1e8>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d10f      	bne.n	80006c0 <MX_BlueNRG_MS_Init+0x140>
      ret = aci_gap_init_IDB05A1(GAP_CENTRAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80006a0:	f107 020a 	add.w	r2, r7, #10
 80006a4:	1dbb      	adds	r3, r7, #6
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	f107 0308 	add.w	r3, r7, #8
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	4613      	mov	r3, r2
 80006b0:	2207      	movs	r2, #7
 80006b2:	2100      	movs	r1, #0
 80006b4:	2004      	movs	r0, #4
 80006b6:	f004 fca7 	bl	8005008 <aci_gap_init_IDB05A1>
 80006ba:	4603      	mov	r3, r0
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
 80006be:	e009      	b.n	80006d4 <MX_BlueNRG_MS_Init+0x154>
    }
    else {
      ret = aci_gap_init_IDB04A1(GAP_CENTRAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80006c0:	1dbb      	adds	r3, r7, #6
 80006c2:	f107 0208 	add.w	r2, r7, #8
 80006c6:	f107 010a 	add.w	r1, r7, #10
 80006ca:	2003      	movs	r0, #3
 80006cc:	f004 fcec 	bl	80050a8 <aci_gap_init_IDB04A1>
 80006d0:	4603      	mov	r3, r0
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  if (ret != BLE_STATUS_SUCCESS) {
 80006d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d002      	beq.n	80006e0 <MX_BlueNRG_MS_Init+0x160>
    printf("GAP_Init failed.\n");
 80006da:	4827      	ldr	r0, [pc, #156]	; (8000778 <MX_BlueNRG_MS_Init+0x1f8>)
 80006dc:	f006 fa44 	bl	8006b68 <puts>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 80006e0:	2301      	movs	r3, #1
 80006e2:	9303      	str	r3, [sp, #12]
 80006e4:	4b25      	ldr	r3, [pc, #148]	; (800077c <MX_BlueNRG_MS_Init+0x1fc>)
 80006e6:	9302      	str	r3, [sp, #8]
 80006e8:	2300      	movs	r3, #0
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	2310      	movs	r3, #16
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2307      	movs	r3, #7
 80006f2:	2200      	movs	r2, #0
 80006f4:	2100      	movs	r1, #0
 80006f6:	2001      	movs	r0, #1
 80006f8:	f004 fe0f 	bl	800531a <aci_gap_set_auth_requirement>
 80006fc:	4603      	mov	r3, r0
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret == BLE_STATUS_SUCCESS) {
 8000700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000702:	2b00      	cmp	r3, #0
 8000704:	d102      	bne.n	800070c <MX_BlueNRG_MS_Init+0x18c>
    printf("BLE Stack Initialized.\n");
 8000706:	481e      	ldr	r0, [pc, #120]	; (8000780 <MX_BlueNRG_MS_Init+0x200>)
 8000708:	f006 fa2e 	bl	8006b68 <puts>
  }

  if (BLE_Role == SERVER) {
 800070c:	4b17      	ldr	r3, [pc, #92]	; (800076c <MX_BlueNRG_MS_Init+0x1ec>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d111      	bne.n	8000738 <MX_BlueNRG_MS_Init+0x1b8>
    printf("SERVER: BLE Stack Initialized\n");
 8000714:	481b      	ldr	r0, [pc, #108]	; (8000784 <MX_BlueNRG_MS_Init+0x204>)
 8000716:	f006 fa27 	bl	8006b68 <puts>
    ret = Add_Sample_Service();
 800071a:	f000 f933 	bl	8000984 <Add_Sample_Service>
 800071e:	4603      	mov	r3, r0
 8000720:	627b      	str	r3, [r7, #36]	; 0x24

    if (ret == BLE_STATUS_SUCCESS)
 8000722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000724:	2b00      	cmp	r3, #0
 8000726:	d103      	bne.n	8000730 <MX_BlueNRG_MS_Init+0x1b0>
      printf("Service added successfully.\n");
 8000728:	4817      	ldr	r0, [pc, #92]	; (8000788 <MX_BlueNRG_MS_Init+0x208>)
 800072a:	f006 fa1d 	bl	8006b68 <puts>
 800072e:	e006      	b.n	800073e <MX_BlueNRG_MS_Init+0x1be>
    else
      printf("Error while adding service.\n");
 8000730:	4816      	ldr	r0, [pc, #88]	; (800078c <MX_BlueNRG_MS_Init+0x20c>)
 8000732:	f006 fa19 	bl	8006b68 <puts>
 8000736:	e002      	b.n	800073e <MX_BlueNRG_MS_Init+0x1be>

  } else {
    printf("CLIENT: BLE Stack Initialized\n");
 8000738:	4815      	ldr	r0, [pc, #84]	; (8000790 <MX_BlueNRG_MS_Init+0x210>)
 800073a:	f006 fa15 	bl	8006b68 <puts>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 800073e:	2104      	movs	r1, #4
 8000740:	2001      	movs	r0, #1
 8000742:	f005 fa62 	bl	8005c0a <aci_hal_set_tx_power_level>
 8000746:	4603      	mov	r3, r0
 8000748:	627b      	str	r3, [r7, #36]	; 0x24

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 800074a:	bf00      	nop
 800074c:	3728      	adds	r7, #40	; 0x28
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	080077a4 	.word	0x080077a4
 8000758:	080077ac 	.word	0x080077ac
 800075c:	20000000 	.word	0x20000000
 8000760:	08000e31 	.word	0x08000e31
 8000764:	080076b8 	.word	0x080076b8
 8000768:	20000210 	.word	0x20000210
 800076c:	20000001 	.word	0x20000001
 8000770:	080076cc 	.word	0x080076cc
 8000774:	080076ec 	.word	0x080076ec
 8000778:	08007700 	.word	0x08007700
 800077c:	0001e240 	.word	0x0001e240
 8000780:	08007714 	.word	0x08007714
 8000784:	0800772c 	.word	0x0800772c
 8000788:	0800774c 	.word	0x0800774c
 800078c:	08007768 	.word	0x08007768
 8000790:	08007784 	.word	0x08007784

08000794 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 8000798:	f000 f812 	bl	80007c0 <User_Process>
  hci_user_evt_proc();
 800079c:	f005 fd6a 	bl	8006274 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80007a8:	2101      	movs	r1, #1
 80007aa:	2000      	movs	r0, #0
 80007ac:	f001 f9c2 	bl	8001b34 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 80007b0:	2000      	movs	r0, #0
 80007b2:	f001 f92d 	bl	8001a10 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f001 fa6e 	bl	8001c98 <BSP_COM_Init>
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}

080007c0 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 80007c0:	b5b0      	push	{r4, r5, r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
  if (set_connectable)
 80007c6:	4b3d      	ldr	r3, [pc, #244]	; (80008bc <User_Process+0xfc>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d00b      	beq.n	80007e8 <User_Process+0x28>
  {
    /* Establish connection with remote device */
    Make_Connection();
 80007d0:	f000 f94a 	bl	8000a68 <Make_Connection>
    set_connectable = FALSE;
 80007d4:	4b39      	ldr	r3, [pc, #228]	; (80008bc <User_Process+0xfc>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]
    user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 80007da:	2000      	movs	r0, #0
 80007dc:	f001 f9fe 	bl	8001bdc <BSP_PB_GetState>
 80007e0:	4603      	mov	r3, r0
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	4b36      	ldr	r3, [pc, #216]	; (80008c0 <User_Process+0x100>)
 80007e6:	701a      	strb	r2, [r3, #0]
  }

  if (BLE_Role == CLIENT)
 80007e8:	4b36      	ldr	r3, [pc, #216]	; (80008c4 <User_Process+0x104>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d12e      	bne.n	800084e <User_Process+0x8e>
  {
    /* Start TX handle Characteristic dynamic discovery if not yet done */
    if (connected && !end_read_tx_char_handle){
 80007f0:	4b35      	ldr	r3, [pc, #212]	; (80008c8 <User_Process+0x108>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d007      	beq.n	8000808 <User_Process+0x48>
 80007f8:	4b34      	ldr	r3, [pc, #208]	; (80008cc <User_Process+0x10c>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d102      	bne.n	8000808 <User_Process+0x48>
      startReadTXCharHandle();
 8000802:	f000 f99b 	bl	8000b3c <startReadTXCharHandle>
 8000806:	e00a      	b.n	800081e <User_Process+0x5e>
    }
    /* Start RX handle Characteristic dynamic discovery if not yet done */
    else if (connected && !end_read_rx_char_handle){
 8000808:	4b2f      	ldr	r3, [pc, #188]	; (80008c8 <User_Process+0x108>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d006      	beq.n	800081e <User_Process+0x5e>
 8000810:	4b2f      	ldr	r3, [pc, #188]	; (80008d0 <User_Process+0x110>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2b00      	cmp	r3, #0
 8000818:	d101      	bne.n	800081e <User_Process+0x5e>
      startReadRXCharHandle();
 800081a:	f000 f9b5 	bl	8000b88 <startReadRXCharHandle>
    }

    if (connected && end_read_tx_char_handle && end_read_rx_char_handle && !notification_enabled)
 800081e:	4b2a      	ldr	r3, [pc, #168]	; (80008c8 <User_Process+0x108>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d013      	beq.n	800084e <User_Process+0x8e>
 8000826:	4b29      	ldr	r3, [pc, #164]	; (80008cc <User_Process+0x10c>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	b2db      	uxtb	r3, r3
 800082c:	2b00      	cmp	r3, #0
 800082e:	d00e      	beq.n	800084e <User_Process+0x8e>
 8000830:	4b27      	ldr	r3, [pc, #156]	; (80008d0 <User_Process+0x110>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	2b00      	cmp	r3, #0
 8000838:	d009      	beq.n	800084e <User_Process+0x8e>
 800083a:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <User_Process+0x114>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b00      	cmp	r3, #0
 8000842:	d104      	bne.n	800084e <User_Process+0x8e>
    {
      BSP_LED_Off(LED2); //end of the connection and chars discovery phase
 8000844:	2000      	movs	r0, #0
 8000846:	f001 f90b 	bl	8001a60 <BSP_LED_Off>
      enableNotification();
 800084a:	f000 fa19 	bl	8000c80 <enableNotification>
    }
  }

  /* Check if the User Button has been pushed */
  if (user_button_pressed)
 800084e:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <User_Process+0x118>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	b2db      	uxtb	r3, r3
 8000854:	2b00      	cmp	r3, #0
 8000856:	d02c      	beq.n	80008b2 <User_Process+0xf2>
  {
    /* Debouncing */
    HAL_Delay(50);
 8000858:	2032      	movs	r0, #50	; 0x32
 800085a:	f001 fb5d 	bl	8001f18 <HAL_Delay>

    /* Wait until the User Button is released */
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);
 800085e:	bf00      	nop
 8000860:	2000      	movs	r0, #0
 8000862:	f001 f9bb 	bl	8001bdc <BSP_PB_GetState>
 8000866:	4602      	mov	r2, r0
 8000868:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <User_Process+0x100>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2b00      	cmp	r3, #0
 8000870:	bf0c      	ite	eq
 8000872:	2301      	moveq	r3, #1
 8000874:	2300      	movne	r3, #0
 8000876:	b2db      	uxtb	r3, r3
 8000878:	429a      	cmp	r2, r3
 800087a:	d0f1      	beq.n	8000860 <User_Process+0xa0>

    /* Debouncing */
    HAL_Delay(50);
 800087c:	2032      	movs	r0, #50	; 0x32
 800087e:	f001 fb4b 	bl	8001f18 <HAL_Delay>

    if (connected && notification_enabled)
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <User_Process+0x108>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d010      	beq.n	80008ac <User_Process+0xec>
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <User_Process+0x114>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2b00      	cmp	r3, #0
 8000892:	d00b      	beq.n	80008ac <User_Process+0xec>
    {
      /* Send a toggle command to the remote device */
      uint8_t data[20] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J'};
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <User_Process+0x11c>)
 8000896:	1d3c      	adds	r4, r7, #4
 8000898:	461d      	mov	r5, r3
 800089a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800089c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800089e:	682b      	ldr	r3, [r5, #0]
 80008a0:	6023      	str	r3, [r4, #0]
      sendData(data, sizeof(data));
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2114      	movs	r1, #20
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 f9ba 	bl	8000c20 <sendData>
                                * is called in main().
                                * E.g. it can be enabled for debugging. */
    }

    /* Reset the User Button flag */
    user_button_pressed = 0;
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <User_Process+0x118>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
  }
}
 80008b2:	bf00      	nop
 80008b4:	3718      	adds	r7, #24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bdb0      	pop	{r4, r5, r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000002 	.word	0x20000002
 80008c0:	20000000 	.word	0x20000000
 80008c4:	20000001 	.word	0x20000001
 80008c8:	20000214 	.word	0x20000214
 80008cc:	2000021d 	.word	0x2000021d
 80008d0:	2000021e 	.word	0x2000021e
 80008d4:	2000021a 	.word	0x2000021a
 80008d8:	20000211 	.word	0x20000211
 80008dc:	080077b4 	.word	0x080077b4

080008e0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 80008ea:	4b04      	ldr	r3, [pc, #16]	; (80008fc <BSP_PB_Callback+0x1c>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	701a      	strb	r2, [r3, #0]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	20000211 	.word	0x20000211

08000900 <BLE_str2uuid>:
 * @}
 */

/* USER CODE BEGIN 0 */

HAL_StatusTypeDef BLE_str2uuid(char *uuid128, uint8_t *uuid){
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
int strCounter=0;      // need two counters: one for uuid string and
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
int hexCounter=15;      // another one for destination uuid array (size=16)
 800090e:	230f      	movs	r3, #15
 8000910:	613b      	str	r3, [r7, #16]

while (strCounter<strlen(uuid128)){
 8000912:	e02b      	b.n	800096c <BLE_str2uuid+0x6c>
     // convert the character to string
     char str[2];
     str[0] = uuid128[strCounter++];
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	1c5a      	adds	r2, r3, #1
 8000918:	617a      	str	r2, [r7, #20]
 800091a:	461a      	mov	r2, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4413      	add	r3, r2
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	733b      	strb	r3, [r7, #12]
     if (str[0] == '-') continue;  //go to the next element
 8000924:	7b3b      	ldrb	r3, [r7, #12]
 8000926:	2b2d      	cmp	r3, #45	; 0x2d
 8000928:	d100      	bne.n	800092c <BLE_str2uuid+0x2c>
 800092a:	e01f      	b.n	800096c <BLE_str2uuid+0x6c>
     do {
        str[1] = uuid128[strCounter++ ];
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	1c5a      	adds	r2, r3, #1
 8000930:	617a      	str	r2, [r7, #20]
 8000932:	461a      	mov	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4413      	add	r3, r2
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	737b      	strb	r3, [r7, #13]
        }
     while (str[1] == '-');
 800093c:	7b7b      	ldrb	r3, [r7, #13]
 800093e:	2b2d      	cmp	r3, #45	; 0x2d
 8000940:	d0f4      	beq.n	800092c <BLE_str2uuid+0x2c>

     if (hexCounter<0) return HAL_ERROR;
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	2b00      	cmp	r3, #0
 8000946:	da01      	bge.n	800094c <BLE_str2uuid+0x4c>
 8000948:	2301      	movs	r3, #1
 800094a:	e017      	b.n	800097c <BLE_str2uuid+0x7c>
     // convert string to int base 16
     uuid[hexCounter--]= (uint8_t) strtol(str, NULL, 16);
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	2210      	movs	r2, #16
 8000952:	2100      	movs	r1, #0
 8000954:	4618      	mov	r0, r3
 8000956:	f006 f9dd 	bl	8006d14 <strtol>
 800095a:	4601      	mov	r1, r0
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	1e5a      	subs	r2, r3, #1
 8000960:	613a      	str	r2, [r7, #16]
 8000962:	461a      	mov	r2, r3
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	4413      	add	r3, r2
 8000968:	b2ca      	uxtb	r2, r1
 800096a:	701a      	strb	r2, [r3, #0]
while (strCounter<strlen(uuid128)){
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f7ff fc2f 	bl	80001d0 <strlen>
 8000972:	4602      	mov	r2, r0
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	429a      	cmp	r2, r3
 8000978:	d8cc      	bhi.n	8000914 <BLE_str2uuid+0x14>
}
return HAL_OK;
 800097a:	2300      	movs	r3, #0
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <Add_Sample_Service>:
 * @brief  Add a sample service using a vendor specific profile
 * @param  None
 * @retval Status
 */
tBleStatus Add_Sample_Service(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b094      	sub	sp, #80	; 0x50
 8000988:	af06      	add	r7, sp, #24
//  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
//  const uint8_t charUuidTX  [16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
//  const uint8_t charUuidRX  [16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};

  uint8_t service_uuid[16];
  BLE_str2uuid("D973F2E0-B19E-11E2-9E96-0800200C9A66", service_uuid);
 800098a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098e:	4619      	mov	r1, r3
 8000990:	482f      	ldr	r0, [pc, #188]	; (8000a50 <Add_Sample_Service+0xcc>)
 8000992:	f7ff ffb5 	bl	8000900 <BLE_str2uuid>
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid, PRIMARY_SERVICE, 7, &sampleServHandle); /* original is 9?? */
 8000996:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800099a:	4b2e      	ldr	r3, [pc, #184]	; (8000a54 <Add_Sample_Service+0xd0>)
 800099c:	9300      	str	r3, [sp, #0]
 800099e:	2307      	movs	r3, #7
 80009a0:	2201      	movs	r2, #1
 80009a2:	2002      	movs	r0, #2
 80009a4:	f004 fd87 	bl	80054b6 <aci_gatt_add_serv>
 80009a8:	4603      	mov	r3, r0
 80009aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80009ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d141      	bne.n	8000a3a <Add_Sample_Service+0xb6>

  uint8_t charUuidTX[16];
  BLE_str2uuid("D973F2E1-B19E-11E2-9E96-0800200C9A66", charUuidTX);
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4619      	mov	r1, r3
 80009bc:	4826      	ldr	r0, [pc, #152]	; (8000a58 <Add_Sample_Service+0xd4>)
 80009be:	f7ff ff9f 	bl	8000900 <BLE_str2uuid>
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidTX, 20, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 80009c2:	4b24      	ldr	r3, [pc, #144]	; (8000a54 <Add_Sample_Service+0xd0>)
 80009c4:	8818      	ldrh	r0, [r3, #0]
 80009c6:	f107 0214 	add.w	r2, r7, #20
 80009ca:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <Add_Sample_Service+0xd8>)
 80009cc:	9305      	str	r3, [sp, #20]
 80009ce:	2301      	movs	r3, #1
 80009d0:	9304      	str	r3, [sp, #16]
 80009d2:	2310      	movs	r3, #16
 80009d4:	9303      	str	r3, [sp, #12]
 80009d6:	2300      	movs	r3, #0
 80009d8:	9302      	str	r3, [sp, #8]
 80009da:	2300      	movs	r3, #0
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	2310      	movs	r3, #16
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	2314      	movs	r3, #20
 80009e4:	2102      	movs	r1, #2
 80009e6:	f004 fdf2 	bl	80055ce <aci_gatt_add_char>
 80009ea:	4603      	mov	r3, r0
 80009ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                           16, 1, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80009f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d122      	bne.n	8000a3e <Add_Sample_Service+0xba>

  uint8_t charUuidRX[16];
  BLE_str2uuid("D973F2E2-B19E-11E2-9E96-0800200C9A66", charUuidRX);
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	4619      	mov	r1, r3
 80009fc:	4818      	ldr	r0, [pc, #96]	; (8000a60 <Add_Sample_Service+0xdc>)
 80009fe:	f7ff ff7f 	bl	8000900 <BLE_str2uuid>
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidRX, 20, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <Add_Sample_Service+0xd0>)
 8000a04:	8818      	ldrh	r0, [r3, #0]
 8000a06:	1d3a      	adds	r2, r7, #4
 8000a08:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <Add_Sample_Service+0xe0>)
 8000a0a:	9305      	str	r3, [sp, #20]
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	9304      	str	r3, [sp, #16]
 8000a10:	2310      	movs	r3, #16
 8000a12:	9303      	str	r3, [sp, #12]
 8000a14:	2301      	movs	r3, #1
 8000a16:	9302      	str	r3, [sp, #8]
 8000a18:	2300      	movs	r3, #0
 8000a1a:	9301      	str	r3, [sp, #4]
 8000a1c:	230c      	movs	r3, #12
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2314      	movs	r3, #20
 8000a22:	2102      	movs	r1, #2
 8000a24:	f004 fdd3 	bl	80055ce <aci_gatt_add_char>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                           16, 1, &RXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000a2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d105      	bne.n	8000a42 <Add_Sample_Service+0xbe>

  PRINT_MESG_DBG("Sample Service added.\nTX Char Handle %04X, RX Char Handle %04X\n", TXCharHandle, RXCharHandle);
  return BLE_STATUS_SUCCESS;
 8000a36:	2300      	movs	r3, #0
 8000a38:	e005      	b.n	8000a46 <Add_Sample_Service+0xc2>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000a3a:	bf00      	nop
 8000a3c:	e002      	b.n	8000a44 <Add_Sample_Service+0xc0>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000a3e:	bf00      	nop
 8000a40:	e000      	b.n	8000a44 <Add_Sample_Service+0xc0>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000a42:	bf00      	nop

fail:
  PRINT_MESG_DBG("Error while adding Sample Service.\n");
  return BLE_STATUS_ERROR ;
 8000a44:	2347      	movs	r3, #71	; 0x47
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3738      	adds	r7, #56	; 0x38
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	080077c8 	.word	0x080077c8
 8000a54:	20000616 	.word	0x20000616
 8000a58:	080077f0 	.word	0x080077f0
 8000a5c:	20000614 	.word	0x20000614
 8000a60:	08007818 	.word	0x08007818
 8000a64:	20000618 	.word	0x20000618

08000a68 <Make_Connection>:
 * @brief  Make the device connectable
 * @param  None
 * @retval None
 */
void Make_Connection(void)
{
 8000a68:	b590      	push	{r4, r7, lr}
 8000a6a:	b08f      	sub	sp, #60	; 0x3c
 8000a6c:	af08      	add	r7, sp, #32
  tBleStatus ret;

  if(BLE_Role == CLIENT) {
 8000a6e:	4b2e      	ldr	r3, [pc, #184]	; (8000b28 <Make_Connection+0xc0>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d133      	bne.n	8000ade <Make_Connection+0x76>

    printf("Client Create Connection\n");
 8000a76:	482d      	ldr	r0, [pc, #180]	; (8000b2c <Make_Connection+0xc4>)
 8000a78:	f006 f876 	bl	8006b68 <puts>
    tBDAddr bdaddr = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8000a7c:	4a2c      	ldr	r2, [pc, #176]	; (8000b30 <Make_Connection+0xc8>)
 8000a7e:	f107 0310 	add.w	r3, r7, #16
 8000a82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a86:	6018      	str	r0, [r3, #0]
 8000a88:	3304      	adds	r3, #4
 8000a8a:	8019      	strh	r1, [r3, #0]

    BSP_LED_On(LED2); //To indicate the start of the connection and discovery phase
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f000 ffd1 	bl	8001a34 <BSP_LED_On>

    /*
    Scan_Interval, Scan_Window, Peer_Address_Type, Peer_Address, Own_Address_Type, Conn_Interval_Min,
    Conn_Interval_Max, Conn_Latency, Supervision_Timeout, Conn_Len_Min, Conn_Len_Max
    */
    ret = aci_gap_create_connection(SCAN_P, SCAN_L, PUBLIC_ADDR, bdaddr, PUBLIC_ADDR, CONN_P1, CONN_P2, 0,
 8000a92:	f107 0210 	add.w	r2, r7, #16
 8000a96:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a9a:	9306      	str	r3, [sp, #24]
 8000a9c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000aa0:	9305      	str	r3, [sp, #20]
 8000aa2:	233c      	movs	r3, #60	; 0x3c
 8000aa4:	9304      	str	r3, [sp, #16]
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	9303      	str	r3, [sp, #12]
 8000aaa:	2328      	movs	r3, #40	; 0x28
 8000aac:	9302      	str	r3, [sp, #8]
 8000aae:	2328      	movs	r3, #40	; 0x28
 8000ab0:	9301      	str	r3, [sp, #4]
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000abe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ac2:	f004 fc81 	bl	80053c8 <aci_gap_create_connection>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	75fb      	strb	r3, [r7, #23]
                                    SUPERV_TIMEOUT, CONN_L1 , CONN_L2);

    if (ret != 0){
 8000aca:	7dfb      	ldrb	r3, [r7, #23]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d027      	beq.n	8000b20 <Make_Connection+0xb8>
      printf("Error while starting connection.\n");
 8000ad0:	4818      	ldr	r0, [pc, #96]	; (8000b34 <Make_Connection+0xcc>)
 8000ad2:	f006 f849 	bl	8006b68 <puts>
      HAL_Delay(100);
 8000ad6:	2064      	movs	r0, #100	; 0x64
 8000ad8:	f001 fa1e 	bl	8001f18 <HAL_Delay>
    */
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
                                   NO_WHITE_LIST_USE, 13, local_name, 0, NULL, 0, 0);
    PRINT_MESG_DBG("%d\n",ret);
  }
}
 8000adc:	e020      	b.n	8000b20 <Make_Connection+0xb8>
    const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'B','l','u','e','N','R','G','_','C','h','a','t'};
 8000ade:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <Make_Connection+0xd0>)
 8000ae0:	463c      	mov	r4, r7
 8000ae2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ae4:	c407      	stmia	r4!, {r0, r1, r2}
 8000ae6:	7023      	strb	r3, [r4, #0]
    hci_le_set_scan_resp_data(0,NULL);
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2000      	movs	r0, #0
 8000aec:	f005 f96e 	bl	8005dcc <hci_le_set_scan_resp_data>
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
 8000af0:	2300      	movs	r3, #0
 8000af2:	9306      	str	r3, [sp, #24]
 8000af4:	2300      	movs	r3, #0
 8000af6:	9305      	str	r3, [sp, #20]
 8000af8:	2300      	movs	r3, #0
 8000afa:	9304      	str	r3, [sp, #16]
 8000afc:	2300      	movs	r3, #0
 8000afe:	9303      	str	r3, [sp, #12]
 8000b00:	463b      	mov	r3, r7
 8000b02:	9302      	str	r3, [sp, #8]
 8000b04:	230d      	movs	r3, #13
 8000b06:	9301      	str	r3, [sp, #4]
 8000b08:	2300      	movs	r3, #0
 8000b0a:	9300      	str	r3, [sp, #0]
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b16:	2000      	movs	r0, #0
 8000b18:	f004 fb10 	bl	800513c <aci_gap_set_discoverable>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	75fb      	strb	r3, [r7, #23]
}
 8000b20:	bf00      	nop
 8000b22:	371c      	adds	r7, #28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd90      	pop	{r4, r7, pc}
 8000b28:	20000001 	.word	0x20000001
 8000b2c:	08007840 	.word	0x08007840
 8000b30:	08007880 	.word	0x08007880
 8000b34:	0800785c 	.word	0x0800785c
 8000b38:	08007888 	.word	0x08007888

08000b3c <startReadTXCharHandle>:
 * @brief  Discovery TX characteristic handle by UUID 128 bits
 * @param  None
 * @retval None
 */
void startReadTXCharHandle(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af02      	add	r7, sp, #8
  if (!start_read_tx_char_handle)
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <startReadTXCharHandle+0x40>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d112      	bne.n	8000b72 <startReadTXCharHandle+0x36>
  {
    PRINT_MESG_DBG("Start reading TX Char Handle\n");

    //const uint8_t charUuid128_TX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
    uint8_t charUuid128_TX[16];
    BLE_str2uuid("D973F2E1-B19E-11E2-9E96-0800200C9A66", charUuid128_TX);
 8000b4c:	463b      	mov	r3, r7
 8000b4e:	4619      	mov	r1, r3
 8000b50:	480b      	ldr	r0, [pc, #44]	; (8000b80 <startReadTXCharHandle+0x44>)
 8000b52:	f7ff fed5 	bl	8000900 <BLE_str2uuid>
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_TX);
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <startReadTXCharHandle+0x48>)
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	b298      	uxth	r0, r3
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	2302      	movs	r3, #2
 8000b62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b66:	2101      	movs	r1, #1
 8000b68:	f004 fe96 	bl	8005898 <aci_gatt_disc_charac_by_uuid>
    start_read_tx_char_handle = TRUE;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <startReadTXCharHandle+0x40>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	701a      	strb	r2, [r3, #0]
  }
}
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	2000021b 	.word	0x2000021b
 8000b80:	080077f0 	.word	0x080077f0
 8000b84:	20000218 	.word	0x20000218

08000b88 <startReadRXCharHandle>:
 * @brief  Discovery RX characteristic handle by UUID 128 bits
 * @param  None
 * @retval None
 */
void startReadRXCharHandle(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af02      	add	r7, sp, #8
  if (!start_read_rx_char_handle)
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <startReadRXCharHandle+0x40>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d112      	bne.n	8000bbe <startReadRXCharHandle+0x36>
  {
    PRINT_MESG_DBG("Start reading RX Char Handle\n");

    //const uint8_t charUuid128_RX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
    uint8_t charUuid128_RX[16];
    BLE_str2uuid("D973F2E2-B19E-11E2-9E96-0800200C9A66", charUuid128_RX);
 8000b98:	463b      	mov	r3, r7
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480b      	ldr	r0, [pc, #44]	; (8000bcc <startReadRXCharHandle+0x44>)
 8000b9e:	f7ff feaf 	bl	8000900 <BLE_str2uuid>
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_RX);
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <startReadRXCharHandle+0x48>)
 8000ba4:	881b      	ldrh	r3, [r3, #0]
 8000ba6:	b298      	uxth	r0, r3
 8000ba8:	463b      	mov	r3, r7
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	2302      	movs	r3, #2
 8000bae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	f004 fe70 	bl	8005898 <aci_gatt_disc_charac_by_uuid>
    start_read_rx_char_handle = TRUE;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <startReadRXCharHandle+0x40>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	701a      	strb	r2, [r3, #0]
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	2000021c 	.word	0x2000021c
 8000bcc:	08007818 	.word	0x08007818
 8000bd0:	20000218 	.word	0x20000218

08000bd4 <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	70fb      	strb	r3, [r7, #3]
  BSP_LED_Toggle(LED2);
 8000be0:	2000      	movs	r0, #0
 8000be2:	f000 ff53 	bl	8001a8c <BSP_LED_Toggle>

  for(int i = 0; i < Nb_bytes; i++) {
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	e009      	b.n	8000c00 <receiveData+0x2c>
    printf("%c", data_buffer[i]);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f005 ff47 	bl	8006a88 <putchar>
  for(int i = 0; i < Nb_bytes; i++) {
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	78fb      	ldrb	r3, [r7, #3]
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	dbf1      	blt.n	8000bec <receiveData+0x18>
  }
  fflush(stdout);
 8000c08:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <receiveData+0x48>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f005 fd66 	bl	80066e0 <fflush>
}
 8000c14:	bf00      	nop
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000024 	.word	0x20000024

08000c20 <sendData>:
 * @param  data_buffer : pointer to data to be sent
 * @param  Nb_bytes : number of bytes to send
 * @retval None
 */
void sendData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af02      	add	r7, sp, #8
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	70fb      	strb	r3, [r7, #3]
  if(BLE_Role == SERVER) {
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <sendData+0x4c>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d10b      	bne.n	8000c4c <sendData+0x2c>
		PRINT_MESG_DBG("Send Data by Server\n");
    aci_gatt_update_char_value(sampleServHandle,TXCharHandle, 0, Nb_bytes, data_buffer);
 8000c34:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <sendData+0x50>)
 8000c36:	8818      	ldrh	r0, [r3, #0]
 8000c38:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <sendData+0x54>)
 8000c3a:	8819      	ldrh	r1, [r3, #0]
 8000c3c:	78fa      	ldrb	r2, [r7, #3]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	4613      	mov	r3, r2
 8000c44:	2200      	movs	r2, #0
 8000c46:	f004 fd94 	bl	8005772 <aci_gatt_update_char_value>
  }
  else {
	    PRINT_MESG_DBG("Send Data by Client\n");
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
  }
}
 8000c4a:	e00a      	b.n	8000c62 <sendData+0x42>
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <sendData+0x58>)
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	b298      	uxth	r0, r3
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <sendData+0x5c>)
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	3301      	adds	r3, #1
 8000c58:	b299      	uxth	r1, r3
 8000c5a:	78fa      	ldrb	r2, [r7, #3]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f004 ff27 	bl	8005ab0 <aci_gatt_write_without_response>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000001 	.word	0x20000001
 8000c70:	20000616 	.word	0x20000616
 8000c74:	20000614 	.word	0x20000614
 8000c78:	20000218 	.word	0x20000218
 8000c7c:	20000612 	.word	0x20000612

08000c80 <enableNotification>:
 * @brief  Enable notification
 * @param  None
 * @retval None
 */
void enableNotification(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
  uint8_t client_char_conf_data[] = {0x01, 0x00}; // Enable notifications
 8000c86:	2301      	movs	r3, #1
 8000c88:	703b      	strb	r3, [r7, #0]
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	707b      	strb	r3, [r7, #1]

  uint32_t tickstart = HAL_GetTick();
 8000c8e:	f001 f937 	bl	8001f00 <HAL_GetTick>
 8000c92:	6078      	str	r0, [r7, #4]

  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 8000c94:	e008      	b.n	8000ca8 <enableNotification+0x28>
    /* Radio is busy */
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8000c96:	f001 f933 	bl	8001f00 <HAL_GetTick>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	1ad3      	subs	r3, r2, r3
 8000ca0:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d80e      	bhi.n	8000cc6 <enableNotification+0x46>
  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <enableNotification+0x58>)
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	b298      	uxth	r0, r3
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <enableNotification+0x5c>)
 8000cb0:	881b      	ldrh	r3, [r3, #0]
 8000cb2:	3302      	adds	r3, #2
 8000cb4:	b299      	uxth	r1, r3
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	2202      	movs	r2, #2
 8000cba:	f004 fe7c 	bl	80059b6 <aci_gatt_write_charac_descriptor>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b46      	cmp	r3, #70	; 0x46
 8000cc2:	d0e8      	beq.n	8000c96 <enableNotification+0x16>
 8000cc4:	e000      	b.n	8000cc8 <enableNotification+0x48>
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8000cc6:	bf00      	nop
  }
  notification_enabled = TRUE;
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <enableNotification+0x60>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000218 	.word	0x20000218
 8000cdc:	20000610 	.word	0x20000610
 8000ce0:	2000021a 	.word	0x2000021a

08000ce4 <Attribute_Modified_CB>:
 * @param  data_length : size of the modified attribute data
 * @param  att_data : pointer to the modified attribute data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	603a      	str	r2, [r7, #0]
 8000cee:	80fb      	strh	r3, [r7, #6]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	717b      	strb	r3, [r7, #5]
	PRINT_MESG_DBG("handle      %u\n", handle);
	PRINT_MESG_DBG("data length %u\n", data_length);

  if(handle == RXCharHandle + 1){
 8000cf4:	88fa      	ldrh	r2, [r7, #6]
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <Attribute_Modified_CB+0x4c>)
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d105      	bne.n	8000d0c <Attribute_Modified_CB+0x28>
	PRINT_MESG_DBG("attribute RXChar modified by client\n");
	PRINT_MESG_DBG("receive Data from Client\n");
    receiveData(att_data, data_length);
 8000d00:	797b      	ldrb	r3, [r7, #5]
 8000d02:	4619      	mov	r1, r3
 8000d04:	6838      	ldr	r0, [r7, #0]
 8000d06:	f7ff ff65 	bl	8000bd4 <receiveData>
  } else if (handle == TXCharHandle + 2) {
		    PRINT_MESG_DBG("attribute TXChar modified by client\n");
            if(att_data[0] == 0x01) notification_enabled = TRUE;
            }
}
 8000d0a:	e00c      	b.n	8000d26 <Attribute_Modified_CB+0x42>
  } else if (handle == TXCharHandle + 2) {
 8000d0c:	88fa      	ldrh	r2, [r7, #6]
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <Attribute_Modified_CB+0x50>)
 8000d10:	881b      	ldrh	r3, [r3, #0]
 8000d12:	3302      	adds	r3, #2
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d106      	bne.n	8000d26 <Attribute_Modified_CB+0x42>
            if(att_data[0] == 0x01) notification_enabled = TRUE;
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d102      	bne.n	8000d26 <Attribute_Modified_CB+0x42>
 8000d20:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <Attribute_Modified_CB+0x54>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	701a      	strb	r2, [r3, #0]
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000618 	.word	0x20000618
 8000d34:	20000614 	.word	0x20000614
 8000d38:	2000021a 	.word	0x2000021a

08000d3c <GAP_ConnectionComplete_CB>:
 * @param  addr : Address of peer device
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	460b      	mov	r3, r1
 8000d46:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <GAP_ConnectionComplete_CB+0x54>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8000d4e:	4a11      	ldr	r2, [pc, #68]	; (8000d94 <GAP_ConnectionComplete_CB+0x58>)
 8000d50:	887b      	ldrh	r3, [r7, #2]
 8000d52:	8013      	strh	r3, [r2, #0]

  printf("Connected to device:");
 8000d54:	4810      	ldr	r0, [pc, #64]	; (8000d98 <GAP_ConnectionComplete_CB+0x5c>)
 8000d56:	f005 fe7f 	bl	8006a58 <iprintf>
  for(int i = 5; i > 0; i--){
 8000d5a:	2305      	movs	r3, #5
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	e00a      	b.n	8000d76 <GAP_ConnectionComplete_CB+0x3a>
    printf("%02X-", addr[i]);
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	480c      	ldr	r0, [pc, #48]	; (8000d9c <GAP_ConnectionComplete_CB+0x60>)
 8000d6c:	f005 fe74 	bl	8006a58 <iprintf>
  for(int i = 5; i > 0; i--){
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	dcf1      	bgt.n	8000d60 <GAP_ConnectionComplete_CB+0x24>
  }
  printf("%02X\n", addr[0]);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	4807      	ldr	r0, [pc, #28]	; (8000da0 <GAP_ConnectionComplete_CB+0x64>)
 8000d84:	f005 fe68 	bl	8006a58 <iprintf>
}
 8000d88:	bf00      	nop
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000214 	.word	0x20000214
 8000d94:	20000218 	.word	0x20000218
 8000d98:	08007898 	.word	0x08007898
 8000d9c:	080078b0 	.word	0x080078b0
 8000da0:	080078b8 	.word	0x080078b8

08000da4 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  connected = FALSE;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <GAP_DisconnectionComplete_CB+0x38>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]

  printf("Disconnected\n");
 8000dae:	480c      	ldr	r0, [pc, #48]	; (8000de0 <GAP_DisconnectionComplete_CB+0x3c>)
 8000db0:	f005 feda 	bl	8006b68 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8000db4:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <GAP_DisconnectionComplete_CB+0x40>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <GAP_DisconnectionComplete_CB+0x44>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]
  start_read_tx_char_handle = FALSE;
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <GAP_DisconnectionComplete_CB+0x48>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
  start_read_rx_char_handle = FALSE;
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <GAP_DisconnectionComplete_CB+0x4c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
  end_read_tx_char_handle = FALSE;
 8000dcc:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <GAP_DisconnectionComplete_CB+0x50>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
  end_read_rx_char_handle = FALSE;
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <GAP_DisconnectionComplete_CB+0x54>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	701a      	strb	r2, [r3, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000214 	.word	0x20000214
 8000de0:	080078c0 	.word	0x080078c0
 8000de4:	20000002 	.word	0x20000002
 8000de8:	2000021a 	.word	0x2000021a
 8000dec:	2000021b 	.word	0x2000021b
 8000df0:	2000021c 	.word	0x2000021c
 8000df4:	2000021d 	.word	0x2000021d
 8000df8:	2000021e 	.word	0x2000021e

08000dfc <GATT_Notification_CB>:
 * @param  attr_len    Length of attribute value in the notification
 * @param  attr_value  Attribute value in the notification
 * @retval None
 */
void GATT_Notification_CB(uint16_t attr_handle, uint8_t attr_len, uint8_t *attr_value)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	603a      	str	r2, [r7, #0]
 8000e06:	80fb      	strh	r3, [r7, #6]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	717b      	strb	r3, [r7, #5]
  if (attr_handle == tx_handle+1) {
 8000e0c:	88fa      	ldrh	r2, [r7, #6]
 8000e0e:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <GATT_Notification_CB+0x30>)
 8000e10:	881b      	ldrh	r3, [r3, #0]
 8000e12:	3301      	adds	r3, #1
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d104      	bne.n	8000e22 <GATT_Notification_CB+0x26>
	PRINT_MESG_DBG("receive Data from Server\n");
    receiveData(attr_value, attr_len);
 8000e18:	797b      	ldrb	r3, [r7, #5]
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	6838      	ldr	r0, [r7, #0]
 8000e1e:	f7ff fed9 	bl	8000bd4 <receiveData>
  }
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000610 	.word	0x20000610

08000e30 <user_notify>:
 *         parsed.
 * @param  pData  Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08c      	sub	sp, #48	; 0x30
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8000e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e3e:	3301      	adds	r3, #1
 8000e40:	62bb      	str	r3, [r7, #40]	; 0x28

  if(hci_pckt->type != HCI_EVENT_PKT)
 8000e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	f040 80e1 	bne.w	800100e <user_notify+0x1de>
    return;

  switch(event_pckt->evt){
 8000e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b3e      	cmp	r3, #62	; 0x3e
 8000e52:	d007      	beq.n	8000e64 <user_notify+0x34>
 8000e54:	2bff      	cmp	r3, #255	; 0xff
 8000e56:	d01c      	beq.n	8000e92 <user_notify+0x62>
 8000e58:	2b05      	cmp	r3, #5
 8000e5a:	f040 80db 	bne.w	8001014 <user_notify+0x1e4>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8000e5e:	f7ff ffa1 	bl	8000da4 <GAP_DisconnectionComplete_CB>
    }
    break;
 8000e62:	e0d7      	b.n	8001014 <user_notify+0x1e4>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8000e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e66:	3302      	adds	r3, #2
 8000e68:	613b      	str	r3, [r7, #16]

      switch(evt->subevent){
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d000      	beq.n	8000e74 <user_notify+0x44>
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
        }
        break;
      }
    }
    break;
 8000e72:	e0cf      	b.n	8001014 <user_notify+0x1e4>
          evt_le_connection_complete *cc = (void *)evt->data;
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	3301      	adds	r3, #1
 8000e78:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	1d5a      	adds	r2, r3, #5
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	4619      	mov	r1, r3
 8000e88:	4610      	mov	r0, r2
 8000e8a:	f7ff ff57 	bl	8000d3c <GAP_ConnectionComplete_CB>
        break;
 8000e8e:	bf00      	nop
    break;
 8000e90:	e0c0      	b.n	8001014 <user_notify+0x1e4>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8000e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e94:	3302      	adds	r3, #2
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
      switch(blue_evt->ecode){
 8000e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	f6a3 4301 	subw	r3, r3, #3073	; 0xc01
 8000ea2:	2b11      	cmp	r3, #17
 8000ea4:	f200 80b5 	bhi.w	8001012 <user_notify+0x1e2>
 8000ea8:	a201      	add	r2, pc, #4	; (adr r2, 8000eb0 <user_notify+0x80>)
 8000eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eae:	bf00      	nop
 8000eb0:	08000ef9 	.word	0x08000ef9
 8000eb4:	08001013 	.word	0x08001013
 8000eb8:	08001013 	.word	0x08001013
 8000ebc:	08001013 	.word	0x08001013
 8000ec0:	08001013 	.word	0x08001013
 8000ec4:	08001013 	.word	0x08001013
 8000ec8:	08001013 	.word	0x08001013
 8000ecc:	08001013 	.word	0x08001013
 8000ed0:	08001013 	.word	0x08001013
 8000ed4:	08001013 	.word	0x08001013
 8000ed8:	08001013 	.word	0x08001013
 8000edc:	08001013 	.word	0x08001013
 8000ee0:	08001013 	.word	0x08001013
 8000ee4:	08001013 	.word	0x08001013
 8000ee8:	08000f39 	.word	0x08000f39
 8000eec:	08000fc5 	.word	0x08000fc5
 8000ef0:	08001013 	.word	0x08001013
 8000ef4:	08000f5b 	.word	0x08000f5b
    	  /*
    	   Generated by the GATT server when a client modifies any attribute on the server, if event is enabled.
    	   */
        {
        	PRINT_MESG_DBG("EVT_BLUE_GATT_ATTRIBUTE_MODIFIED\n");
          if (bnrg_expansion_board == IDB05A1) {
 8000ef8:	4b48      	ldr	r3, [pc, #288]	; (800101c <user_notify+0x1ec>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d10d      	bne.n	8000f1c <user_notify+0xec>
            evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
 8000f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f02:	3302      	adds	r3, #2
 8000f04:	617b      	str	r3, [r7, #20]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	885b      	ldrh	r3, [r3, #2]
 8000f0a:	b298      	uxth	r0, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	7919      	ldrb	r1, [r3, #4]
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	3307      	adds	r3, #7
 8000f14:	461a      	mov	r2, r3
 8000f16:	f7ff fee5 	bl	8000ce4 <Attribute_Modified_CB>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
          }

        }
        break;
 8000f1a:	e076      	b.n	800100a <user_notify+0x1da>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
 8000f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1e:	3302      	adds	r3, #2
 8000f20:	61bb      	str	r3, [r7, #24]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	885b      	ldrh	r3, [r3, #2]
 8000f26:	b298      	uxth	r0, r3
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	7919      	ldrb	r1, [r3, #4]
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	3305      	adds	r3, #5
 8000f30:	461a      	mov	r2, r3
 8000f32:	f7ff fed7 	bl	8000ce4 <Attribute_Modified_CB>
        break;
 8000f36:	e068      	b.n	800100a <user_notify+0x1da>
    	  /*
    	   * Generated by the GATT client when a server notifies any attribute on the client
    	   */
        {
        	PRINT_MESG_DBG("EVT_BLUE_GATT_NOTIFICATION\n");
          evt_gatt_attr_notification *evt = (evt_gatt_attr_notification*)blue_evt->data;
 8000f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3a:	3302      	adds	r3, #2
 8000f3c:	61fb      	str	r3, [r7, #28]
          GATT_Notification_CB(evt->attr_handle, evt->event_data_length - 2, evt->attr_value);
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000f44:	b298      	uxth	r0, r3
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	789b      	ldrb	r3, [r3, #2]
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	b2d9      	uxtb	r1, r3
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3305      	adds	r3, #5
 8000f52:	461a      	mov	r2, r3
 8000f54:	f7ff ff52 	bl	8000dfc <GATT_Notification_CB>
        }
        break;
 8000f58:	e057      	b.n	800100a <user_notify+0x1da>
      case EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP:
        if(BLE_Role == CLIENT) {
 8000f5a:	4b31      	ldr	r3, [pc, #196]	; (8001020 <user_notify+0x1f0>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d150      	bne.n	8001004 <user_notify+0x1d4>
        	PRINT_MESG_DBG("EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP\n");

          evt_gatt_disc_read_char_by_uuid_resp *resp = (void*)blue_evt->data;
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	3302      	adds	r3, #2
 8000f66:	623b      	str	r3, [r7, #32]

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8000f68:	4b2e      	ldr	r3, [pc, #184]	; (8001024 <user_notify+0x1f4>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d011      	beq.n	8000f96 <user_notify+0x166>
 8000f72:	4b2d      	ldr	r3, [pc, #180]	; (8001028 <user_notify+0x1f8>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d10c      	bne.n	8000f96 <user_notify+0x166>
          {
            tx_handle = resp->attr_handle;
 8000f7c:	6a3b      	ldr	r3, [r7, #32]
 8000f7e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	4b29      	ldr	r3, [pc, #164]	; (800102c <user_notify+0x1fc>)
 8000f86:	801a      	strh	r2, [r3, #0]
            printf("TX Char Handle %04X\n", tx_handle);
 8000f88:	4b28      	ldr	r3, [pc, #160]	; (800102c <user_notify+0x1fc>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4828      	ldr	r0, [pc, #160]	; (8001030 <user_notify+0x200>)
 8000f90:	f005 fd62 	bl	8006a58 <iprintf>
          {
            rx_handle = resp->attr_handle;
            printf("RX Char Handle %04X\n", rx_handle);
          }
        }
        break;
 8000f94:	e036      	b.n	8001004 <user_notify+0x1d4>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8000f96:	4b27      	ldr	r3, [pc, #156]	; (8001034 <user_notify+0x204>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d031      	beq.n	8001004 <user_notify+0x1d4>
 8000fa0:	4b25      	ldr	r3, [pc, #148]	; (8001038 <user_notify+0x208>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d12c      	bne.n	8001004 <user_notify+0x1d4>
            rx_handle = resp->attr_handle;
 8000faa:	6a3b      	ldr	r3, [r7, #32]
 8000fac:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	4b22      	ldr	r3, [pc, #136]	; (800103c <user_notify+0x20c>)
 8000fb4:	801a      	strh	r2, [r3, #0]
            printf("RX Char Handle %04X\n", rx_handle);
 8000fb6:	4b21      	ldr	r3, [pc, #132]	; (800103c <user_notify+0x20c>)
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4820      	ldr	r0, [pc, #128]	; (8001040 <user_notify+0x210>)
 8000fbe:	f005 fd4b 	bl	8006a58 <iprintf>
        break;
 8000fc2:	e01f      	b.n	8001004 <user_notify+0x1d4>

      case EVT_BLUE_GATT_PROCEDURE_COMPLETE:
    	  /*
    	   * Once the services are enumerated, the BLE stack sends the EVT_BLUE_GATT_PROCEDURE_COMPLETE event
    	   */
        if(BLE_Role == CLIENT) {
 8000fc4:	4b16      	ldr	r3, [pc, #88]	; (8001020 <user_notify+0x1f0>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d11d      	bne.n	8001008 <user_notify+0x1d8>
        	PRINT_MESG_DBG("EVT_BLUE_GATT_PROCEDURE_COMPLETE\n");
          /* Wait for gatt procedure complete event trigger related to Discovery Charac by UUID */
          //evt_gatt_procedure_complete *pr = (void*)blue_evt->data;

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8000fcc:	4b15      	ldr	r3, [pc, #84]	; (8001024 <user_notify+0x1f4>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d008      	beq.n	8000fe8 <user_notify+0x1b8>
 8000fd6:	4b14      	ldr	r3, [pc, #80]	; (8001028 <user_notify+0x1f8>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d103      	bne.n	8000fe8 <user_notify+0x1b8>
          {
            end_read_tx_char_handle = TRUE;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <user_notify+0x1f8>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            end_read_rx_char_handle = TRUE;
          }
        }
        break;
 8000fe6:	e00f      	b.n	8001008 <user_notify+0x1d8>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <user_notify+0x204>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d00a      	beq.n	8001008 <user_notify+0x1d8>
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <user_notify+0x208>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d105      	bne.n	8001008 <user_notify+0x1d8>
            end_read_rx_char_handle = TRUE;
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <user_notify+0x208>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]
        break;
 8001002:	e001      	b.n	8001008 <user_notify+0x1d8>
        break;
 8001004:	bf00      	nop
 8001006:	e000      	b.n	800100a <user_notify+0x1da>
        break;
 8001008:	bf00      	nop
      }
    }
    break;
 800100a:	bf00      	nop
 800100c:	e001      	b.n	8001012 <user_notify+0x1e2>
    return;
 800100e:	bf00      	nop
 8001010:	e000      	b.n	8001014 <user_notify+0x1e4>
    break;
 8001012:	bf00      	nop
  }
}
 8001014:	3730      	adds	r7, #48	; 0x30
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000210 	.word	0x20000210
 8001020:	20000001 	.word	0x20000001
 8001024:	2000021b 	.word	0x2000021b
 8001028:	2000021d 	.word	0x2000021d
 800102c:	20000610 	.word	0x20000610
 8001030:	080078d0 	.word	0x080078d0
 8001034:	2000021c 	.word	0x2000021c
 8001038:	2000021e 	.word	0x2000021e
 800103c:	20000612 	.word	0x20000612
 8001040:	080078e8 	.word	0x080078e8

08001044 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 800104c:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <HCI_TL_SPI_Init+0x88>)
 800104e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001050:	4a1e      	ldr	r2, [pc, #120]	; (80010cc <HCI_TL_SPI_Init+0x88>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001058:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <HCI_TL_SPI_Init+0x88>)
 800105a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8001064:	2301      	movs	r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001068:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <HCI_TL_SPI_Init+0x8c>)
 800106a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	4619      	mov	r1, r3
 8001076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107a:	f001 f8df 	bl	800223c <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 800107e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001082:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001084:	2301      	movs	r3, #1
 8001086:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	4619      	mov	r1, r3
 8001096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109a:	f001 f8cf 	bl	800223c <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800109e:	2302      	movs	r3, #2
 80010a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	4619      	mov	r1, r3
 80010b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b8:	f001 f8c0 	bl	800223c <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 80010bc:	f000 faa8 	bl	8001610 <BSP_SPI1_Init>
 80010c0:	4603      	mov	r3, r0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3720      	adds	r7, #32
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000
 80010d0:	10110000 	.word	0x10110000

080010d4 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 80010d8:	2101      	movs	r1, #1
 80010da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010de:	f001 fa55 	bl	800258c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 80010e2:	2102      	movs	r1, #2
 80010e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e8:	f001 fa50 	bl	800258c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 80010ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f4:	f001 fa4a 	bl	800258c <HAL_GPIO_DeInit>
  return 0;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001102:	2201      	movs	r2, #1
 8001104:	2102      	movs	r1, #2
 8001106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110a:	f001 fb4b 	bl	80027a4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001114:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001118:	f001 fb44 	bl	80027a4 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800111c:	2005      	movs	r0, #5
 800111e:	f000 fefb 	bl	8001f18 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8001122:	2201      	movs	r2, #1
 8001124:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112c:	f001 fb3a 	bl	80027a4 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001130:	2005      	movs	r0, #5
 8001132:	f000 fef1 	bl	8001f18 <HAL_Delay>
  return 0;
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	bd80      	pop	{r7, pc}

0800113c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 800114c:	23ff      	movs	r3, #255	; 0xff
 800114e:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001150:	230b      	movs	r3, #11
 8001152:	753b      	strb	r3, [r7, #20]
 8001154:	2300      	movs	r3, #0
 8001156:	757b      	strb	r3, [r7, #21]
 8001158:	2300      	movs	r3, #0
 800115a:	75bb      	strb	r3, [r7, #22]
 800115c:	2300      	movs	r3, #0
 800115e:	75fb      	strb	r3, [r7, #23]
 8001160:	2300      	movs	r3, #0
 8001162:	763b      	strb	r3, [r7, #24]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001164:	2200      	movs	r2, #0
 8001166:	2102      	movs	r1, #2
 8001168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116c:	f001 fb1a 	bl	80027a4 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001170:	f107 010c 	add.w	r1, r7, #12
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2205      	movs	r2, #5
 800117a:	4618      	mov	r0, r3
 800117c:	f000 fa78 	bl	8001670 <BSP_SPI1_SendRecv>

  if(header_slave[0] == 0x02)
 8001180:	7b3b      	ldrb	r3, [r7, #12]
 8001182:	2b02      	cmp	r3, #2
 8001184:	d129      	bne.n	80011da <HCI_TL_SPI_Receive+0x9e>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8001186:	7c3b      	ldrb	r3, [r7, #16]
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	b21a      	sxth	r2, r3
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	b21b      	sxth	r3, r3
 8001190:	4313      	orrs	r3, r2
 8001192:	b21b      	sxth	r3, r3
 8001194:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8001196:	8bfb      	ldrh	r3, [r7, #30]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d01e      	beq.n	80011da <HCI_TL_SPI_Receive+0x9e>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 800119c:	8bfa      	ldrh	r2, [r7, #30]
 800119e:	887b      	ldrh	r3, [r7, #2]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d901      	bls.n	80011a8 <HCI_TL_SPI_Receive+0x6c>
        byte_count = size;
 80011a4:	887b      	ldrh	r3, [r7, #2]
 80011a6:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 80011a8:	2300      	movs	r3, #0
 80011aa:	777b      	strb	r3, [r7, #29]
 80011ac:	e010      	b.n	80011d0 <HCI_TL_SPI_Receive+0x94>
      {
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 80011ae:	f107 011b 	add.w	r1, r7, #27
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	2201      	movs	r2, #1
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 fa59 	bl	8001670 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 80011be:	7f7b      	ldrb	r3, [r7, #29]
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	4413      	add	r3, r2
 80011c4:	7efa      	ldrb	r2, [r7, #27]
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 80011ca:	7f7b      	ldrb	r3, [r7, #29]
 80011cc:	3301      	adds	r3, #1
 80011ce:	777b      	strb	r3, [r7, #29]
 80011d0:	7f7b      	ldrb	r3, [r7, #29]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	8bfa      	ldrh	r2, [r7, #30]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d8e9      	bhi.n	80011ae <HCI_TL_SPI_Receive+0x72>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80011da:	2201      	movs	r2, #1
 80011dc:	2102      	movs	r1, #2
 80011de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e2:	f001 fadf 	bl	80027a4 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 80011e6:	7f7b      	ldrb	r3, [r7, #29]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3720      	adds	r7, #32
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80011fc:	230a      	movs	r3, #10
 80011fe:	743b      	strb	r3, [r7, #16]
 8001200:	2300      	movs	r3, #0
 8001202:	747b      	strb	r3, [r7, #17]
 8001204:	2300      	movs	r3, #0
 8001206:	74bb      	strb	r3, [r7, #18]
 8001208:	2300      	movs	r3, #0
 800120a:	74fb      	strb	r3, [r7, #19]
 800120c:	2300      	movs	r3, #0
 800120e:	753b      	strb	r3, [r7, #20]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8001210:	f000 fe76 	bl	8001f00 <HAL_GetTick>
 8001214:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	2102      	movs	r1, #2
 800121e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001222:	f001 fabf 	bl	80027a4 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001226:	f107 0108 	add.w	r1, r7, #8
 800122a:	f107 0310 	add.w	r3, r7, #16
 800122e:	2205      	movs	r2, #5
 8001230:	4618      	mov	r0, r3
 8001232:	f000 fa1d 	bl	8001670 <BSP_SPI1_SendRecv>

    if(header_slave[0] == 0x02)
 8001236:	7a3b      	ldrb	r3, [r7, #8]
 8001238:	2b02      	cmp	r3, #2
 800123a:	d10f      	bne.n	800125c <HCI_TL_SPI_Send+0x6c>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 800123c:	7a7b      	ldrb	r3, [r7, #9]
 800123e:	b29b      	uxth	r3, r3
 8001240:	887a      	ldrh	r2, [r7, #2]
 8001242:	429a      	cmp	r2, r3
 8001244:	d806      	bhi.n	8001254 <HCI_TL_SPI_Send+0x64>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8001246:	887b      	ldrh	r3, [r7, #2]
 8001248:	461a      	mov	r2, r3
 800124a:	4912      	ldr	r1, [pc, #72]	; (8001294 <HCI_TL_SPI_Send+0xa4>)
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f000 fa0f 	bl	8001670 <BSP_SPI1_SendRecv>
 8001252:	e006      	b.n	8001262 <HCI_TL_SPI_Send+0x72>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8001254:	f06f 0301 	mvn.w	r3, #1
 8001258:	61fb      	str	r3, [r7, #28]
 800125a:	e002      	b.n	8001262 <HCI_TL_SPI_Send+0x72>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 800125c:	f04f 33ff 	mov.w	r3, #4294967295
 8001260:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001262:	2201      	movs	r2, #1
 8001264:	2102      	movs	r1, #2
 8001266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126a:	f001 fa9b 	bl	80027a4 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 800126e:	f000 fe47 	bl	8001f00 <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b0f      	cmp	r3, #15
 800127a:	d903      	bls.n	8001284 <HCI_TL_SPI_Send+0x94>
    {
      result = -3;
 800127c:	f06f 0302 	mvn.w	r3, #2
 8001280:	61fb      	str	r3, [r7, #28]
      break;
 8001282:	e002      	b.n	800128a <HCI_TL_SPI_Send+0x9a>
    }
  } while(result < 0);
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	2b00      	cmp	r3, #0
 8001288:	dbc5      	blt.n	8001216 <HCI_TL_SPI_Send+0x26>

  return result;
 800128a:	69fb      	ldr	r3, [r7, #28]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3720      	adds	r7, #32
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000220 	.word	0x20000220

08001298 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 800129c:	2101      	movs	r1, #1
 800129e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a2:	f001 fa67 	bl	8002774 <HAL_GPIO_ReadPin>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	bf0c      	ite	eq
 80012ac:	2301      	moveq	r3, #1
 80012ae:	2300      	movne	r3, #0
 80012b0:	b2db      	uxtb	r3, r3
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 80012be:	4b13      	ldr	r3, [pc, #76]	; (800130c <hci_tl_lowlevel_init+0x54>)
 80012c0:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80012c2:	4b13      	ldr	r3, [pc, #76]	; (8001310 <hci_tl_lowlevel_init+0x58>)
 80012c4:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <hci_tl_lowlevel_init+0x5c>)
 80012c8:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <hci_tl_lowlevel_init+0x60>)
 80012cc:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 80012ce:	4b13      	ldr	r3, [pc, #76]	; (800131c <hci_tl_lowlevel_init+0x64>)
 80012d0:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 80012d2:	4b13      	ldr	r3, [pc, #76]	; (8001320 <hci_tl_lowlevel_init+0x68>)
 80012d4:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	4618      	mov	r0, r3
 80012da:	f004 fe93 	bl	8006004 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 80012de:	f04f 51b0 	mov.w	r1, #369098752	; 0x16000000
 80012e2:	4810      	ldr	r0, [pc, #64]	; (8001324 <hci_tl_lowlevel_init+0x6c>)
 80012e4:	f000 ff65 	bl	80021b2 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80012e8:	4a0f      	ldr	r2, [pc, #60]	; (8001328 <hci_tl_lowlevel_init+0x70>)
 80012ea:	2100      	movs	r1, #0
 80012ec:	480d      	ldr	r0, [pc, #52]	; (8001324 <hci_tl_lowlevel_init+0x6c>)
 80012ee:	f000 ff46 	bl	800217e <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	2006      	movs	r0, #6
 80012f8:	f000 ff0b 	bl	8002112 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80012fc:	2006      	movs	r0, #6
 80012fe:	f000 ff24 	bl	800214a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8001302:	bf00      	nop
 8001304:	3720      	adds	r7, #32
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	08001045 	.word	0x08001045
 8001310:	080010d5 	.word	0x080010d5
 8001314:	080011f1 	.word	0x080011f1
 8001318:	0800113d 	.word	0x0800113d
 800131c:	080010ff 	.word	0x080010ff
 8001320:	080016b1 	.word	0x080016b1
 8001324:	2000061c 	.word	0x2000061c
 8001328:	0800132d 	.word	0x0800132d

0800132c <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8001330:	e005      	b.n	800133e <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8001332:	2000      	movs	r0, #0
 8001334:	f004 ffc8 	bl	80062c8 <hci_notify_asynch_evt>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d105      	bne.n	800134a <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 800133e:	f7ff ffab 	bl	8001298 <IsDataAvailable>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1f4      	bne.n	8001332 <hci_tl_lowlevel_isr+0x6>
 8001348:	e000      	b.n	800134c <hci_tl_lowlevel_isr+0x20>
    {
      return;
 800134a:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 800134c:	bd80      	pop	{r7, pc}

0800134e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001352:	f000 fd65 	bl	8001e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001356:	f000 f807 	bl	8001368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800135a:	f000 f87b 	bl	8001454 <MX_GPIO_Init>
  MX_BlueNRG_MS_Init();
 800135e:	f7ff f90f 	bl	8000580 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_BlueNRG_MS_Process();
 8001362:	f7ff fa17 	bl	8000794 <MX_BlueNRG_MS_Process>
 8001366:	e7fc      	b.n	8001362 <main+0x14>

08001368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b0b8      	sub	sp, #224	; 0xe0
 800136c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001372:	2244      	movs	r2, #68	; 0x44
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f005 fabd 	bl	80068f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800137c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800138c:	463b      	mov	r3, r7
 800138e:	2288      	movs	r2, #136	; 0x88
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f005 faaf 	bl	80068f6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001398:	2302      	movs	r3, #2
 800139a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800139e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013a6:	2310      	movs	r3, #16
 80013a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ac:	2302      	movs	r3, #2
 80013ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013b2:	2302      	movs	r3, #2
 80013b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013b8:	2301      	movs	r3, #1
 80013ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80013be:	230a      	movs	r3, #10
 80013c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013c4:	2307      	movs	r3, #7
 80013c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013ca:	2302      	movs	r3, #2
 80013cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013d0:	2302      	movs	r3, #2
 80013d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013da:	4618      	mov	r0, r3
 80013dc:	f001 fa78 	bl	80028d0 <HAL_RCC_OscConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013e6:	f000 f8ad 	bl	8001544 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ea:	230f      	movs	r3, #15
 80013ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f0:	2303      	movs	r3, #3
 80013f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001402:	2300      	movs	r3, #0
 8001404:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001408:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800140c:	2104      	movs	r1, #4
 800140e:	4618      	mov	r0, r3
 8001410:	f001 fe44 	bl	800309c <HAL_RCC_ClockConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800141a:	f000 f893 	bl	8001544 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800141e:	2302      	movs	r3, #2
 8001420:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001422:	2300      	movs	r3, #0
 8001424:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001426:	463b      	mov	r3, r7
 8001428:	4618      	mov	r0, r3
 800142a:	f002 f83b 	bl	80034a4 <HAL_RCCEx_PeriphCLKConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001434:	f000 f886 	bl	8001544 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001438:	f44f 7000 	mov.w	r0, #512	; 0x200
 800143c:	f001 f9f2 	bl	8002824 <HAL_PWREx_ControlVoltageScaling>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8001446:	f000 f87d 	bl	8001544 <Error_Handler>
  }
}
 800144a:	bf00      	nop
 800144c:	37e0      	adds	r7, #224	; 0xe0
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	; 0x28
 8001458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800146a:	4b34      	ldr	r3, [pc, #208]	; (800153c <MX_GPIO_Init+0xe8>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	4a33      	ldr	r2, [pc, #204]	; (800153c <MX_GPIO_Init+0xe8>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001476:	4b31      	ldr	r3, [pc, #196]	; (800153c <MX_GPIO_Init+0xe8>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001482:	4b2e      	ldr	r3, [pc, #184]	; (800153c <MX_GPIO_Init+0xe8>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	4a2d      	ldr	r2, [pc, #180]	; (800153c <MX_GPIO_Init+0xe8>)
 8001488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800148c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148e:	4b2b      	ldr	r3, [pc, #172]	; (800153c <MX_GPIO_Init+0xe8>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	4b28      	ldr	r3, [pc, #160]	; (800153c <MX_GPIO_Init+0xe8>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	4a27      	ldr	r2, [pc, #156]	; (800153c <MX_GPIO_Init+0xe8>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a6:	4b25      	ldr	r3, [pc, #148]	; (800153c <MX_GPIO_Init+0xe8>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	4b22      	ldr	r3, [pc, #136]	; (800153c <MX_GPIO_Init+0xe8>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	4a21      	ldr	r2, [pc, #132]	; (800153c <MX_GPIO_Init+0xe8>)
 80014b8:	f043 0302 	orr.w	r3, r3, #2
 80014bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014be:	4b1f      	ldr	r3, [pc, #124]	; (800153c <MX_GPIO_Init+0xe8>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	f44f 7181 	mov.w	r1, #258	; 0x102
 80014d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d4:	f001 f966 	bl	80027a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014d8:	2301      	movs	r3, #1
 80014da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014dc:	4b18      	ldr	r3, [pc, #96]	; (8001540 <MX_GPIO_Init+0xec>)
 80014de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ee:	f000 fea5 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 80014f2:	f44f 7381 	mov.w	r3, #258	; 0x102
 80014f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150e:	f000 fe95 	bl	800223c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	2100      	movs	r1, #0
 8001516:	2006      	movs	r0, #6
 8001518:	f000 fdfb 	bl	8002112 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800151c:	2006      	movs	r0, #6
 800151e:	f000 fe14 	bl	800214a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	2100      	movs	r1, #0
 8001526:	2028      	movs	r0, #40	; 0x28
 8001528:	f000 fdf3 	bl	8002112 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800152c:	2028      	movs	r0, #40	; 0x28
 800152e:	f000 fe0c 	bl	800214a <HAL_NVIC_EnableIRQ>

}
 8001532:	bf00      	nop
 8001534:	3728      	adds	r7, #40	; 0x28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000
 8001540:	10110000 	.word	0x10110000

08001544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001548:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800154a:	e7fe      	b.n	800154a <Error_Handler+0x6>

0800154c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <HAL_MspInit+0x44>)
 8001554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001556:	4a0e      	ldr	r2, [pc, #56]	; (8001590 <HAL_MspInit+0x44>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6613      	str	r3, [r2, #96]	; 0x60
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <HAL_MspInit+0x44>)
 8001560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_MspInit+0x44>)
 800156c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156e:	4a08      	ldr	r2, [pc, #32]	; (8001590 <HAL_MspInit+0x44>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001574:	6593      	str	r3, [r2, #88]	; 0x58
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_MspInit+0x44>)
 8001578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40021000 	.word	0x40021000

08001594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <NMI_Handler+0x4>

0800159a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <HardFault_Handler+0x4>

080015a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <MemManage_Handler+0x4>

080015a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015aa:	e7fe      	b.n	80015aa <BusFault_Handler+0x4>

080015ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <UsageFault_Handler+0x4>

080015b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e0:	f000 fc7a 	bl	8001ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 80015ec:	4802      	ldr	r0, [pc, #8]	; (80015f8 <EXTI0_IRQHandler+0x10>)
 80015ee:	f000 fdf5 	bl	80021dc <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	2000061c 	.word	0x2000061c

080015fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <EXTI15_10_IRQHandler+0x10>)
 8001602:	f000 fdeb 	bl	80021dc <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000010 	.word	0x20000010

08001610 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001616:	2300      	movs	r3, #0
 8001618:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <BSP_SPI1_Init+0x54>)
 800161c:	4a12      	ldr	r2, [pc, #72]	; (8001668 <BSP_SPI1_Init+0x58>)
 800161e:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <BSP_SPI1_Init+0x5c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	4911      	ldr	r1, [pc, #68]	; (800166c <BSP_SPI1_Init+0x5c>)
 8001628:	600a      	str	r2, [r1, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d114      	bne.n	8001658 <BSP_SPI1_Init+0x48>
  {
	if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 800162e:	480d      	ldr	r0, [pc, #52]	; (8001664 <BSP_SPI1_Init+0x54>)
 8001630:	f002 fea8 	bl	8004384 <HAL_SPI_GetState>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10e      	bne.n	8001658 <BSP_SPI1_Init+0x48>
	{
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
		/* Init the SPI Msp */
		SPI1_MspInit(&hspi1);
 800163a:	480a      	ldr	r0, [pc, #40]	; (8001664 <BSP_SPI1_Init+0x54>)
 800163c:	f000 f882 	bl	8001744 <SPI1_MspInit>
			{
				return BSP_ERROR_MSP_FAILURE;
			}
		}
#endif
		if(ret == BSP_ERROR_NONE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d108      	bne.n	8001658 <BSP_SPI1_Init+0x48>
		{
			/* Init the SPI */
			if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8001646:	4807      	ldr	r0, [pc, #28]	; (8001664 <BSP_SPI1_Init+0x54>)
 8001648:	f000 f83a 	bl	80016c0 <MX_SPI1_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d002      	beq.n	8001658 <BSP_SPI1_Init+0x48>
			{
				ret = BSP_ERROR_BUS_FAILURE;
 8001652:	f06f 0307 	mvn.w	r3, #7
 8001656:	607b      	str	r3, [r7, #4]
			}
		}
	}
  }

  return ret;
 8001658:	687b      	ldr	r3, [r7, #4]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000624 	.word	0x20000624
 8001668:	40013000 	.word	0x40013000
 800166c:	20000320 	.word	0x20000320

08001670 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af02      	add	r7, sp, #8
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	4613      	mov	r3, r2
 800167c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8001682:	88fa      	ldrh	r2, [r7, #6]
 8001684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	4613      	mov	r3, r2
 800168c:	68ba      	ldr	r2, [r7, #8]
 800168e:	68f9      	ldr	r1, [r7, #12]
 8001690:	4806      	ldr	r0, [pc, #24]	; (80016ac <BSP_SPI1_SendRecv+0x3c>)
 8001692:	f002 fc64 	bl	8003f5e <HAL_SPI_TransmitReceive>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d002      	beq.n	80016a2 <BSP_SPI1_SendRecv+0x32>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 800169c:	f06f 0305 	mvn.w	r3, #5
 80016a0:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80016a2:	697b      	ldr	r3, [r7, #20]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000624 	.word	0x20000624

080016b0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80016b4:	f000 fc24 	bl	8001f00 <HAL_GetTick>
 80016b8:	4603      	mov	r3, r0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80016c8:	2300      	movs	r3, #0
 80016ca:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI1;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a1c      	ldr	r2, [pc, #112]	; (8001740 <MX_SPI1_Init+0x80>)
 80016d0:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016d8:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80016e6:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016fa:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2218      	movs	r2, #24
 8001700:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2207      	movs	r2, #7
 8001718:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2208      	movs	r2, #8
 8001724:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f002 fb6c 	bl	8003e04 <HAL_SPI_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001736:	7bfb      	ldrb	r3, [r7, #15]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40013000 	.word	0x40013000

08001744 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08a      	sub	sp, #40	; 0x28
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800174c:	4b2c      	ldr	r3, [pc, #176]	; (8001800 <SPI1_MspInit+0xbc>)
 800174e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001750:	4a2b      	ldr	r2, [pc, #172]	; (8001800 <SPI1_MspInit+0xbc>)
 8001752:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001756:	6613      	str	r3, [r2, #96]	; 0x60
 8001758:	4b29      	ldr	r3, [pc, #164]	; (8001800 <SPI1_MspInit+0xbc>)
 800175a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800175c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001764:	4b26      	ldr	r3, [pc, #152]	; (8001800 <SPI1_MspInit+0xbc>)
 8001766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001768:	4a25      	ldr	r2, [pc, #148]	; (8001800 <SPI1_MspInit+0xbc>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001770:	4b23      	ldr	r3, [pc, #140]	; (8001800 <SPI1_MspInit+0xbc>)
 8001772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800177c:	4b20      	ldr	r3, [pc, #128]	; (8001800 <SPI1_MspInit+0xbc>)
 800177e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001780:	4a1f      	ldr	r2, [pc, #124]	; (8001800 <SPI1_MspInit+0xbc>)
 8001782:	f043 0302 	orr.w	r3, r3, #2
 8001786:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001788:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <SPI1_MspInit+0xbc>)
 800178a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8001794:	2340      	movs	r3, #64	; 0x40
 8001796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001798:	2302      	movs	r3, #2
 800179a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a0:	2303      	movs	r3, #3
 80017a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 80017a4:	2305      	movs	r3, #5
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	4619      	mov	r1, r3
 80017ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b2:	f000 fd43 	bl	800223c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 80017b6:	2380      	movs	r3, #128	; 0x80
 80017b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c2:	2303      	movs	r3, #3
 80017c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 80017c6:	2305      	movs	r3, #5
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	4619      	mov	r1, r3
 80017d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d4:	f000 fd32 	bl	800223c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80017d8:	2308      	movs	r3, #8
 80017da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017dc:	2302      	movs	r3, #2
 80017de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e4:	2303      	movs	r3, #3
 80017e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80017e8:	2305      	movs	r3, #5
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	4619      	mov	r1, r3
 80017f2:	4804      	ldr	r0, [pc, #16]	; (8001804 <SPI1_MspInit+0xc0>)
 80017f4:	f000 fd22 	bl	800223c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80017f8:	bf00      	nop
 80017fa:	3728      	adds	r7, #40	; 0x28
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40021000 	.word	0x40021000
 8001804:	48000400 	.word	0x48000400

08001808 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	e00a      	b.n	8001830 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800181a:	f3af 8000 	nop.w
 800181e:	4601      	mov	r1, r0
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	60ba      	str	r2, [r7, #8]
 8001826:	b2ca      	uxtb	r2, r1
 8001828:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	3301      	adds	r3, #1
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	429a      	cmp	r2, r3
 8001836:	dbf0      	blt.n	800181a <_read+0x12>
	}

return len;
 8001838:	687b      	ldr	r3, [r7, #4]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	60f8      	str	r0, [r7, #12]
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	e009      	b.n	8001868 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	60ba      	str	r2, [r7, #8]
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f000 fa83 	bl	8001d68 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	3301      	adds	r3, #1
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	429a      	cmp	r2, r3
 800186e:	dbf1      	blt.n	8001854 <_write+0x12>
	}
	return len;
 8001870:	687b      	ldr	r3, [r7, #4]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <_close>:

int _close(int file)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
	return -1;
 8001882:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018a2:	605a      	str	r2, [r3, #4]
	return 0;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <_isatty>:

int _isatty(int file)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
	return 1;
 80018ba:	2301      	movs	r3, #1
}
 80018bc:	4618      	mov	r0, r3
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
	return 0;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018ec:	4a14      	ldr	r2, [pc, #80]	; (8001940 <_sbrk+0x5c>)
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <_sbrk+0x60>)
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f8:	4b13      	ldr	r3, [pc, #76]	; (8001948 <_sbrk+0x64>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d102      	bne.n	8001906 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001900:	4b11      	ldr	r3, [pc, #68]	; (8001948 <_sbrk+0x64>)
 8001902:	4a12      	ldr	r2, [pc, #72]	; (800194c <_sbrk+0x68>)
 8001904:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <_sbrk+0x64>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4413      	add	r3, r2
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	429a      	cmp	r2, r3
 8001912:	d207      	bcs.n	8001924 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001914:	f004 fe2e 	bl	8006574 <__errno>
 8001918:	4602      	mov	r2, r0
 800191a:	230c      	movs	r3, #12
 800191c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800191e:	f04f 33ff 	mov.w	r3, #4294967295
 8001922:	e009      	b.n	8001938 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <_sbrk+0x64>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800192a:	4b07      	ldr	r3, [pc, #28]	; (8001948 <_sbrk+0x64>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	4a05      	ldr	r2, [pc, #20]	; (8001948 <_sbrk+0x64>)
 8001934:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001936:	68fb      	ldr	r3, [r7, #12]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20018000 	.word	0x20018000
 8001944:	00000400 	.word	0x00000400
 8001948:	20000324 	.word	0x20000324
 800194c:	20000720 	.word	0x20000720

08001950 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001954:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <SystemInit+0x64>)
 8001956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800195a:	4a16      	ldr	r2, [pc, #88]	; (80019b4 <SystemInit+0x64>)
 800195c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001960:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001964:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <SystemInit+0x68>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a13      	ldr	r2, [pc, #76]	; (80019b8 <SystemInit+0x68>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <SystemInit+0x68>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <SystemInit+0x68>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a0f      	ldr	r2, [pc, #60]	; (80019b8 <SystemInit+0x68>)
 800197c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001980:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001984:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001986:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <SystemInit+0x68>)
 8001988:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800198c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <SystemInit+0x68>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a09      	ldr	r2, [pc, #36]	; (80019b8 <SystemInit+0x68>)
 8001994:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001998:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800199a:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <SystemInit+0x68>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <SystemInit+0x64>)
 80019a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019a6:	609a      	str	r2, [r3, #8]
#endif
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000ed00 	.word	0xe000ed00
 80019b8:	40021000 	.word	0x40021000

080019bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019c0:	f7ff ffc6 	bl	8001950 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80019c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80019c6:	e003      	b.n	80019d0 <LoopCopyDataInit>

080019c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80019c8:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80019ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80019cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80019ce:	3104      	adds	r1, #4

080019d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80019d0:	480a      	ldr	r0, [pc, #40]	; (80019fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <LoopForever+0xe>)
	adds	r2, r0, r1
 80019d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80019d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80019d8:	d3f6      	bcc.n	80019c8 <CopyDataInit>
	ldr	r2, =_sbss
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <LoopForever+0x12>)
	b	LoopFillZerobss
 80019dc:	e002      	b.n	80019e4 <LoopFillZerobss>

080019de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80019de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80019e0:	f842 3b04 	str.w	r3, [r2], #4

080019e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <LoopForever+0x16>)
	cmp	r2, r3
 80019e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80019e8:	d3f9      	bcc.n	80019de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ea:	f004 ff55 	bl	8006898 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019ee:	f7ff fcae 	bl	800134e <main>

080019f2 <LoopForever>:

LoopForever:
    b LoopForever
 80019f2:	e7fe      	b.n	80019f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019f4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80019f8:	08007b10 	.word	0x08007b10
	ldr	r0, =_sdata
 80019fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a00:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 8001a04:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 8001a08:	20000720 	.word	0x20000720

08001a0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a0c:	e7fe      	b.n	8001a0c <ADC1_2_IRQHandler>
	...

08001a10 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	4a04      	ldr	r2, [pc, #16]	; (8001a30 <BSP_LED_Init+0x20>)
 8001a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a22:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	08007948 	.word	0x08007948

08001a34 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	4a06      	ldr	r2, [pc, #24]	; (8001a5c <BSP_LED_On+0x28>)
 8001a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a46:	2120      	movs	r1, #32
 8001a48:	2201      	movs	r2, #1
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 feaa 	bl	80027a4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000008 	.word	0x20000008

08001a60 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	4a06      	ldr	r2, [pc, #24]	; (8001a88 <BSP_LED_Off+0x28>)
 8001a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a72:	2120      	movs	r1, #32
 8001a74:	2200      	movs	r2, #0
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 fe94 	bl	80027a4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000008 	.word	0x20000008

08001a8c <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	4a06      	ldr	r2, [pc, #24]	; (8001ab4 <BSP_LED_Toggle+0x28>)
 8001a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 fe96 	bl	80027d4 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000008 	.word	0x20000008

08001ab8 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	4b1c      	ldr	r3, [pc, #112]	; (8001b30 <LED_USER_GPIO_Init+0x78>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac2:	4a1b      	ldr	r2, [pc, #108]	; (8001b30 <LED_USER_GPIO_Init+0x78>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aca:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <LED_USER_GPIO_Init+0x78>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad6:	f107 030c 	add.w	r3, r7, #12
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
 8001ae4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae6:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <LED_USER_GPIO_Init+0x78>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aea:	4a11      	ldr	r2, [pc, #68]	; (8001b30 <LED_USER_GPIO_Init+0x78>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af2:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <LED_USER_GPIO_Init+0x78>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	607b      	str	r3, [r7, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2120      	movs	r1, #32
 8001b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b06:	f000 fe4d 	bl	80027a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8001b0a:	2320      	movs	r3, #32
 8001b0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8001b1a:	f107 030c 	add.w	r3, r7, #12
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b24:	f000 fb8a 	bl	800223c <HAL_GPIO_Init>

}
 8001b28:	bf00      	nop
 8001b2a:	3720      	adds	r7, #32
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40021000 	.word	0x40021000

08001b34 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	460a      	mov	r2, r1
 8001b3e:	71fb      	strb	r3, [r7, #7]
 8001b40:	4613      	mov	r3, r2
 8001b42:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	4a1f      	ldr	r2, [pc, #124]	; (8001bc8 <BSP_PB_Init+0x94>)
 8001b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b50:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8001b52:	79bb      	ldrb	r3, [r7, #6]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d131      	bne.n	8001bbc <BSP_PB_Init+0x88>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	4a1b      	ldr	r2, [pc, #108]	; (8001bcc <BSP_PB_Init+0x98>)
 8001b5e:	1898      	adds	r0, r3, r2
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	4a1b      	ldr	r2, [pc, #108]	; (8001bd0 <BSP_PB_Init+0x9c>)
 8001b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f000 fb22 	bl	80021b2 <HAL_EXTI_GetHandle>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <BSP_PB_Init+0x48>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001b74:	f06f 0303 	mvn.w	r3, #3
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	e01f      	b.n	8001bbc <BSP_PB_Init+0x88>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	4a12      	ldr	r2, [pc, #72]	; (8001bcc <BSP_PB_Init+0x98>)
 8001b82:	1898      	adds	r0, r3, r2
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	4a13      	ldr	r2, [pc, #76]	; (8001bd4 <BSP_PB_Init+0xa0>)
 8001b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	2100      	movs	r1, #0
 8001b90:	f000 faf5 	bl	800217e <HAL_EXTI_RegisterCallback>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <BSP_PB_Init+0x6e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001b9a:	f06f 0303 	mvn.w	r3, #3
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	e00c      	b.n	8001bbc <BSP_PB_Init+0x88>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001ba2:	2028      	movs	r0, #40	; 0x28
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	4a0c      	ldr	r2, [pc, #48]	; (8001bd8 <BSP_PB_Init+0xa4>)
 8001ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bac:	2200      	movs	r2, #0
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f000 faaf 	bl	8002112 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001bb4:	2328      	movs	r3, #40	; 0x28
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 fac7 	bl	800214a <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	0800794c 	.word	0x0800794c
 8001bcc:	20000010 	.word	0x20000010
 8001bd0:	08007950 	.word	0x08007950
 8001bd4:	08007954 	.word	0x08007954
 8001bd8:	08007958 	.word	0x08007958

08001bdc <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	4a09      	ldr	r2, [pc, #36]	; (8001c10 <BSP_PB_GetState+0x34>)
 8001bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f000 fdbd 	bl	8002774 <HAL_GPIO_ReadPin>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	bf0c      	ite	eq
 8001c00:	2301      	moveq	r3, #1
 8001c02:	2300      	movne	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	2000000c 	.word	0x2000000c

08001c14 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f7fe fe61 	bl	80008e0 <BSP_PB_Callback>
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c2a:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <BUTTON_USER_GPIO_Init+0x68>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2e:	4a17      	ldr	r2, [pc, #92]	; (8001c8c <BUTTON_USER_GPIO_Init+0x68>)
 8001c30:	f043 0304 	orr.w	r3, r3, #4
 8001c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <BUTTON_USER_GPIO_Init+0x68>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c42:	f107 030c 	add.w	r3, r7, #12
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	60da      	str	r2, [r3, #12]
 8001c50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <BUTTON_USER_GPIO_Init+0x68>)
 8001c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c56:	4a0d      	ldr	r2, [pc, #52]	; (8001c8c <BUTTON_USER_GPIO_Init+0x68>)
 8001c58:	f043 0304 	orr.w	r3, r3, #4
 8001c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <BUTTON_USER_GPIO_Init+0x68>)
 8001c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8001c6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c70:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <BUTTON_USER_GPIO_Init+0x6c>)
 8001c72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8001c78:	f107 030c 	add.w	r3, r7, #12
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4805      	ldr	r0, [pc, #20]	; (8001c94 <BUTTON_USER_GPIO_Init+0x70>)
 8001c80:	f000 fadc 	bl	800223c <HAL_GPIO_Init>

}
 8001c84:	bf00      	nop
 8001c86:	3720      	adds	r7, #32
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	10210000 	.word	0x10210000
 8001c94:	48000800 	.word	0x48000800

08001c98 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d903      	bls.n	8001cb4 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001cac:	f06f 0301 	mvn.w	r3, #1
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	e01c      	b.n	8001cee <BSP_COM_Init+0x56>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8001cb4:	79fa      	ldrb	r2, [r7, #7]
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	490f      	ldr	r1, [pc, #60]	; (8001cf8 <BSP_COM_Init+0x60>)
 8001cba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001cbe:	490f      	ldr	r1, [pc, #60]	; (8001cfc <BSP_COM_Init+0x64>)
 8001cc0:	01db      	lsls	r3, r3, #7
 8001cc2:	440b      	add	r3, r1
 8001cc4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	01db      	lsls	r3, r3, #7
 8001cca:	4a0c      	ldr	r2, [pc, #48]	; (8001cfc <BSP_COM_Init+0x64>)
 8001ccc:	4413      	add	r3, r2
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 f862 	bl	8001d98 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	01db      	lsls	r3, r3, #7
 8001cd8:	4a08      	ldr	r2, [pc, #32]	; (8001cfc <BSP_COM_Init+0x64>)
 8001cda:	4413      	add	r3, r2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f000 f80f 	bl	8001d00 <MX_USART2_UART_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d002      	beq.n	8001cee <BSP_COM_Init+0x56>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001ce8:	f06f 0303 	mvn.w	r3, #3
 8001cec:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001cee:	68fb      	ldr	r3, [r7, #12]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000018 	.word	0x20000018
 8001cfc:	20000688 	.word	0x20000688

08001d00 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	73fb      	strb	r3, [r7, #15]
  huart->Instance = USART2;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a15      	ldr	r2, [pc, #84]	; (8001d64 <MX_USART2_UART_Init+0x64>)
 8001d10:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d18:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	220c      	movs	r2, #12
 8001d30:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f002 fc84 	bl	8004658 <HAL_UART_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40004400 	.word	0x40004400

08001d68 <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) /* For IAR and MDK-ARM */
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* __GNUC__ */
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8001d70:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <__io_putchar+0x28>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	01db      	lsls	r3, r3, #7
 8001d76:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <__io_putchar+0x2c>)
 8001d78:	1898      	adds	r0, r3, r2
 8001d7a:	1d39      	adds	r1, r7, #4
 8001d7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d80:	2201      	movs	r2, #1
 8001d82:	f002 fcc1 	bl	8004708 <HAL_UART_Transmit>
  return ch;
 8001d86:	687b      	ldr	r3, [r7, #4]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000328 	.word	0x20000328
 8001d94:	20000688 	.word	0x20000688

08001d98 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08a      	sub	sp, #40	; 0x28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001da0:	4b1e      	ldr	r3, [pc, #120]	; (8001e1c <USART2_MspInit+0x84>)
 8001da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da4:	4a1d      	ldr	r2, [pc, #116]	; (8001e1c <USART2_MspInit+0x84>)
 8001da6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001daa:	6593      	str	r3, [r2, #88]	; 0x58
 8001dac:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <USART2_MspInit+0x84>)
 8001dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db8:	4b18      	ldr	r3, [pc, #96]	; (8001e1c <USART2_MspInit+0x84>)
 8001dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dbc:	4a17      	ldr	r2, [pc, #92]	; (8001e1c <USART2_MspInit+0x84>)
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dc4:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <USART2_MspInit+0x84>)
 8001dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8001dd0:	2304      	movs	r3, #4
 8001dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8001de0:	2307      	movs	r3, #7
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	4619      	mov	r1, r3
 8001dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dee:	f000 fa25 	bl	800223c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8001df2:	2308      	movs	r3, #8
 8001df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df6:	2302      	movs	r3, #2
 8001df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8001e02:	2307      	movs	r3, #7
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8001e06:	f107 0314 	add.w	r3, r7, #20
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e10:	f000 fa14 	bl	800223c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8001e14:	bf00      	nop
 8001e16:	3728      	adds	r7, #40	; 0x28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40021000 	.word	0x40021000

08001e20 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e26:	2300      	movs	r3, #0
 8001e28:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <HAL_Init+0x3c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a0b      	ldr	r2, [pc, #44]	; (8001e5c <HAL_Init+0x3c>)
 8001e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e34:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e36:	2003      	movs	r0, #3
 8001e38:	f000 f960 	bl	80020fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f000 f80f 	bl	8001e60 <HAL_InitTick>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	71fb      	strb	r3, [r7, #7]
 8001e4c:	e001      	b.n	8001e52 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e4e:	f7ff fb7d 	bl	800154c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e52:	79fb      	ldrb	r3, [r7, #7]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40022000 	.word	0x40022000

08001e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e6c:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <HAL_InitTick+0x6c>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d023      	beq.n	8001ebc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e74:	4b16      	ldr	r3, [pc, #88]	; (8001ed0 <HAL_InitTick+0x70>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <HAL_InitTick+0x6c>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 f96b 	bl	8002166 <HAL_SYSTICK_Config>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d10f      	bne.n	8001eb6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b0f      	cmp	r3, #15
 8001e9a:	d809      	bhi.n	8001eb0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea4:	f000 f935 	bl	8002112 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ea8:	4a0a      	ldr	r2, [pc, #40]	; (8001ed4 <HAL_InitTick+0x74>)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	e007      	b.n	8001ec0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	73fb      	strb	r3, [r7, #15]
 8001eb4:	e004      	b.n	8001ec0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	73fb      	strb	r3, [r7, #15]
 8001eba:	e001      	b.n	8001ec0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000020 	.word	0x20000020
 8001ed0:	20000004 	.word	0x20000004
 8001ed4:	2000001c 	.word	0x2000001c

08001ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <HAL_IncTick+0x20>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_IncTick+0x24>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	4a04      	ldr	r2, [pc, #16]	; (8001efc <HAL_IncTick+0x24>)
 8001eea:	6013      	str	r3, [r2, #0]
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	20000020 	.word	0x20000020
 8001efc:	20000708 	.word	0x20000708

08001f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  return uwTick;
 8001f04:	4b03      	ldr	r3, [pc, #12]	; (8001f14 <HAL_GetTick+0x14>)
 8001f06:	681b      	ldr	r3, [r3, #0]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	20000708 	.word	0x20000708

08001f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f20:	f7ff ffee 	bl	8001f00 <HAL_GetTick>
 8001f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f30:	d005      	beq.n	8001f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <HAL_Delay+0x40>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f3e:	bf00      	nop
 8001f40:	f7ff ffde 	bl	8001f00 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d8f7      	bhi.n	8001f40 <HAL_Delay+0x28>
  {
  }
}
 8001f50:	bf00      	nop
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000020 	.word	0x20000020

08001f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f78:	4013      	ands	r3, r2
 8001f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f8e:	4a04      	ldr	r2, [pc, #16]	; (8001fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	60d3      	str	r3, [r2, #12]
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa8:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <__NVIC_GetPriorityGrouping+0x18>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	0a1b      	lsrs	r3, r3, #8
 8001fae:	f003 0307 	and.w	r3, r3, #7
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	db0b      	blt.n	8001fea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	f003 021f 	and.w	r2, r3, #31
 8001fd8:	4907      	ldr	r1, [pc, #28]	; (8001ff8 <__NVIC_EnableIRQ+0x38>)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	e000e100 	.word	0xe000e100

08001ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	6039      	str	r1, [r7, #0]
 8002006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200c:	2b00      	cmp	r3, #0
 800200e:	db0a      	blt.n	8002026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	b2da      	uxtb	r2, r3
 8002014:	490c      	ldr	r1, [pc, #48]	; (8002048 <__NVIC_SetPriority+0x4c>)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	0112      	lsls	r2, r2, #4
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	440b      	add	r3, r1
 8002020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002024:	e00a      	b.n	800203c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4908      	ldr	r1, [pc, #32]	; (800204c <__NVIC_SetPriority+0x50>)
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	3b04      	subs	r3, #4
 8002034:	0112      	lsls	r2, r2, #4
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	440b      	add	r3, r1
 800203a:	761a      	strb	r2, [r3, #24]
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000e100 	.word	0xe000e100
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002050:	b480      	push	{r7}
 8002052:	b089      	sub	sp, #36	; 0x24
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f1c3 0307 	rsb	r3, r3, #7
 800206a:	2b04      	cmp	r3, #4
 800206c:	bf28      	it	cs
 800206e:	2304      	movcs	r3, #4
 8002070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3304      	adds	r3, #4
 8002076:	2b06      	cmp	r3, #6
 8002078:	d902      	bls.n	8002080 <NVIC_EncodePriority+0x30>
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3b03      	subs	r3, #3
 800207e:	e000      	b.n	8002082 <NVIC_EncodePriority+0x32>
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002084:	f04f 32ff 	mov.w	r2, #4294967295
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43da      	mvns	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	401a      	ands	r2, r3
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002098:	f04f 31ff 	mov.w	r1, #4294967295
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	fa01 f303 	lsl.w	r3, r1, r3
 80020a2:	43d9      	mvns	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a8:	4313      	orrs	r3, r2
         );
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3724      	adds	r7, #36	; 0x24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020c8:	d301      	bcc.n	80020ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ca:	2301      	movs	r3, #1
 80020cc:	e00f      	b.n	80020ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ce:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <SysTick_Config+0x40>)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020d6:	210f      	movs	r1, #15
 80020d8:	f04f 30ff 	mov.w	r0, #4294967295
 80020dc:	f7ff ff8e 	bl	8001ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <SysTick_Config+0x40>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020e6:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <SysTick_Config+0x40>)
 80020e8:	2207      	movs	r2, #7
 80020ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	e000e010 	.word	0xe000e010

080020fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff ff29 	bl	8001f5c <__NVIC_SetPriorityGrouping>
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b086      	sub	sp, #24
 8002116:	af00      	add	r7, sp, #0
 8002118:	4603      	mov	r3, r0
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
 800211e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002124:	f7ff ff3e 	bl	8001fa4 <__NVIC_GetPriorityGrouping>
 8002128:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	68b9      	ldr	r1, [r7, #8]
 800212e:	6978      	ldr	r0, [r7, #20]
 8002130:	f7ff ff8e 	bl	8002050 <NVIC_EncodePriority>
 8002134:	4602      	mov	r2, r0
 8002136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff5d 	bl	8001ffc <__NVIC_SetPriority>
}
 8002142:	bf00      	nop
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	4603      	mov	r3, r0
 8002152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff31 	bl	8001fc0 <__NVIC_EnableIRQ>
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff ffa2 	bl	80020b8 <SysTick_Config>
 8002174:	4603      	mov	r3, r0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800217e:	b480      	push	{r7}
 8002180:	b087      	sub	sp, #28
 8002182:	af00      	add	r7, sp, #0
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	460b      	mov	r3, r1
 8002188:	607a      	str	r2, [r7, #4]
 800218a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002190:	7afb      	ldrb	r3, [r7, #11]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d103      	bne.n	800219e <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	605a      	str	r2, [r3, #4]
      break;
 800219c:	e002      	b.n	80021a4 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	75fb      	strb	r3, [r7, #23]
      break;
 80021a2:	bf00      	nop
  }

  return status;
 80021a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	371c      	adds	r7, #28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e003      	b.n	80021ce <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80021cc:	2300      	movs	r3, #0
  }
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
	...

080021dc <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	0c1b      	lsrs	r3, r3, #16
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 031f 	and.w	r3, r3, #31
 80021f8:	2201      	movs	r2, #1
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	015a      	lsls	r2, r3, #5
 8002204:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <HAL_EXTI_IRQHandler+0x5c>)
 8002206:	4413      	add	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4013      	ands	r3, r2
 8002212:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d009      	beq.n	800222e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d002      	beq.n	800222e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	4798      	blx	r3
    }
  }
}
 800222e:	bf00      	nop
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40010414 	.word	0x40010414

0800223c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800223c:	b480      	push	{r7}
 800223e:	b087      	sub	sp, #28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800224a:	e17f      	b.n	800254c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	2101      	movs	r1, #1
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	fa01 f303 	lsl.w	r3, r1, r3
 8002258:	4013      	ands	r3, r2
 800225a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 8171 	beq.w	8002546 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d00b      	beq.n	8002284 <HAL_GPIO_Init+0x48>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d007      	beq.n	8002284 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002278:	2b11      	cmp	r3, #17
 800227a:	d003      	beq.n	8002284 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b12      	cmp	r3, #18
 8002282:	d130      	bne.n	80022e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	2203      	movs	r2, #3
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4013      	ands	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	68da      	ldr	r2, [r3, #12]
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022ba:	2201      	movs	r2, #1
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43db      	mvns	r3, r3
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	4013      	ands	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	091b      	lsrs	r3, r3, #4
 80022d0:	f003 0201 	and.w	r2, r3, #1
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d118      	bne.n	8002324 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80022f8:	2201      	movs	r2, #1
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4013      	ands	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	08db      	lsrs	r3, r3, #3
 800230e:	f003 0201 	and.w	r2, r3, #1
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	2203      	movs	r2, #3
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4013      	ands	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b02      	cmp	r3, #2
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x128>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b12      	cmp	r3, #18
 8002362:	d123      	bne.n	80023ac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	08da      	lsrs	r2, r3, #3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3208      	adds	r2, #8
 800236c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002370:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	220f      	movs	r2, #15
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4013      	ands	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	08da      	lsrs	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3208      	adds	r2, #8
 80023a6:	6939      	ldr	r1, [r7, #16]
 80023a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	2203      	movs	r2, #3
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	4013      	ands	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 0203 	and.w	r2, r3, #3
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 80ac 	beq.w	8002546 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ee:	4b5e      	ldr	r3, [pc, #376]	; (8002568 <HAL_GPIO_Init+0x32c>)
 80023f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f2:	4a5d      	ldr	r2, [pc, #372]	; (8002568 <HAL_GPIO_Init+0x32c>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	6613      	str	r3, [r2, #96]	; 0x60
 80023fa:	4b5b      	ldr	r3, [pc, #364]	; (8002568 <HAL_GPIO_Init+0x32c>)
 80023fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002406:	4a59      	ldr	r2, [pc, #356]	; (800256c <HAL_GPIO_Init+0x330>)
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	089b      	lsrs	r3, r3, #2
 800240c:	3302      	adds	r3, #2
 800240e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002412:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	220f      	movs	r2, #15
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4013      	ands	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002430:	d025      	beq.n	800247e <HAL_GPIO_Init+0x242>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a4e      	ldr	r2, [pc, #312]	; (8002570 <HAL_GPIO_Init+0x334>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d01f      	beq.n	800247a <HAL_GPIO_Init+0x23e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a4d      	ldr	r2, [pc, #308]	; (8002574 <HAL_GPIO_Init+0x338>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d019      	beq.n	8002476 <HAL_GPIO_Init+0x23a>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a4c      	ldr	r2, [pc, #304]	; (8002578 <HAL_GPIO_Init+0x33c>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d013      	beq.n	8002472 <HAL_GPIO_Init+0x236>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a4b      	ldr	r2, [pc, #300]	; (800257c <HAL_GPIO_Init+0x340>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d00d      	beq.n	800246e <HAL_GPIO_Init+0x232>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a4a      	ldr	r2, [pc, #296]	; (8002580 <HAL_GPIO_Init+0x344>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d007      	beq.n	800246a <HAL_GPIO_Init+0x22e>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a49      	ldr	r2, [pc, #292]	; (8002584 <HAL_GPIO_Init+0x348>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d101      	bne.n	8002466 <HAL_GPIO_Init+0x22a>
 8002462:	2306      	movs	r3, #6
 8002464:	e00c      	b.n	8002480 <HAL_GPIO_Init+0x244>
 8002466:	2307      	movs	r3, #7
 8002468:	e00a      	b.n	8002480 <HAL_GPIO_Init+0x244>
 800246a:	2305      	movs	r3, #5
 800246c:	e008      	b.n	8002480 <HAL_GPIO_Init+0x244>
 800246e:	2304      	movs	r3, #4
 8002470:	e006      	b.n	8002480 <HAL_GPIO_Init+0x244>
 8002472:	2303      	movs	r3, #3
 8002474:	e004      	b.n	8002480 <HAL_GPIO_Init+0x244>
 8002476:	2302      	movs	r3, #2
 8002478:	e002      	b.n	8002480 <HAL_GPIO_Init+0x244>
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <HAL_GPIO_Init+0x244>
 800247e:	2300      	movs	r3, #0
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	f002 0203 	and.w	r2, r2, #3
 8002486:	0092      	lsls	r2, r2, #2
 8002488:	4093      	lsls	r3, r2
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002490:	4936      	ldr	r1, [pc, #216]	; (800256c <HAL_GPIO_Init+0x330>)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	089b      	lsrs	r3, r3, #2
 8002496:	3302      	adds	r3, #2
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800249e:	4b3a      	ldr	r3, [pc, #232]	; (8002588 <HAL_GPIO_Init+0x34c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	43db      	mvns	r3, r3
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4013      	ands	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4313      	orrs	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024c2:	4a31      	ldr	r2, [pc, #196]	; (8002588 <HAL_GPIO_Init+0x34c>)
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80024c8:	4b2f      	ldr	r3, [pc, #188]	; (8002588 <HAL_GPIO_Init+0x34c>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	4013      	ands	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024ec:	4a26      	ldr	r2, [pc, #152]	; (8002588 <HAL_GPIO_Init+0x34c>)
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024f2:	4b25      	ldr	r3, [pc, #148]	; (8002588 <HAL_GPIO_Init+0x34c>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	43db      	mvns	r3, r3
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4013      	ands	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4313      	orrs	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002516:	4a1c      	ldr	r2, [pc, #112]	; (8002588 <HAL_GPIO_Init+0x34c>)
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800251c:	4b1a      	ldr	r3, [pc, #104]	; (8002588 <HAL_GPIO_Init+0x34c>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	43db      	mvns	r3, r3
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4013      	ands	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002540:	4a11      	ldr	r2, [pc, #68]	; (8002588 <HAL_GPIO_Init+0x34c>)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	3301      	adds	r3, #1
 800254a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	fa22 f303 	lsr.w	r3, r2, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	f47f ae78 	bne.w	800224c <HAL_GPIO_Init+0x10>
  }
}
 800255c:	bf00      	nop
 800255e:	371c      	adds	r7, #28
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	40021000 	.word	0x40021000
 800256c:	40010000 	.word	0x40010000
 8002570:	48000400 	.word	0x48000400
 8002574:	48000800 	.word	0x48000800
 8002578:	48000c00 	.word	0x48000c00
 800257c:	48001000 	.word	0x48001000
 8002580:	48001400 	.word	0x48001400
 8002584:	48001800 	.word	0x48001800
 8002588:	40010400 	.word	0x40010400

0800258c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800258c:	b480      	push	{r7}
 800258e:	b087      	sub	sp, #28
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800259a:	e0cd      	b.n	8002738 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800259c:	2201      	movs	r2, #1
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	4013      	ands	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 80c0 	beq.w	8002732 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80025b2:	4a68      	ldr	r2, [pc, #416]	; (8002754 <HAL_GPIO_DeInit+0x1c8>)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	089b      	lsrs	r3, r3, #2
 80025b8:	3302      	adds	r3, #2
 80025ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025be:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	220f      	movs	r2, #15
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	4013      	ands	r3, r2
 80025d2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025da:	d025      	beq.n	8002628 <HAL_GPIO_DeInit+0x9c>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a5e      	ldr	r2, [pc, #376]	; (8002758 <HAL_GPIO_DeInit+0x1cc>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d01f      	beq.n	8002624 <HAL_GPIO_DeInit+0x98>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a5d      	ldr	r2, [pc, #372]	; (800275c <HAL_GPIO_DeInit+0x1d0>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d019      	beq.n	8002620 <HAL_GPIO_DeInit+0x94>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a5c      	ldr	r2, [pc, #368]	; (8002760 <HAL_GPIO_DeInit+0x1d4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d013      	beq.n	800261c <HAL_GPIO_DeInit+0x90>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a5b      	ldr	r2, [pc, #364]	; (8002764 <HAL_GPIO_DeInit+0x1d8>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d00d      	beq.n	8002618 <HAL_GPIO_DeInit+0x8c>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a5a      	ldr	r2, [pc, #360]	; (8002768 <HAL_GPIO_DeInit+0x1dc>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d007      	beq.n	8002614 <HAL_GPIO_DeInit+0x88>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a59      	ldr	r2, [pc, #356]	; (800276c <HAL_GPIO_DeInit+0x1e0>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d101      	bne.n	8002610 <HAL_GPIO_DeInit+0x84>
 800260c:	2306      	movs	r3, #6
 800260e:	e00c      	b.n	800262a <HAL_GPIO_DeInit+0x9e>
 8002610:	2307      	movs	r3, #7
 8002612:	e00a      	b.n	800262a <HAL_GPIO_DeInit+0x9e>
 8002614:	2305      	movs	r3, #5
 8002616:	e008      	b.n	800262a <HAL_GPIO_DeInit+0x9e>
 8002618:	2304      	movs	r3, #4
 800261a:	e006      	b.n	800262a <HAL_GPIO_DeInit+0x9e>
 800261c:	2303      	movs	r3, #3
 800261e:	e004      	b.n	800262a <HAL_GPIO_DeInit+0x9e>
 8002620:	2302      	movs	r3, #2
 8002622:	e002      	b.n	800262a <HAL_GPIO_DeInit+0x9e>
 8002624:	2301      	movs	r3, #1
 8002626:	e000      	b.n	800262a <HAL_GPIO_DeInit+0x9e>
 8002628:	2300      	movs	r3, #0
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	f002 0203 	and.w	r2, r2, #3
 8002630:	0092      	lsls	r2, r2, #2
 8002632:	4093      	lsls	r3, r2
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	429a      	cmp	r2, r3
 8002638:	d132      	bne.n	80026a0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800263a:	4b4d      	ldr	r3, [pc, #308]	; (8002770 <HAL_GPIO_DeInit+0x1e4>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	43db      	mvns	r3, r3
 8002642:	494b      	ldr	r1, [pc, #300]	; (8002770 <HAL_GPIO_DeInit+0x1e4>)
 8002644:	4013      	ands	r3, r2
 8002646:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002648:	4b49      	ldr	r3, [pc, #292]	; (8002770 <HAL_GPIO_DeInit+0x1e4>)
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	43db      	mvns	r3, r3
 8002650:	4947      	ldr	r1, [pc, #284]	; (8002770 <HAL_GPIO_DeInit+0x1e4>)
 8002652:	4013      	ands	r3, r2
 8002654:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002656:	4b46      	ldr	r3, [pc, #280]	; (8002770 <HAL_GPIO_DeInit+0x1e4>)
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	43db      	mvns	r3, r3
 800265e:	4944      	ldr	r1, [pc, #272]	; (8002770 <HAL_GPIO_DeInit+0x1e4>)
 8002660:	4013      	ands	r3, r2
 8002662:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8002664:	4b42      	ldr	r3, [pc, #264]	; (8002770 <HAL_GPIO_DeInit+0x1e4>)
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	43db      	mvns	r3, r3
 800266c:	4940      	ldr	r1, [pc, #256]	; (8002770 <HAL_GPIO_DeInit+0x1e4>)
 800266e:	4013      	ands	r3, r2
 8002670:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f003 0303 	and.w	r3, r3, #3
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	220f      	movs	r2, #15
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002682:	4a34      	ldr	r2, [pc, #208]	; (8002754 <HAL_GPIO_DeInit+0x1c8>)
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	089b      	lsrs	r3, r3, #2
 8002688:	3302      	adds	r3, #2
 800268a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	43da      	mvns	r2, r3
 8002692:	4830      	ldr	r0, [pc, #192]	; (8002754 <HAL_GPIO_DeInit+0x1c8>)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	089b      	lsrs	r3, r3, #2
 8002698:	400a      	ands	r2, r1
 800269a:	3302      	adds	r3, #2
 800269c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	2103      	movs	r1, #3
 80026aa:	fa01 f303 	lsl.w	r3, r1, r3
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	08da      	lsrs	r2, r3, #3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3208      	adds	r2, #8
 80026bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	220f      	movs	r2, #15
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	08d2      	lsrs	r2, r2, #3
 80026d4:	4019      	ands	r1, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3208      	adds	r2, #8
 80026da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	2103      	movs	r1, #3
 80026e8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	401a      	ands	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	2101      	movs	r1, #1
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	401a      	ands	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	2103      	movs	r1, #3
 8002712:	fa01 f303 	lsl.w	r3, r1, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	401a      	ands	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002722:	2101      	movs	r1, #1
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	fa01 f303 	lsl.w	r3, r1, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	401a      	ands	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	3301      	adds	r3, #1
 8002736:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	fa22 f303 	lsr.w	r3, r2, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	f47f af2b 	bne.w	800259c <HAL_GPIO_DeInit+0x10>
  }
}
 8002746:	bf00      	nop
 8002748:	371c      	adds	r7, #28
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40010000 	.word	0x40010000
 8002758:	48000400 	.word	0x48000400
 800275c:	48000800 	.word	0x48000800
 8002760:	48000c00 	.word	0x48000c00
 8002764:	48001000 	.word	0x48001000
 8002768:	48001400 	.word	0x48001400
 800276c:	48001800 	.word	0x48001800
 8002770:	40010400 	.word	0x40010400

08002774 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	887b      	ldrh	r3, [r7, #2]
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d002      	beq.n	8002792 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800278c:	2301      	movs	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
 8002790:	e001      	b.n	8002796 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002792:	2300      	movs	r3, #0
 8002794:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002796:	7bfb      	ldrb	r3, [r7, #15]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	460b      	mov	r3, r1
 80027ae:	807b      	strh	r3, [r7, #2]
 80027b0:	4613      	mov	r3, r2
 80027b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027b4:	787b      	ldrb	r3, [r7, #1]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027ba:	887a      	ldrh	r2, [r7, #2]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027c0:	e002      	b.n	80027c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027c2:	887a      	ldrh	r2, [r7, #2]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027e6:	887a      	ldrh	r2, [r7, #2]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4013      	ands	r3, r2
 80027ec:	041a      	lsls	r2, r3, #16
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	43d9      	mvns	r1, r3
 80027f2:	887b      	ldrh	r3, [r7, #2]
 80027f4:	400b      	ands	r3, r1
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	619a      	str	r2, [r3, #24]
}
 80027fc:	bf00      	nop
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800280c:	4b04      	ldr	r3, [pc, #16]	; (8002820 <HAL_PWREx_GetVoltageRange+0x18>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002814:	4618      	mov	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40007000 	.word	0x40007000

08002824 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002832:	d130      	bne.n	8002896 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002834:	4b23      	ldr	r3, [pc, #140]	; (80028c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800283c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002840:	d038      	beq.n	80028b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002842:	4b20      	ldr	r3, [pc, #128]	; (80028c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800284a:	4a1e      	ldr	r2, [pc, #120]	; (80028c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800284c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002850:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002852:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2232      	movs	r2, #50	; 0x32
 8002858:	fb02 f303 	mul.w	r3, r2, r3
 800285c:	4a1b      	ldr	r2, [pc, #108]	; (80028cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	0c9b      	lsrs	r3, r3, #18
 8002864:	3301      	adds	r3, #1
 8002866:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002868:	e002      	b.n	8002870 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	3b01      	subs	r3, #1
 800286e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002870:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800287c:	d102      	bne.n	8002884 <HAL_PWREx_ControlVoltageScaling+0x60>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1f2      	bne.n	800286a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002884:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800288c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002890:	d110      	bne.n	80028b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e00f      	b.n	80028b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002896:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800289e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a2:	d007      	beq.n	80028b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028a4:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028ac:	4a05      	ldr	r2, [pc, #20]	; (80028c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40007000 	.word	0x40007000
 80028c8:	20000004 	.word	0x20000004
 80028cc:	431bde83 	.word	0x431bde83

080028d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e3d4      	b.n	800308c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028e2:	4ba1      	ldr	r3, [pc, #644]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 030c 	and.w	r3, r3, #12
 80028ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028ec:	4b9e      	ldr	r3, [pc, #632]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 80e4 	beq.w	8002acc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d007      	beq.n	800291a <HAL_RCC_OscConfig+0x4a>
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	2b0c      	cmp	r3, #12
 800290e:	f040 808b 	bne.w	8002a28 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2b01      	cmp	r3, #1
 8002916:	f040 8087 	bne.w	8002a28 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800291a:	4b93      	ldr	r3, [pc, #588]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d005      	beq.n	8002932 <HAL_RCC_OscConfig+0x62>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e3ac      	b.n	800308c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a1a      	ldr	r2, [r3, #32]
 8002936:	4b8c      	ldr	r3, [pc, #560]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d004      	beq.n	800294c <HAL_RCC_OscConfig+0x7c>
 8002942:	4b89      	ldr	r3, [pc, #548]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800294a:	e005      	b.n	8002958 <HAL_RCC_OscConfig+0x88>
 800294c:	4b86      	ldr	r3, [pc, #536]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 800294e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002952:	091b      	lsrs	r3, r3, #4
 8002954:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002958:	4293      	cmp	r3, r2
 800295a:	d223      	bcs.n	80029a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	4618      	mov	r0, r3
 8002962:	f000 fd3f 	bl	80033e4 <RCC_SetFlashLatencyFromMSIRange>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e38d      	b.n	800308c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002970:	4b7d      	ldr	r3, [pc, #500]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a7c      	ldr	r2, [pc, #496]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 8002976:	f043 0308 	orr.w	r3, r3, #8
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	4b7a      	ldr	r3, [pc, #488]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	4977      	ldr	r1, [pc, #476]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 800298a:	4313      	orrs	r3, r2
 800298c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800298e:	4b76      	ldr	r3, [pc, #472]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	021b      	lsls	r3, r3, #8
 800299c:	4972      	ldr	r1, [pc, #456]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	604b      	str	r3, [r1, #4]
 80029a2:	e025      	b.n	80029f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029a4:	4b70      	ldr	r3, [pc, #448]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a6f      	ldr	r2, [pc, #444]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 80029aa:	f043 0308 	orr.w	r3, r3, #8
 80029ae:	6013      	str	r3, [r2, #0]
 80029b0:	4b6d      	ldr	r3, [pc, #436]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	496a      	ldr	r1, [pc, #424]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029c2:	4b69      	ldr	r3, [pc, #420]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	021b      	lsls	r3, r3, #8
 80029d0:	4965      	ldr	r1, [pc, #404]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d109      	bne.n	80029f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f000 fcff 	bl	80033e4 <RCC_SetFlashLatencyFromMSIRange>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e34d      	b.n	800308c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029f0:	f000 fc36 	bl	8003260 <HAL_RCC_GetSysClockFreq>
 80029f4:	4601      	mov	r1, r0
 80029f6:	4b5c      	ldr	r3, [pc, #368]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	091b      	lsrs	r3, r3, #4
 80029fc:	f003 030f 	and.w	r3, r3, #15
 8002a00:	4a5a      	ldr	r2, [pc, #360]	; (8002b6c <HAL_RCC_OscConfig+0x29c>)
 8002a02:	5cd3      	ldrb	r3, [r2, r3]
 8002a04:	f003 031f 	and.w	r3, r3, #31
 8002a08:	fa21 f303 	lsr.w	r3, r1, r3
 8002a0c:	4a58      	ldr	r2, [pc, #352]	; (8002b70 <HAL_RCC_OscConfig+0x2a0>)
 8002a0e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a10:	4b58      	ldr	r3, [pc, #352]	; (8002b74 <HAL_RCC_OscConfig+0x2a4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff fa23 	bl	8001e60 <HAL_InitTick>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d052      	beq.n	8002aca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
 8002a26:	e331      	b.n	800308c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d032      	beq.n	8002a96 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a30:	4b4d      	ldr	r3, [pc, #308]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a4c      	ldr	r2, [pc, #304]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 8002a36:	f043 0301 	orr.w	r3, r3, #1
 8002a3a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a3c:	f7ff fa60 	bl	8001f00 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a44:	f7ff fa5c 	bl	8001f00 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e31a      	b.n	800308c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a56:	4b44      	ldr	r3, [pc, #272]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a62:	4b41      	ldr	r3, [pc, #260]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a40      	ldr	r2, [pc, #256]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 8002a68:	f043 0308 	orr.w	r3, r3, #8
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	4b3e      	ldr	r3, [pc, #248]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	493b      	ldr	r1, [pc, #236]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a80:	4b39      	ldr	r3, [pc, #228]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	021b      	lsls	r3, r3, #8
 8002a8e:	4936      	ldr	r1, [pc, #216]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	604b      	str	r3, [r1, #4]
 8002a94:	e01a      	b.n	8002acc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a96:	4b34      	ldr	r3, [pc, #208]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a33      	ldr	r2, [pc, #204]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 8002a9c:	f023 0301 	bic.w	r3, r3, #1
 8002aa0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002aa2:	f7ff fa2d 	bl	8001f00 <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002aaa:	f7ff fa29 	bl	8001f00 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e2e7      	b.n	800308c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002abc:	4b2a      	ldr	r3, [pc, #168]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1f0      	bne.n	8002aaa <HAL_RCC_OscConfig+0x1da>
 8002ac8:	e000      	b.n	8002acc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002aca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d074      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	2b08      	cmp	r3, #8
 8002adc:	d005      	beq.n	8002aea <HAL_RCC_OscConfig+0x21a>
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	2b0c      	cmp	r3, #12
 8002ae2:	d10e      	bne.n	8002b02 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d10b      	bne.n	8002b02 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aea:	4b1f      	ldr	r3, [pc, #124]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d064      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x2f0>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d160      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e2c4      	b.n	800308c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b0a:	d106      	bne.n	8002b1a <HAL_RCC_OscConfig+0x24a>
 8002b0c:	4b16      	ldr	r3, [pc, #88]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a15      	ldr	r2, [pc, #84]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 8002b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b16:	6013      	str	r3, [r2, #0]
 8002b18:	e01d      	b.n	8002b56 <HAL_RCC_OscConfig+0x286>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b22:	d10c      	bne.n	8002b3e <HAL_RCC_OscConfig+0x26e>
 8002b24:	4b10      	ldr	r3, [pc, #64]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a0f      	ldr	r2, [pc, #60]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 8002b2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	4b0d      	ldr	r3, [pc, #52]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a0c      	ldr	r2, [pc, #48]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 8002b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3a:	6013      	str	r3, [r2, #0]
 8002b3c:	e00b      	b.n	8002b56 <HAL_RCC_OscConfig+0x286>
 8002b3e:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a09      	ldr	r2, [pc, #36]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 8002b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	4b07      	ldr	r3, [pc, #28]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a06      	ldr	r2, [pc, #24]	; (8002b68 <HAL_RCC_OscConfig+0x298>)
 8002b50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b54:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d01c      	beq.n	8002b98 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5e:	f7ff f9cf 	bl	8001f00 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b64:	e011      	b.n	8002b8a <HAL_RCC_OscConfig+0x2ba>
 8002b66:	bf00      	nop
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	08007900 	.word	0x08007900
 8002b70:	20000004 	.word	0x20000004
 8002b74:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b78:	f7ff f9c2 	bl	8001f00 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b64      	cmp	r3, #100	; 0x64
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e280      	b.n	800308c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b8a:	4baf      	ldr	r3, [pc, #700]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0x2a8>
 8002b96:	e014      	b.n	8002bc2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b98:	f7ff f9b2 	bl	8001f00 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba0:	f7ff f9ae 	bl	8001f00 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b64      	cmp	r3, #100	; 0x64
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e26c      	b.n	800308c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bb2:	4ba5      	ldr	r3, [pc, #660]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x2d0>
 8002bbe:	e000      	b.n	8002bc2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d060      	beq.n	8002c90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	2b04      	cmp	r3, #4
 8002bd2:	d005      	beq.n	8002be0 <HAL_RCC_OscConfig+0x310>
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	2b0c      	cmp	r3, #12
 8002bd8:	d119      	bne.n	8002c0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d116      	bne.n	8002c0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002be0:	4b99      	ldr	r3, [pc, #612]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x328>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e249      	b.n	800308c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf8:	4b93      	ldr	r3, [pc, #588]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	061b      	lsls	r3, r3, #24
 8002c06:	4990      	ldr	r1, [pc, #576]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c0c:	e040      	b.n	8002c90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d023      	beq.n	8002c5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c16:	4b8c      	ldr	r3, [pc, #560]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a8b      	ldr	r2, [pc, #556]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c22:	f7ff f96d 	bl	8001f00 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c2a:	f7ff f969 	bl	8001f00 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e227      	b.n	800308c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c3c:	4b82      	ldr	r3, [pc, #520]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f0      	beq.n	8002c2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c48:	4b7f      	ldr	r3, [pc, #508]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	061b      	lsls	r3, r3, #24
 8002c56:	497c      	ldr	r1, [pc, #496]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]
 8002c5c:	e018      	b.n	8002c90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c5e:	4b7a      	ldr	r3, [pc, #488]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a79      	ldr	r2, [pc, #484]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002c64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6a:	f7ff f949 	bl	8001f00 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c72:	f7ff f945 	bl	8001f00 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e203      	b.n	800308c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c84:	4b70      	ldr	r3, [pc, #448]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1f0      	bne.n	8002c72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d03c      	beq.n	8002d16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d01c      	beq.n	8002cde <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ca4:	4b68      	ldr	r3, [pc, #416]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002caa:	4a67      	ldr	r2, [pc, #412]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb4:	f7ff f924 	bl	8001f00 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cbc:	f7ff f920 	bl	8001f00 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e1de      	b.n	800308c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cce:	4b5e      	ldr	r3, [pc, #376]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0ef      	beq.n	8002cbc <HAL_RCC_OscConfig+0x3ec>
 8002cdc:	e01b      	b.n	8002d16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cde:	4b5a      	ldr	r3, [pc, #360]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ce4:	4a58      	ldr	r2, [pc, #352]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002ce6:	f023 0301 	bic.w	r3, r3, #1
 8002cea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cee:	f7ff f907 	bl	8001f00 <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf6:	f7ff f903 	bl	8001f00 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e1c1      	b.n	800308c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d08:	4b4f      	ldr	r3, [pc, #316]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1ef      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 80a6 	beq.w	8002e70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d24:	2300      	movs	r3, #0
 8002d26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d28:	4b47      	ldr	r3, [pc, #284]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10d      	bne.n	8002d50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d34:	4b44      	ldr	r3, [pc, #272]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d38:	4a43      	ldr	r2, [pc, #268]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d3e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d40:	4b41      	ldr	r3, [pc, #260]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d48:	60bb      	str	r3, [r7, #8]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d50:	4b3e      	ldr	r3, [pc, #248]	; (8002e4c <HAL_RCC_OscConfig+0x57c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d118      	bne.n	8002d8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d5c:	4b3b      	ldr	r3, [pc, #236]	; (8002e4c <HAL_RCC_OscConfig+0x57c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a3a      	ldr	r2, [pc, #232]	; (8002e4c <HAL_RCC_OscConfig+0x57c>)
 8002d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d68:	f7ff f8ca 	bl	8001f00 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d70:	f7ff f8c6 	bl	8001f00 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e184      	b.n	800308c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d82:	4b32      	ldr	r3, [pc, #200]	; (8002e4c <HAL_RCC_OscConfig+0x57c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d108      	bne.n	8002da8 <HAL_RCC_OscConfig+0x4d8>
 8002d96:	4b2c      	ldr	r3, [pc, #176]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9c:	4a2a      	ldr	r2, [pc, #168]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002d9e:	f043 0301 	orr.w	r3, r3, #1
 8002da2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002da6:	e024      	b.n	8002df2 <HAL_RCC_OscConfig+0x522>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	2b05      	cmp	r3, #5
 8002dae:	d110      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x502>
 8002db0:	4b25      	ldr	r3, [pc, #148]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db6:	4a24      	ldr	r2, [pc, #144]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002db8:	f043 0304 	orr.w	r3, r3, #4
 8002dbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dc0:	4b21      	ldr	r3, [pc, #132]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc6:	4a20      	ldr	r2, [pc, #128]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dd0:	e00f      	b.n	8002df2 <HAL_RCC_OscConfig+0x522>
 8002dd2:	4b1d      	ldr	r3, [pc, #116]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd8:	4a1b      	ldr	r2, [pc, #108]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002dda:	f023 0301 	bic.w	r3, r3, #1
 8002dde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002de2:	4b19      	ldr	r3, [pc, #100]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de8:	4a17      	ldr	r2, [pc, #92]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002dea:	f023 0304 	bic.w	r3, r3, #4
 8002dee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d016      	beq.n	8002e28 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfa:	f7ff f881 	bl	8001f00 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e00:	e00a      	b.n	8002e18 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e02:	f7ff f87d 	bl	8001f00 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e139      	b.n	800308c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e18:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <HAL_RCC_OscConfig+0x578>)
 8002e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0ed      	beq.n	8002e02 <HAL_RCC_OscConfig+0x532>
 8002e26:	e01a      	b.n	8002e5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e28:	f7ff f86a 	bl	8001f00 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e2e:	e00f      	b.n	8002e50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e30:	f7ff f866 	bl	8001f00 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d906      	bls.n	8002e50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e122      	b.n	800308c <HAL_RCC_OscConfig+0x7bc>
 8002e46:	bf00      	nop
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e50:	4b90      	ldr	r3, [pc, #576]	; (8003094 <HAL_RCC_OscConfig+0x7c4>)
 8002e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1e8      	bne.n	8002e30 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e5e:	7ffb      	ldrb	r3, [r7, #31]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d105      	bne.n	8002e70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e64:	4b8b      	ldr	r3, [pc, #556]	; (8003094 <HAL_RCC_OscConfig+0x7c4>)
 8002e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e68:	4a8a      	ldr	r2, [pc, #552]	; (8003094 <HAL_RCC_OscConfig+0x7c4>)
 8002e6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 8108 	beq.w	800308a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	f040 80d0 	bne.w	8003024 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e84:	4b83      	ldr	r3, [pc, #524]	; (8003094 <HAL_RCC_OscConfig+0x7c4>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f003 0203 	and.w	r2, r3, #3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d130      	bne.n	8002efa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d127      	bne.n	8002efa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d11f      	bne.n	8002efa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ec4:	2a07      	cmp	r2, #7
 8002ec6:	bf14      	ite	ne
 8002ec8:	2201      	movne	r2, #1
 8002eca:	2200      	moveq	r2, #0
 8002ecc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d113      	bne.n	8002efa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002edc:	085b      	lsrs	r3, r3, #1
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d109      	bne.n	8002efa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	085b      	lsrs	r3, r3, #1
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d06e      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	2b0c      	cmp	r3, #12
 8002efe:	d069      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f00:	4b64      	ldr	r3, [pc, #400]	; (8003094 <HAL_RCC_OscConfig+0x7c4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d105      	bne.n	8002f18 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f0c:	4b61      	ldr	r3, [pc, #388]	; (8003094 <HAL_RCC_OscConfig+0x7c4>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0b7      	b.n	800308c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f1c:	4b5d      	ldr	r3, [pc, #372]	; (8003094 <HAL_RCC_OscConfig+0x7c4>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a5c      	ldr	r2, [pc, #368]	; (8003094 <HAL_RCC_OscConfig+0x7c4>)
 8002f22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f26:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f28:	f7fe ffea 	bl	8001f00 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f30:	f7fe ffe6 	bl	8001f00 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e0a4      	b.n	800308c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f42:	4b54      	ldr	r3, [pc, #336]	; (8003094 <HAL_RCC_OscConfig+0x7c4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f4e:	4b51      	ldr	r3, [pc, #324]	; (8003094 <HAL_RCC_OscConfig+0x7c4>)
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	4b51      	ldr	r3, [pc, #324]	; (8003098 <HAL_RCC_OscConfig+0x7c8>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f5e:	3a01      	subs	r2, #1
 8002f60:	0112      	lsls	r2, r2, #4
 8002f62:	4311      	orrs	r1, r2
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f68:	0212      	lsls	r2, r2, #8
 8002f6a:	4311      	orrs	r1, r2
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f70:	0852      	lsrs	r2, r2, #1
 8002f72:	3a01      	subs	r2, #1
 8002f74:	0552      	lsls	r2, r2, #21
 8002f76:	4311      	orrs	r1, r2
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f7c:	0852      	lsrs	r2, r2, #1
 8002f7e:	3a01      	subs	r2, #1
 8002f80:	0652      	lsls	r2, r2, #25
 8002f82:	4311      	orrs	r1, r2
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f88:	0912      	lsrs	r2, r2, #4
 8002f8a:	0452      	lsls	r2, r2, #17
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	4941      	ldr	r1, [pc, #260]	; (8003094 <HAL_RCC_OscConfig+0x7c4>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f94:	4b3f      	ldr	r3, [pc, #252]	; (8003094 <HAL_RCC_OscConfig+0x7c4>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a3e      	ldr	r2, [pc, #248]	; (8003094 <HAL_RCC_OscConfig+0x7c4>)
 8002f9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fa0:	4b3c      	ldr	r3, [pc, #240]	; (8003094 <HAL_RCC_OscConfig+0x7c4>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	4a3b      	ldr	r2, [pc, #236]	; (8003094 <HAL_RCC_OscConfig+0x7c4>)
 8002fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002faa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fac:	f7fe ffa8 	bl	8001f00 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb4:	f7fe ffa4 	bl	8001f00 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e062      	b.n	800308c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fc6:	4b33      	ldr	r3, [pc, #204]	; (8003094 <HAL_RCC_OscConfig+0x7c4>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0f0      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fd2:	e05a      	b.n	800308a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e059      	b.n	800308c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fd8:	4b2e      	ldr	r3, [pc, #184]	; (8003094 <HAL_RCC_OscConfig+0x7c4>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d152      	bne.n	800308a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002fe4:	4b2b      	ldr	r3, [pc, #172]	; (8003094 <HAL_RCC_OscConfig+0x7c4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a2a      	ldr	r2, [pc, #168]	; (8003094 <HAL_RCC_OscConfig+0x7c4>)
 8002fea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ff0:	4b28      	ldr	r3, [pc, #160]	; (8003094 <HAL_RCC_OscConfig+0x7c4>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	4a27      	ldr	r2, [pc, #156]	; (8003094 <HAL_RCC_OscConfig+0x7c4>)
 8002ff6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ffa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ffc:	f7fe ff80 	bl	8001f00 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003004:	f7fe ff7c 	bl	8001f00 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e03a      	b.n	800308c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003016:	4b1f      	ldr	r3, [pc, #124]	; (8003094 <HAL_RCC_OscConfig+0x7c4>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0f0      	beq.n	8003004 <HAL_RCC_OscConfig+0x734>
 8003022:	e032      	b.n	800308a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	2b0c      	cmp	r3, #12
 8003028:	d02d      	beq.n	8003086 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800302a:	4b1a      	ldr	r3, [pc, #104]	; (8003094 <HAL_RCC_OscConfig+0x7c4>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a19      	ldr	r2, [pc, #100]	; (8003094 <HAL_RCC_OscConfig+0x7c4>)
 8003030:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003034:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003036:	4b17      	ldr	r3, [pc, #92]	; (8003094 <HAL_RCC_OscConfig+0x7c4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d105      	bne.n	800304e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003042:	4b14      	ldr	r3, [pc, #80]	; (8003094 <HAL_RCC_OscConfig+0x7c4>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	4a13      	ldr	r2, [pc, #76]	; (8003094 <HAL_RCC_OscConfig+0x7c4>)
 8003048:	f023 0303 	bic.w	r3, r3, #3
 800304c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800304e:	4b11      	ldr	r3, [pc, #68]	; (8003094 <HAL_RCC_OscConfig+0x7c4>)
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	4a10      	ldr	r2, [pc, #64]	; (8003094 <HAL_RCC_OscConfig+0x7c4>)
 8003054:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800305c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305e:	f7fe ff4f 	bl	8001f00 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003066:	f7fe ff4b 	bl	8001f00 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e009      	b.n	800308c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003078:	4b06      	ldr	r3, [pc, #24]	; (8003094 <HAL_RCC_OscConfig+0x7c4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1f0      	bne.n	8003066 <HAL_RCC_OscConfig+0x796>
 8003084:	e001      	b.n	800308a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3720      	adds	r7, #32
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40021000 	.word	0x40021000
 8003098:	f99d808c 	.word	0xf99d808c

0800309c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0c8      	b.n	8003242 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030b0:	4b66      	ldr	r3, [pc, #408]	; (800324c <HAL_RCC_ClockConfig+0x1b0>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d910      	bls.n	80030e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030be:	4b63      	ldr	r3, [pc, #396]	; (800324c <HAL_RCC_ClockConfig+0x1b0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 0207 	bic.w	r2, r3, #7
 80030c6:	4961      	ldr	r1, [pc, #388]	; (800324c <HAL_RCC_ClockConfig+0x1b0>)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ce:	4b5f      	ldr	r3, [pc, #380]	; (800324c <HAL_RCC_ClockConfig+0x1b0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0b0      	b.n	8003242 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d04c      	beq.n	8003186 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d107      	bne.n	8003104 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030f4:	4b56      	ldr	r3, [pc, #344]	; (8003250 <HAL_RCC_ClockConfig+0x1b4>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d121      	bne.n	8003144 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e09e      	b.n	8003242 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d107      	bne.n	800311c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800310c:	4b50      	ldr	r3, [pc, #320]	; (8003250 <HAL_RCC_ClockConfig+0x1b4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d115      	bne.n	8003144 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e092      	b.n	8003242 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d107      	bne.n	8003134 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003124:	4b4a      	ldr	r3, [pc, #296]	; (8003250 <HAL_RCC_ClockConfig+0x1b4>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d109      	bne.n	8003144 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e086      	b.n	8003242 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003134:	4b46      	ldr	r3, [pc, #280]	; (8003250 <HAL_RCC_ClockConfig+0x1b4>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e07e      	b.n	8003242 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003144:	4b42      	ldr	r3, [pc, #264]	; (8003250 <HAL_RCC_ClockConfig+0x1b4>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f023 0203 	bic.w	r2, r3, #3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	493f      	ldr	r1, [pc, #252]	; (8003250 <HAL_RCC_ClockConfig+0x1b4>)
 8003152:	4313      	orrs	r3, r2
 8003154:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003156:	f7fe fed3 	bl	8001f00 <HAL_GetTick>
 800315a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800315c:	e00a      	b.n	8003174 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800315e:	f7fe fecf 	bl	8001f00 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	f241 3288 	movw	r2, #5000	; 0x1388
 800316c:	4293      	cmp	r3, r2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e066      	b.n	8003242 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003174:	4b36      	ldr	r3, [pc, #216]	; (8003250 <HAL_RCC_ClockConfig+0x1b4>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 020c 	and.w	r2, r3, #12
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	429a      	cmp	r2, r3
 8003184:	d1eb      	bne.n	800315e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d008      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003192:	4b2f      	ldr	r3, [pc, #188]	; (8003250 <HAL_RCC_ClockConfig+0x1b4>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	492c      	ldr	r1, [pc, #176]	; (8003250 <HAL_RCC_ClockConfig+0x1b4>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031a4:	4b29      	ldr	r3, [pc, #164]	; (800324c <HAL_RCC_ClockConfig+0x1b0>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d210      	bcs.n	80031d4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b2:	4b26      	ldr	r3, [pc, #152]	; (800324c <HAL_RCC_ClockConfig+0x1b0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 0207 	bic.w	r2, r3, #7
 80031ba:	4924      	ldr	r1, [pc, #144]	; (800324c <HAL_RCC_ClockConfig+0x1b0>)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	4313      	orrs	r3, r2
 80031c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c2:	4b22      	ldr	r3, [pc, #136]	; (800324c <HAL_RCC_ClockConfig+0x1b0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d001      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e036      	b.n	8003242 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d008      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e0:	4b1b      	ldr	r3, [pc, #108]	; (8003250 <HAL_RCC_ClockConfig+0x1b4>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	4918      	ldr	r1, [pc, #96]	; (8003250 <HAL_RCC_ClockConfig+0x1b4>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d009      	beq.n	8003212 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031fe:	4b14      	ldr	r3, [pc, #80]	; (8003250 <HAL_RCC_ClockConfig+0x1b4>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	4910      	ldr	r1, [pc, #64]	; (8003250 <HAL_RCC_ClockConfig+0x1b4>)
 800320e:	4313      	orrs	r3, r2
 8003210:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003212:	f000 f825 	bl	8003260 <HAL_RCC_GetSysClockFreq>
 8003216:	4601      	mov	r1, r0
 8003218:	4b0d      	ldr	r3, [pc, #52]	; (8003250 <HAL_RCC_ClockConfig+0x1b4>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	091b      	lsrs	r3, r3, #4
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	4a0c      	ldr	r2, [pc, #48]	; (8003254 <HAL_RCC_ClockConfig+0x1b8>)
 8003224:	5cd3      	ldrb	r3, [r2, r3]
 8003226:	f003 031f 	and.w	r3, r3, #31
 800322a:	fa21 f303 	lsr.w	r3, r1, r3
 800322e:	4a0a      	ldr	r2, [pc, #40]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 8003230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003232:	4b0a      	ldr	r3, [pc, #40]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7fe fe12 	bl	8001e60 <HAL_InitTick>
 800323c:	4603      	mov	r3, r0
 800323e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003240:	7afb      	ldrb	r3, [r7, #11]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40022000 	.word	0x40022000
 8003250:	40021000 	.word	0x40021000
 8003254:	08007900 	.word	0x08007900
 8003258:	20000004 	.word	0x20000004
 800325c:	2000001c 	.word	0x2000001c

08003260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003260:	b480      	push	{r7}
 8003262:	b089      	sub	sp, #36	; 0x24
 8003264:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
 800326a:	2300      	movs	r3, #0
 800326c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800326e:	4b3d      	ldr	r3, [pc, #244]	; (8003364 <HAL_RCC_GetSysClockFreq+0x104>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 030c 	and.w	r3, r3, #12
 8003276:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003278:	4b3a      	ldr	r3, [pc, #232]	; (8003364 <HAL_RCC_GetSysClockFreq+0x104>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f003 0303 	and.w	r3, r3, #3
 8003280:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d005      	beq.n	8003294 <HAL_RCC_GetSysClockFreq+0x34>
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	2b0c      	cmp	r3, #12
 800328c:	d121      	bne.n	80032d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d11e      	bne.n	80032d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003294:	4b33      	ldr	r3, [pc, #204]	; (8003364 <HAL_RCC_GetSysClockFreq+0x104>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0308 	and.w	r3, r3, #8
 800329c:	2b00      	cmp	r3, #0
 800329e:	d107      	bne.n	80032b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032a0:	4b30      	ldr	r3, [pc, #192]	; (8003364 <HAL_RCC_GetSysClockFreq+0x104>)
 80032a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032a6:	0a1b      	lsrs	r3, r3, #8
 80032a8:	f003 030f 	and.w	r3, r3, #15
 80032ac:	61fb      	str	r3, [r7, #28]
 80032ae:	e005      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032b0:	4b2c      	ldr	r3, [pc, #176]	; (8003364 <HAL_RCC_GetSysClockFreq+0x104>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	091b      	lsrs	r3, r3, #4
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032bc:	4a2a      	ldr	r2, [pc, #168]	; (8003368 <HAL_RCC_GetSysClockFreq+0x108>)
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10d      	bne.n	80032e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032d0:	e00a      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d102      	bne.n	80032de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032d8:	4b24      	ldr	r3, [pc, #144]	; (800336c <HAL_RCC_GetSysClockFreq+0x10c>)
 80032da:	61bb      	str	r3, [r7, #24]
 80032dc:	e004      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d101      	bne.n	80032e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032e4:	4b22      	ldr	r3, [pc, #136]	; (8003370 <HAL_RCC_GetSysClockFreq+0x110>)
 80032e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	2b0c      	cmp	r3, #12
 80032ec:	d133      	bne.n	8003356 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032ee:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <HAL_RCC_GetSysClockFreq+0x104>)
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f003 0303 	and.w	r3, r3, #3
 80032f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d002      	beq.n	8003304 <HAL_RCC_GetSysClockFreq+0xa4>
 80032fe:	2b03      	cmp	r3, #3
 8003300:	d003      	beq.n	800330a <HAL_RCC_GetSysClockFreq+0xaa>
 8003302:	e005      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003304:	4b19      	ldr	r3, [pc, #100]	; (800336c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003306:	617b      	str	r3, [r7, #20]
      break;
 8003308:	e005      	b.n	8003316 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800330a:	4b19      	ldr	r3, [pc, #100]	; (8003370 <HAL_RCC_GetSysClockFreq+0x110>)
 800330c:	617b      	str	r3, [r7, #20]
      break;
 800330e:	e002      	b.n	8003316 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	617b      	str	r3, [r7, #20]
      break;
 8003314:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003316:	4b13      	ldr	r3, [pc, #76]	; (8003364 <HAL_RCC_GetSysClockFreq+0x104>)
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	091b      	lsrs	r3, r3, #4
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	3301      	adds	r3, #1
 8003322:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003324:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <HAL_RCC_GetSysClockFreq+0x104>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	0a1b      	lsrs	r3, r3, #8
 800332a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	fb02 f203 	mul.w	r2, r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	fbb2 f3f3 	udiv	r3, r2, r3
 800333a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800333c:	4b09      	ldr	r3, [pc, #36]	; (8003364 <HAL_RCC_GetSysClockFreq+0x104>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	0e5b      	lsrs	r3, r3, #25
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	3301      	adds	r3, #1
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	fbb2 f3f3 	udiv	r3, r2, r3
 8003354:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003356:	69bb      	ldr	r3, [r7, #24]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3724      	adds	r7, #36	; 0x24
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	40021000 	.word	0x40021000
 8003368:	08007918 	.word	0x08007918
 800336c:	00f42400 	.word	0x00f42400
 8003370:	007a1200 	.word	0x007a1200

08003374 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003378:	4b03      	ldr	r3, [pc, #12]	; (8003388 <HAL_RCC_GetHCLKFreq+0x14>)
 800337a:	681b      	ldr	r3, [r3, #0]
}
 800337c:	4618      	mov	r0, r3
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	20000004 	.word	0x20000004

0800338c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003390:	f7ff fff0 	bl	8003374 <HAL_RCC_GetHCLKFreq>
 8003394:	4601      	mov	r1, r0
 8003396:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	0a1b      	lsrs	r3, r3, #8
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	4a04      	ldr	r2, [pc, #16]	; (80033b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033a2:	5cd3      	ldrb	r3, [r2, r3]
 80033a4:	f003 031f 	and.w	r3, r3, #31
 80033a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40021000 	.word	0x40021000
 80033b4:	08007910 	.word	0x08007910

080033b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033bc:	f7ff ffda 	bl	8003374 <HAL_RCC_GetHCLKFreq>
 80033c0:	4601      	mov	r1, r0
 80033c2:	4b06      	ldr	r3, [pc, #24]	; (80033dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	0adb      	lsrs	r3, r3, #11
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	4a04      	ldr	r2, [pc, #16]	; (80033e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033ce:	5cd3      	ldrb	r3, [r2, r3]
 80033d0:	f003 031f 	and.w	r3, r3, #31
 80033d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033d8:	4618      	mov	r0, r3
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40021000 	.word	0x40021000
 80033e0:	08007910 	.word	0x08007910

080033e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033ec:	2300      	movs	r3, #0
 80033ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033f0:	4b2a      	ldr	r3, [pc, #168]	; (800349c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80033fc:	f7ff fa04 	bl	8002808 <HAL_PWREx_GetVoltageRange>
 8003400:	6178      	str	r0, [r7, #20]
 8003402:	e014      	b.n	800342e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003404:	4b25      	ldr	r3, [pc, #148]	; (800349c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003408:	4a24      	ldr	r2, [pc, #144]	; (800349c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800340a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340e:	6593      	str	r3, [r2, #88]	; 0x58
 8003410:	4b22      	ldr	r3, [pc, #136]	; (800349c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003418:	60fb      	str	r3, [r7, #12]
 800341a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800341c:	f7ff f9f4 	bl	8002808 <HAL_PWREx_GetVoltageRange>
 8003420:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003422:	4b1e      	ldr	r3, [pc, #120]	; (800349c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003426:	4a1d      	ldr	r2, [pc, #116]	; (800349c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800342c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003434:	d10b      	bne.n	800344e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b80      	cmp	r3, #128	; 0x80
 800343a:	d919      	bls.n	8003470 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2ba0      	cmp	r3, #160	; 0xa0
 8003440:	d902      	bls.n	8003448 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003442:	2302      	movs	r3, #2
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	e013      	b.n	8003470 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003448:	2301      	movs	r3, #1
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	e010      	b.n	8003470 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b80      	cmp	r3, #128	; 0x80
 8003452:	d902      	bls.n	800345a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003454:	2303      	movs	r3, #3
 8003456:	613b      	str	r3, [r7, #16]
 8003458:	e00a      	b.n	8003470 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b80      	cmp	r3, #128	; 0x80
 800345e:	d102      	bne.n	8003466 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003460:	2302      	movs	r3, #2
 8003462:	613b      	str	r3, [r7, #16]
 8003464:	e004      	b.n	8003470 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b70      	cmp	r3, #112	; 0x70
 800346a:	d101      	bne.n	8003470 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800346c:	2301      	movs	r3, #1
 800346e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003470:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f023 0207 	bic.w	r2, r3, #7
 8003478:	4909      	ldr	r1, [pc, #36]	; (80034a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4313      	orrs	r3, r2
 800347e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003480:	4b07      	ldr	r3, [pc, #28]	; (80034a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	429a      	cmp	r2, r3
 800348c:	d001      	beq.n	8003492 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e000      	b.n	8003494 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40021000 	.word	0x40021000
 80034a0:	40022000 	.word	0x40022000

080034a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034ac:	2300      	movs	r3, #0
 80034ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034b0:	2300      	movs	r3, #0
 80034b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d03f      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034c8:	d01c      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80034ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034ce:	d802      	bhi.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00e      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80034d4:	e01f      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80034d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034da:	d003      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80034dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034e0:	d01c      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x78>
 80034e2:	e018      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034e4:	4b85      	ldr	r3, [pc, #532]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	4a84      	ldr	r2, [pc, #528]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034f0:	e015      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3304      	adds	r3, #4
 80034f6:	2100      	movs	r1, #0
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 fab9 	bl	8003a70 <RCCEx_PLLSAI1_Config>
 80034fe:	4603      	mov	r3, r0
 8003500:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003502:	e00c      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3320      	adds	r3, #32
 8003508:	2100      	movs	r1, #0
 800350a:	4618      	mov	r0, r3
 800350c:	f000 fba0 	bl	8003c50 <RCCEx_PLLSAI2_Config>
 8003510:	4603      	mov	r3, r0
 8003512:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003514:	e003      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	74fb      	strb	r3, [r7, #19]
      break;
 800351a:	e000      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800351c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800351e:	7cfb      	ldrb	r3, [r7, #19]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10b      	bne.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003524:	4b75      	ldr	r3, [pc, #468]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003532:	4972      	ldr	r1, [pc, #456]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800353a:	e001      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800353c:	7cfb      	ldrb	r3, [r7, #19]
 800353e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d03f      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003554:	d01c      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003556:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800355a:	d802      	bhi.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00e      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003560:	e01f      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003562:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003566:	d003      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003568:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800356c:	d01c      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800356e:	e018      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003570:	4b62      	ldr	r3, [pc, #392]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	4a61      	ldr	r2, [pc, #388]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800357c:	e015      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	3304      	adds	r3, #4
 8003582:	2100      	movs	r1, #0
 8003584:	4618      	mov	r0, r3
 8003586:	f000 fa73 	bl	8003a70 <RCCEx_PLLSAI1_Config>
 800358a:	4603      	mov	r3, r0
 800358c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800358e:	e00c      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3320      	adds	r3, #32
 8003594:	2100      	movs	r1, #0
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fb5a 	bl	8003c50 <RCCEx_PLLSAI2_Config>
 800359c:	4603      	mov	r3, r0
 800359e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035a0:	e003      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	74fb      	strb	r3, [r7, #19]
      break;
 80035a6:	e000      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80035a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035aa:	7cfb      	ldrb	r3, [r7, #19]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10b      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035b0:	4b52      	ldr	r3, [pc, #328]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035be:	494f      	ldr	r1, [pc, #316]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035c6:	e001      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c8:	7cfb      	ldrb	r3, [r7, #19]
 80035ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 80a0 	beq.w	800371a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035da:	2300      	movs	r3, #0
 80035dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035de:	4b47      	ldr	r3, [pc, #284]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80035ea:	2301      	movs	r3, #1
 80035ec:	e000      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80035ee:	2300      	movs	r3, #0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00d      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035f4:	4b41      	ldr	r3, [pc, #260]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f8:	4a40      	ldr	r2, [pc, #256]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003600:	4b3e      	ldr	r3, [pc, #248]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800360c:	2301      	movs	r3, #1
 800360e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003610:	4b3b      	ldr	r3, [pc, #236]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a3a      	ldr	r2, [pc, #232]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800361a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800361c:	f7fe fc70 	bl	8001f00 <HAL_GetTick>
 8003620:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003622:	e009      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003624:	f7fe fc6c 	bl	8001f00 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d902      	bls.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	74fb      	strb	r3, [r7, #19]
        break;
 8003636:	e005      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003638:	4b31      	ldr	r3, [pc, #196]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0ef      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003644:	7cfb      	ldrb	r3, [r7, #19]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d15c      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800364a:	4b2c      	ldr	r3, [pc, #176]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800364c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003650:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003654:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d01f      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	429a      	cmp	r2, r3
 8003666:	d019      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003668:	4b24      	ldr	r3, [pc, #144]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800366a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003672:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003674:	4b21      	ldr	r3, [pc, #132]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367a:	4a20      	ldr	r2, [pc, #128]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800367c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003684:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368a:	4a1c      	ldr	r2, [pc, #112]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800368c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003694:	4a19      	ldr	r2, [pc, #100]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d016      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a6:	f7fe fc2b 	bl	8001f00 <HAL_GetTick>
 80036aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ac:	e00b      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ae:	f7fe fc27 	bl	8001f00 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036bc:	4293      	cmp	r3, r2
 80036be:	d902      	bls.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	74fb      	strb	r3, [r7, #19]
            break;
 80036c4:	e006      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036c6:	4b0d      	ldr	r3, [pc, #52]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0ec      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80036d4:	7cfb      	ldrb	r3, [r7, #19]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10c      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036da:	4b08      	ldr	r3, [pc, #32]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ea:	4904      	ldr	r1, [pc, #16]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80036f2:	e009      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036f4:	7cfb      	ldrb	r3, [r7, #19]
 80036f6:	74bb      	strb	r3, [r7, #18]
 80036f8:	e006      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80036fa:	bf00      	nop
 80036fc:	40021000 	.word	0x40021000
 8003700:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003704:	7cfb      	ldrb	r3, [r7, #19]
 8003706:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003708:	7c7b      	ldrb	r3, [r7, #17]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d105      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800370e:	4b9e      	ldr	r3, [pc, #632]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003712:	4a9d      	ldr	r2, [pc, #628]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003718:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00a      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003726:	4b98      	ldr	r3, [pc, #608]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372c:	f023 0203 	bic.w	r2, r3, #3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003734:	4994      	ldr	r1, [pc, #592]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003736:	4313      	orrs	r3, r2
 8003738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00a      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003748:	4b8f      	ldr	r3, [pc, #572]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800374a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374e:	f023 020c 	bic.w	r2, r3, #12
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003756:	498c      	ldr	r1, [pc, #560]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003758:	4313      	orrs	r3, r2
 800375a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00a      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800376a:	4b87      	ldr	r3, [pc, #540]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800376c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003770:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	4983      	ldr	r1, [pc, #524]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0308 	and.w	r3, r3, #8
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00a      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800378c:	4b7e      	ldr	r3, [pc, #504]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800378e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003792:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379a:	497b      	ldr	r1, [pc, #492]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0310 	and.w	r3, r3, #16
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00a      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037ae:	4b76      	ldr	r3, [pc, #472]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037bc:	4972      	ldr	r1, [pc, #456]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0320 	and.w	r3, r3, #32
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00a      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037d0:	4b6d      	ldr	r3, [pc, #436]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037de:	496a      	ldr	r1, [pc, #424]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037f2:	4b65      	ldr	r3, [pc, #404]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003800:	4961      	ldr	r1, [pc, #388]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003802:	4313      	orrs	r3, r2
 8003804:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00a      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003814:	4b5c      	ldr	r3, [pc, #368]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003822:	4959      	ldr	r1, [pc, #356]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003824:	4313      	orrs	r3, r2
 8003826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00a      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003836:	4b54      	ldr	r3, [pc, #336]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003844:	4950      	ldr	r1, [pc, #320]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003846:	4313      	orrs	r3, r2
 8003848:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00a      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003858:	4b4b      	ldr	r3, [pc, #300]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800385a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003866:	4948      	ldr	r1, [pc, #288]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003868:	4313      	orrs	r3, r2
 800386a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00a      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800387a:	4b43      	ldr	r3, [pc, #268]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800387c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003880:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003888:	493f      	ldr	r1, [pc, #252]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800388a:	4313      	orrs	r3, r2
 800388c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d028      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800389c:	4b3a      	ldr	r3, [pc, #232]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800389e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038aa:	4937      	ldr	r1, [pc, #220]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038ba:	d106      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038bc:	4b32      	ldr	r3, [pc, #200]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	4a31      	ldr	r2, [pc, #196]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038c6:	60d3      	str	r3, [r2, #12]
 80038c8:	e011      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038d2:	d10c      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3304      	adds	r3, #4
 80038d8:	2101      	movs	r1, #1
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 f8c8 	bl	8003a70 <RCCEx_PLLSAI1_Config>
 80038e0:	4603      	mov	r3, r0
 80038e2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80038e4:	7cfb      	ldrb	r3, [r7, #19]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80038ea:	7cfb      	ldrb	r3, [r7, #19]
 80038ec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d028      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038fa:	4b23      	ldr	r3, [pc, #140]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003900:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003908:	491f      	ldr	r1, [pc, #124]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800390a:	4313      	orrs	r3, r2
 800390c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003914:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003918:	d106      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800391a:	4b1b      	ldr	r3, [pc, #108]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	4a1a      	ldr	r2, [pc, #104]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003920:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003924:	60d3      	str	r3, [r2, #12]
 8003926:	e011      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003930:	d10c      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3304      	adds	r3, #4
 8003936:	2101      	movs	r1, #1
 8003938:	4618      	mov	r0, r3
 800393a:	f000 f899 	bl	8003a70 <RCCEx_PLLSAI1_Config>
 800393e:	4603      	mov	r3, r0
 8003940:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003942:	7cfb      	ldrb	r3, [r7, #19]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003948:	7cfb      	ldrb	r3, [r7, #19]
 800394a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d02b      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003958:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800395a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003966:	4908      	ldr	r1, [pc, #32]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003968:	4313      	orrs	r3, r2
 800396a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003972:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003976:	d109      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003978:	4b03      	ldr	r3, [pc, #12]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	4a02      	ldr	r2, [pc, #8]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800397e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003982:	60d3      	str	r3, [r2, #12]
 8003984:	e014      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003986:	bf00      	nop
 8003988:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003990:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003994:	d10c      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	3304      	adds	r3, #4
 800399a:	2101      	movs	r1, #1
 800399c:	4618      	mov	r0, r3
 800399e:	f000 f867 	bl	8003a70 <RCCEx_PLLSAI1_Config>
 80039a2:	4603      	mov	r3, r0
 80039a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039a6:	7cfb      	ldrb	r3, [r7, #19]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80039ac:	7cfb      	ldrb	r3, [r7, #19]
 80039ae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d02f      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039bc:	4b2b      	ldr	r3, [pc, #172]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039ca:	4928      	ldr	r1, [pc, #160]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039da:	d10d      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3304      	adds	r3, #4
 80039e0:	2102      	movs	r1, #2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 f844 	bl	8003a70 <RCCEx_PLLSAI1_Config>
 80039e8:	4603      	mov	r3, r0
 80039ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039ec:	7cfb      	ldrb	r3, [r7, #19]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d014      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80039f2:	7cfb      	ldrb	r3, [r7, #19]
 80039f4:	74bb      	strb	r3, [r7, #18]
 80039f6:	e011      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a00:	d10c      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3320      	adds	r3, #32
 8003a06:	2102      	movs	r1, #2
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 f921 	bl	8003c50 <RCCEx_PLLSAI2_Config>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a12:	7cfb      	ldrb	r3, [r7, #19]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003a18:	7cfb      	ldrb	r3, [r7, #19]
 8003a1a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00a      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a28:	4b10      	ldr	r3, [pc, #64]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a36:	490d      	ldr	r1, [pc, #52]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00b      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a4a:	4b08      	ldr	r3, [pc, #32]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a5a:	4904      	ldr	r1, [pc, #16]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a62:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40021000 	.word	0x40021000

08003a70 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a7e:	4b73      	ldr	r3, [pc, #460]	; (8003c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d018      	beq.n	8003abc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a8a:	4b70      	ldr	r3, [pc, #448]	; (8003c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f003 0203 	and.w	r2, r3, #3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d10d      	bne.n	8003ab6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
       ||
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d009      	beq.n	8003ab6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003aa2:	4b6a      	ldr	r3, [pc, #424]	; (8003c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	091b      	lsrs	r3, r3, #4
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
       ||
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d044      	beq.n	8003b40 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	73fb      	strb	r3, [r7, #15]
 8003aba:	e041      	b.n	8003b40 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d00c      	beq.n	8003ade <RCCEx_PLLSAI1_Config+0x6e>
 8003ac4:	2b03      	cmp	r3, #3
 8003ac6:	d013      	beq.n	8003af0 <RCCEx_PLLSAI1_Config+0x80>
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d120      	bne.n	8003b0e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003acc:	4b5f      	ldr	r3, [pc, #380]	; (8003c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d11d      	bne.n	8003b14 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003adc:	e01a      	b.n	8003b14 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ade:	4b5b      	ldr	r3, [pc, #364]	; (8003c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d116      	bne.n	8003b18 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aee:	e013      	b.n	8003b18 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003af0:	4b56      	ldr	r3, [pc, #344]	; (8003c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10f      	bne.n	8003b1c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003afc:	4b53      	ldr	r3, [pc, #332]	; (8003c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d109      	bne.n	8003b1c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b0c:	e006      	b.n	8003b1c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	73fb      	strb	r3, [r7, #15]
      break;
 8003b12:	e004      	b.n	8003b1e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003b14:	bf00      	nop
 8003b16:	e002      	b.n	8003b1e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003b18:	bf00      	nop
 8003b1a:	e000      	b.n	8003b1e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003b1c:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b1e:	7bfb      	ldrb	r3, [r7, #15]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10d      	bne.n	8003b40 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b24:	4b49      	ldr	r3, [pc, #292]	; (8003c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6819      	ldr	r1, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	3b01      	subs	r3, #1
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	430b      	orrs	r3, r1
 8003b3a:	4944      	ldr	r1, [pc, #272]	; (8003c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d17d      	bne.n	8003c42 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b46:	4b41      	ldr	r3, [pc, #260]	; (8003c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a40      	ldr	r2, [pc, #256]	; (8003c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b4c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b52:	f7fe f9d5 	bl	8001f00 <HAL_GetTick>
 8003b56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b58:	e009      	b.n	8003b6e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b5a:	f7fe f9d1 	bl	8001f00 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d902      	bls.n	8003b6e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	73fb      	strb	r3, [r7, #15]
        break;
 8003b6c:	e005      	b.n	8003b7a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b6e:	4b37      	ldr	r3, [pc, #220]	; (8003c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1ef      	bne.n	8003b5a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003b7a:	7bfb      	ldrb	r3, [r7, #15]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d160      	bne.n	8003c42 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d111      	bne.n	8003baa <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b86:	4b31      	ldr	r3, [pc, #196]	; (8003c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6892      	ldr	r2, [r2, #8]
 8003b96:	0211      	lsls	r1, r2, #8
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	68d2      	ldr	r2, [r2, #12]
 8003b9c:	0912      	lsrs	r2, r2, #4
 8003b9e:	0452      	lsls	r2, r2, #17
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	492a      	ldr	r1, [pc, #168]	; (8003c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	610b      	str	r3, [r1, #16]
 8003ba8:	e027      	b.n	8003bfa <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d112      	bne.n	8003bd6 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bb0:	4b26      	ldr	r3, [pc, #152]	; (8003c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003bb8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6892      	ldr	r2, [r2, #8]
 8003bc0:	0211      	lsls	r1, r2, #8
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	6912      	ldr	r2, [r2, #16]
 8003bc6:	0852      	lsrs	r2, r2, #1
 8003bc8:	3a01      	subs	r2, #1
 8003bca:	0552      	lsls	r2, r2, #21
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	491f      	ldr	r1, [pc, #124]	; (8003c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	610b      	str	r3, [r1, #16]
 8003bd4:	e011      	b.n	8003bfa <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bd6:	4b1d      	ldr	r3, [pc, #116]	; (8003c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003bde:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6892      	ldr	r2, [r2, #8]
 8003be6:	0211      	lsls	r1, r2, #8
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6952      	ldr	r2, [r2, #20]
 8003bec:	0852      	lsrs	r2, r2, #1
 8003bee:	3a01      	subs	r2, #1
 8003bf0:	0652      	lsls	r2, r2, #25
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	4915      	ldr	r1, [pc, #84]	; (8003c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003bfa:	4b14      	ldr	r3, [pc, #80]	; (8003c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a13      	ldr	r2, [pc, #76]	; (8003c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c04:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c06:	f7fe f97b 	bl	8001f00 <HAL_GetTick>
 8003c0a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c0c:	e009      	b.n	8003c22 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c0e:	f7fe f977 	bl	8001f00 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d902      	bls.n	8003c22 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	73fb      	strb	r3, [r7, #15]
          break;
 8003c20:	e005      	b.n	8003c2e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c22:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0ef      	beq.n	8003c0e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d106      	bne.n	8003c42 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c34:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	4903      	ldr	r1, [pc, #12]	; (8003c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40021000 	.word	0x40021000

08003c50 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c5e:	4b68      	ldr	r3, [pc, #416]	; (8003e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d018      	beq.n	8003c9c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c6a:	4b65      	ldr	r3, [pc, #404]	; (8003e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f003 0203 	and.w	r2, r3, #3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d10d      	bne.n	8003c96 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
       ||
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d009      	beq.n	8003c96 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003c82:	4b5f      	ldr	r3, [pc, #380]	; (8003e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	091b      	lsrs	r3, r3, #4
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
       ||
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d044      	beq.n	8003d20 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	73fb      	strb	r3, [r7, #15]
 8003c9a:	e041      	b.n	8003d20 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d00c      	beq.n	8003cbe <RCCEx_PLLSAI2_Config+0x6e>
 8003ca4:	2b03      	cmp	r3, #3
 8003ca6:	d013      	beq.n	8003cd0 <RCCEx_PLLSAI2_Config+0x80>
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d120      	bne.n	8003cee <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cac:	4b54      	ldr	r3, [pc, #336]	; (8003e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d11d      	bne.n	8003cf4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cbc:	e01a      	b.n	8003cf4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003cbe:	4b50      	ldr	r3, [pc, #320]	; (8003e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d116      	bne.n	8003cf8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cce:	e013      	b.n	8003cf8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cd0:	4b4b      	ldr	r3, [pc, #300]	; (8003e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10f      	bne.n	8003cfc <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cdc:	4b48      	ldr	r3, [pc, #288]	; (8003e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d109      	bne.n	8003cfc <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003cec:	e006      	b.n	8003cfc <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	73fb      	strb	r3, [r7, #15]
      break;
 8003cf2:	e004      	b.n	8003cfe <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003cf4:	bf00      	nop
 8003cf6:	e002      	b.n	8003cfe <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003cf8:	bf00      	nop
 8003cfa:	e000      	b.n	8003cfe <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003cfc:	bf00      	nop
    }

    if(status == HAL_OK)
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10d      	bne.n	8003d20 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d04:	4b3e      	ldr	r3, [pc, #248]	; (8003e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6819      	ldr	r1, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	3b01      	subs	r3, #1
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	4939      	ldr	r1, [pc, #228]	; (8003e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d167      	bne.n	8003df6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d26:	4b36      	ldr	r3, [pc, #216]	; (8003e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a35      	ldr	r2, [pc, #212]	; (8003e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d32:	f7fe f8e5 	bl	8001f00 <HAL_GetTick>
 8003d36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d38:	e009      	b.n	8003d4e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d3a:	f7fe f8e1 	bl	8001f00 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d902      	bls.n	8003d4e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	73fb      	strb	r3, [r7, #15]
        break;
 8003d4c:	e005      	b.n	8003d5a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d4e:	4b2c      	ldr	r3, [pc, #176]	; (8003e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1ef      	bne.n	8003d3a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003d5a:	7bfb      	ldrb	r3, [r7, #15]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d14a      	bne.n	8003df6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d111      	bne.n	8003d8a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d66:	4b26      	ldr	r3, [pc, #152]	; (8003e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6892      	ldr	r2, [r2, #8]
 8003d76:	0211      	lsls	r1, r2, #8
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	68d2      	ldr	r2, [r2, #12]
 8003d7c:	0912      	lsrs	r2, r2, #4
 8003d7e:	0452      	lsls	r2, r2, #17
 8003d80:	430a      	orrs	r2, r1
 8003d82:	491f      	ldr	r1, [pc, #124]	; (8003e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	614b      	str	r3, [r1, #20]
 8003d88:	e011      	b.n	8003dae <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d8a:	4b1d      	ldr	r3, [pc, #116]	; (8003e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d92:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6892      	ldr	r2, [r2, #8]
 8003d9a:	0211      	lsls	r1, r2, #8
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6912      	ldr	r2, [r2, #16]
 8003da0:	0852      	lsrs	r2, r2, #1
 8003da2:	3a01      	subs	r2, #1
 8003da4:	0652      	lsls	r2, r2, #25
 8003da6:	430a      	orrs	r2, r1
 8003da8:	4915      	ldr	r1, [pc, #84]	; (8003e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003dae:	4b14      	ldr	r3, [pc, #80]	; (8003e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a13      	ldr	r2, [pc, #76]	; (8003e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dba:	f7fe f8a1 	bl	8001f00 <HAL_GetTick>
 8003dbe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003dc0:	e009      	b.n	8003dd6 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003dc2:	f7fe f89d 	bl	8001f00 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d902      	bls.n	8003dd6 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	73fb      	strb	r3, [r7, #15]
          break;
 8003dd4:	e005      	b.n	8003de2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003dd6:	4b0a      	ldr	r3, [pc, #40]	; (8003e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0ef      	beq.n	8003dc2 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003de2:	7bfb      	ldrb	r3, [r7, #15]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d106      	bne.n	8003df6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003de8:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003dea:	695a      	ldr	r2, [r3, #20]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	4903      	ldr	r1, [pc, #12]	; (8003e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40021000 	.word	0x40021000

08003e04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e095      	b.n	8003f42 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d108      	bne.n	8003e30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e26:	d009      	beq.n	8003e3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	61da      	str	r2, [r3, #28]
 8003e2e:	e005      	b.n	8003e3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d106      	bne.n	8003e5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f877 	bl	8003f4a <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e7c:	d902      	bls.n	8003e84 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	e002      	b.n	8003e8a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e88:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003e92:	d007      	beq.n	8003ea4 <HAL_SPI_Init+0xa0>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e9c:	d002      	beq.n	8003ea4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003edc:	431a      	orrs	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee6:	ea42 0103 	orr.w	r1, r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	0c1b      	lsrs	r3, r3, #16
 8003f00:	f003 0204 	and.w	r2, r3, #4
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	f003 0310 	and.w	r3, r3, #16
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f20:	ea42 0103 	orr.w	r1, r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b08a      	sub	sp, #40	; 0x28
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	607a      	str	r2, [r7, #4]
 8003f6a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d101      	bne.n	8003f84 <HAL_SPI_TransmitReceive+0x26>
 8003f80:	2302      	movs	r3, #2
 8003f82:	e1fb      	b.n	800437c <HAL_SPI_TransmitReceive+0x41e>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f8c:	f7fd ffb8 	bl	8001f00 <HAL_GetTick>
 8003f90:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f98:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003fa0:	887b      	ldrh	r3, [r7, #2]
 8003fa2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003fa4:	887b      	ldrh	r3, [r7, #2]
 8003fa6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003fa8:	7efb      	ldrb	r3, [r7, #27]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d00e      	beq.n	8003fcc <HAL_SPI_TransmitReceive+0x6e>
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fb4:	d106      	bne.n	8003fc4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d102      	bne.n	8003fc4 <HAL_SPI_TransmitReceive+0x66>
 8003fbe:	7efb      	ldrb	r3, [r7, #27]
 8003fc0:	2b04      	cmp	r3, #4
 8003fc2:	d003      	beq.n	8003fcc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003fca:	e1cd      	b.n	8004368 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d005      	beq.n	8003fde <HAL_SPI_TransmitReceive+0x80>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <HAL_SPI_TransmitReceive+0x80>
 8003fd8:	887b      	ldrh	r3, [r7, #2]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d103      	bne.n	8003fe6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003fe4:	e1c0      	b.n	8004368 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d003      	beq.n	8003ffa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2205      	movs	r2, #5
 8003ff6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	887a      	ldrh	r2, [r7, #2]
 800400a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	887a      	ldrh	r2, [r7, #2]
 8004012:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	887a      	ldrh	r2, [r7, #2]
 8004020:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	887a      	ldrh	r2, [r7, #2]
 8004026:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800403c:	d802      	bhi.n	8004044 <HAL_SPI_TransmitReceive+0xe6>
 800403e:	8a3b      	ldrh	r3, [r7, #16]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d908      	bls.n	8004056 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004052:	605a      	str	r2, [r3, #4]
 8004054:	e007      	b.n	8004066 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004064:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004070:	2b40      	cmp	r3, #64	; 0x40
 8004072:	d007      	beq.n	8004084 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004082:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800408c:	d97c      	bls.n	8004188 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <HAL_SPI_TransmitReceive+0x13e>
 8004096:	8a7b      	ldrh	r3, [r7, #18]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d169      	bne.n	8004170 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a0:	881a      	ldrh	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ac:	1c9a      	adds	r2, r3, #2
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040c0:	e056      	b.n	8004170 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d11b      	bne.n	8004108 <HAL_SPI_TransmitReceive+0x1aa>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d016      	beq.n	8004108 <HAL_SPI_TransmitReceive+0x1aa>
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d113      	bne.n	8004108 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e4:	881a      	ldrh	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f0:	1c9a      	adds	r2, r3, #2
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b01      	cmp	r3, #1
 8004114:	d11c      	bne.n	8004150 <HAL_SPI_TransmitReceive+0x1f2>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d016      	beq.n	8004150 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68da      	ldr	r2, [r3, #12]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	b292      	uxth	r2, r2
 800412e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	1c9a      	adds	r2, r3, #2
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004140:	b29b      	uxth	r3, r3
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800414c:	2301      	movs	r3, #1
 800414e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004150:	f7fd fed6 	bl	8001f00 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800415c:	429a      	cmp	r2, r3
 800415e:	d807      	bhi.n	8004170 <HAL_SPI_TransmitReceive+0x212>
 8004160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004166:	d003      	beq.n	8004170 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800416e:	e0fb      	b.n	8004368 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1a3      	bne.n	80040c2 <HAL_SPI_TransmitReceive+0x164>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d19d      	bne.n	80040c2 <HAL_SPI_TransmitReceive+0x164>
 8004186:	e0df      	b.n	8004348 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <HAL_SPI_TransmitReceive+0x23a>
 8004190:	8a7b      	ldrh	r3, [r7, #18]
 8004192:	2b01      	cmp	r3, #1
 8004194:	f040 80cb 	bne.w	800432e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800419c:	b29b      	uxth	r3, r3
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d912      	bls.n	80041c8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a6:	881a      	ldrh	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b2:	1c9a      	adds	r2, r3, #2
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041bc:	b29b      	uxth	r3, r3
 80041be:	3b02      	subs	r3, #2
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041c6:	e0b2      	b.n	800432e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	330c      	adds	r3, #12
 80041d2:	7812      	ldrb	r2, [r2, #0]
 80041d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041da:	1c5a      	adds	r2, r3, #1
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	3b01      	subs	r3, #1
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041ee:	e09e      	b.n	800432e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d134      	bne.n	8004268 <HAL_SPI_TransmitReceive+0x30a>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004202:	b29b      	uxth	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d02f      	beq.n	8004268 <HAL_SPI_TransmitReceive+0x30a>
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	2b01      	cmp	r3, #1
 800420c:	d12c      	bne.n	8004268 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004212:	b29b      	uxth	r3, r3
 8004214:	2b01      	cmp	r3, #1
 8004216:	d912      	bls.n	800423e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421c:	881a      	ldrh	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004228:	1c9a      	adds	r2, r3, #2
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004232:	b29b      	uxth	r3, r3
 8004234:	3b02      	subs	r3, #2
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800423c:	e012      	b.n	8004264 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	330c      	adds	r3, #12
 8004248:	7812      	ldrb	r2, [r2, #0]
 800424a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800425a:	b29b      	uxth	r3, r3
 800425c:	3b01      	subs	r3, #1
 800425e:	b29a      	uxth	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b01      	cmp	r3, #1
 8004274:	d148      	bne.n	8004308 <HAL_SPI_TransmitReceive+0x3aa>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800427c:	b29b      	uxth	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d042      	beq.n	8004308 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004288:	b29b      	uxth	r3, r3
 800428a:	2b01      	cmp	r3, #1
 800428c:	d923      	bls.n	80042d6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004298:	b292      	uxth	r2, r2
 800429a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a0:	1c9a      	adds	r2, r3, #2
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	3b02      	subs	r3, #2
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042be:	b29b      	uxth	r3, r3
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d81f      	bhi.n	8004304 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042d2:	605a      	str	r2, [r3, #4]
 80042d4:	e016      	b.n	8004304 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f103 020c 	add.w	r2, r3, #12
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	7812      	ldrb	r2, [r2, #0]
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004304:	2301      	movs	r3, #1
 8004306:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004308:	f7fd fdfa 	bl	8001f00 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004314:	429a      	cmp	r2, r3
 8004316:	d803      	bhi.n	8004320 <HAL_SPI_TransmitReceive+0x3c2>
 8004318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431e:	d102      	bne.n	8004326 <HAL_SPI_TransmitReceive+0x3c8>
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004322:	2b00      	cmp	r3, #0
 8004324:	d103      	bne.n	800432e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800432c:	e01c      	b.n	8004368 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004332:	b29b      	uxth	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	f47f af5b 	bne.w	80041f0 <HAL_SPI_TransmitReceive+0x292>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004340:	b29b      	uxth	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	f47f af54 	bne.w	80041f0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004348:	69fa      	ldr	r2, [r7, #28]
 800434a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 f93d 	bl	80045cc <SPI_EndRxTxTransaction>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d006      	beq.n	8004366 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2220      	movs	r2, #32
 8004362:	661a      	str	r2, [r3, #96]	; 0x60
 8004364:	e000      	b.n	8004368 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004366:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004378:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800437c:	4618      	mov	r0, r3
 800437e:	3728      	adds	r7, #40	; 0x28
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004392:	b2db      	uxtb	r3, r3
}
 8004394:	4618      	mov	r0, r3
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b088      	sub	sp, #32
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	603b      	str	r3, [r7, #0]
 80043ac:	4613      	mov	r3, r2
 80043ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80043b0:	f7fd fda6 	bl	8001f00 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b8:	1a9b      	subs	r3, r3, r2
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	4413      	add	r3, r2
 80043be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043c0:	f7fd fd9e 	bl	8001f00 <HAL_GetTick>
 80043c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043c6:	4b39      	ldr	r3, [pc, #228]	; (80044ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	015b      	lsls	r3, r3, #5
 80043cc:	0d1b      	lsrs	r3, r3, #20
 80043ce:	69fa      	ldr	r2, [r7, #28]
 80043d0:	fb02 f303 	mul.w	r3, r2, r3
 80043d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043d6:	e054      	b.n	8004482 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043de:	d050      	beq.n	8004482 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043e0:	f7fd fd8e 	bl	8001f00 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	69fa      	ldr	r2, [r7, #28]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d902      	bls.n	80043f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d13d      	bne.n	8004472 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004404:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800440e:	d111      	bne.n	8004434 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004418:	d004      	beq.n	8004424 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004422:	d107      	bne.n	8004434 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004432:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800443c:	d10f      	bne.n	800445e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800445c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e017      	b.n	80044a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004478:	2300      	movs	r3, #0
 800447a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	3b01      	subs	r3, #1
 8004480:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	4013      	ands	r3, r2
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	429a      	cmp	r2, r3
 8004490:	bf0c      	ite	eq
 8004492:	2301      	moveq	r3, #1
 8004494:	2300      	movne	r3, #0
 8004496:	b2db      	uxtb	r3, r3
 8004498:	461a      	mov	r2, r3
 800449a:	79fb      	ldrb	r3, [r7, #7]
 800449c:	429a      	cmp	r2, r3
 800449e:	d19b      	bne.n	80043d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3720      	adds	r7, #32
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	20000004 	.word	0x20000004

080044b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
 80044bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80044be:	f7fd fd1f 	bl	8001f00 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c6:	1a9b      	subs	r3, r3, r2
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	4413      	add	r3, r2
 80044cc:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80044ce:	f7fd fd17 	bl	8001f00 <HAL_GetTick>
 80044d2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80044d4:	4b3c      	ldr	r3, [pc, #240]	; (80045c8 <SPI_WaitFifoStateUntilTimeout+0x118>)
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	4613      	mov	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	00da      	lsls	r2, r3, #3
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	0d1b      	lsrs	r3, r3, #20
 80044e4:	69fa      	ldr	r2, [r7, #28]
 80044e6:	fb02 f303 	mul.w	r3, r2, r3
 80044ea:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80044ec:	e05f      	b.n	80045ae <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80044f4:	d106      	bne.n	8004504 <SPI_WaitFifoStateUntilTimeout+0x54>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d103      	bne.n	8004504 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	330c      	adds	r3, #12
 8004502:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450a:	d050      	beq.n	80045ae <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800450c:	f7fd fcf8 	bl	8001f00 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	69fa      	ldr	r2, [r7, #28]
 8004518:	429a      	cmp	r2, r3
 800451a:	d902      	bls.n	8004522 <SPI_WaitFifoStateUntilTimeout+0x72>
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d13d      	bne.n	800459e <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004530:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800453a:	d111      	bne.n	8004560 <SPI_WaitFifoStateUntilTimeout+0xb0>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004544:	d004      	beq.n	8004550 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800454e:	d107      	bne.n	8004560 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800455e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004568:	d10f      	bne.n	800458a <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004588:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e010      	b.n	80045c0 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	4013      	ands	r3, r2
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d197      	bne.n	80044ee <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3720      	adds	r7, #32
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	20000004 	.word	0x20000004

080045cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af02      	add	r7, sp, #8
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	2200      	movs	r2, #0
 80045e0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f7ff ff63 	bl	80044b0 <SPI_WaitFifoStateUntilTimeout>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d007      	beq.n	8004600 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045f4:	f043 0220 	orr.w	r2, r3, #32
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e027      	b.n	8004650 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	9300      	str	r3, [sp, #0]
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2200      	movs	r2, #0
 8004608:	2180      	movs	r1, #128	; 0x80
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f7ff fec8 	bl	80043a0 <SPI_WaitFlagStateUntilTimeout>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d007      	beq.n	8004626 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800461a:	f043 0220 	orr.w	r2, r3, #32
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e014      	b.n	8004650 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	2200      	movs	r2, #0
 800462e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f7ff ff3c 	bl	80044b0 <SPI_WaitFifoStateUntilTimeout>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d007      	beq.n	800464e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004642:	f043 0220 	orr.w	r2, r3, #32
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e000      	b.n	8004650 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e040      	b.n	80046ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800466e:	2b00      	cmp	r3, #0
 8004670:	d106      	bne.n	8004680 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f83a 	bl	80046f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2224      	movs	r2, #36	; 0x24
 8004684:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0201 	bic.w	r2, r2, #1
 8004694:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f8ca 	bl	8004830 <UART_SetConfig>
 800469c:	4603      	mov	r3, r0
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d101      	bne.n	80046a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e022      	b.n	80046ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d002      	beq.n	80046b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 fb48 	bl	8004d44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689a      	ldr	r2, [r3, #8]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0201 	orr.w	r2, r2, #1
 80046e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 fbcf 	bl	8004e88 <UART_CheckIdleState>
 80046ea:	4603      	mov	r3, r0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08a      	sub	sp, #40	; 0x28
 800470c:	af02      	add	r7, sp, #8
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	603b      	str	r3, [r7, #0]
 8004714:	4613      	mov	r3, r2
 8004716:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800471c:	2b20      	cmp	r3, #32
 800471e:	f040 8081 	bne.w	8004824 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <HAL_UART_Transmit+0x26>
 8004728:	88fb      	ldrh	r3, [r7, #6]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e079      	b.n	8004826 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004738:	2b01      	cmp	r3, #1
 800473a:	d101      	bne.n	8004740 <HAL_UART_Transmit+0x38>
 800473c:	2302      	movs	r3, #2
 800473e:	e072      	b.n	8004826 <HAL_UART_Transmit+0x11e>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2221      	movs	r2, #33	; 0x21
 8004752:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004754:	f7fd fbd4 	bl	8001f00 <HAL_GetTick>
 8004758:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	88fa      	ldrh	r2, [r7, #6]
 800475e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	88fa      	ldrh	r2, [r7, #6]
 8004766:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004772:	d108      	bne.n	8004786 <HAL_UART_Transmit+0x7e>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d104      	bne.n	8004786 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800477c:	2300      	movs	r3, #0
 800477e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	61bb      	str	r3, [r7, #24]
 8004784:	e003      	b.n	800478e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800478a:	2300      	movs	r3, #0
 800478c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004796:	e02d      	b.n	80047f4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	2200      	movs	r2, #0
 80047a0:	2180      	movs	r1, #128	; 0x80
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 fbb5 	bl	8004f12 <UART_WaitOnFlagUntilTimeout>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e039      	b.n	8004826 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10b      	bne.n	80047d0 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	881a      	ldrh	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047c4:	b292      	uxth	r2, r2
 80047c6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	3302      	adds	r3, #2
 80047cc:	61bb      	str	r3, [r7, #24]
 80047ce:	e008      	b.n	80047e2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	781a      	ldrb	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	b292      	uxth	r2, r2
 80047da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	3301      	adds	r3, #1
 80047e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3b01      	subs	r3, #1
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1cb      	bne.n	8004798 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	2200      	movs	r2, #0
 8004808:	2140      	movs	r1, #64	; 0x40
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f000 fb81 	bl	8004f12 <UART_WaitOnFlagUntilTimeout>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e005      	b.n	8004826 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2220      	movs	r2, #32
 800481e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004820:	2300      	movs	r3, #0
 8004822:	e000      	b.n	8004826 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004824:	2302      	movs	r3, #2
  }
}
 8004826:	4618      	mov	r0, r3
 8004828:	3720      	adds	r7, #32
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
	...

08004830 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004830:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004834:	b088      	sub	sp, #32
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689a      	ldr	r2, [r3, #8]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	431a      	orrs	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	4313      	orrs	r3, r2
 8004854:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	4bac      	ldr	r3, [pc, #688]	; (8004b10 <UART_SetConfig+0x2e0>)
 800485e:	4013      	ands	r3, r2
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6812      	ldr	r2, [r2, #0]
 8004864:	69f9      	ldr	r1, [r7, #28]
 8004866:	430b      	orrs	r3, r1
 8004868:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68da      	ldr	r2, [r3, #12]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4aa2      	ldr	r2, [pc, #648]	; (8004b14 <UART_SetConfig+0x2e4>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d004      	beq.n	800489a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	69fa      	ldr	r2, [r7, #28]
 8004896:	4313      	orrs	r3, r2
 8004898:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	69fa      	ldr	r2, [r7, #28]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a99      	ldr	r2, [pc, #612]	; (8004b18 <UART_SetConfig+0x2e8>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d121      	bne.n	80048fc <UART_SetConfig+0xcc>
 80048b8:	4b98      	ldr	r3, [pc, #608]	; (8004b1c <UART_SetConfig+0x2ec>)
 80048ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	2b03      	cmp	r3, #3
 80048c4:	d816      	bhi.n	80048f4 <UART_SetConfig+0xc4>
 80048c6:	a201      	add	r2, pc, #4	; (adr r2, 80048cc <UART_SetConfig+0x9c>)
 80048c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048cc:	080048dd 	.word	0x080048dd
 80048d0:	080048e9 	.word	0x080048e9
 80048d4:	080048e3 	.word	0x080048e3
 80048d8:	080048ef 	.word	0x080048ef
 80048dc:	2301      	movs	r3, #1
 80048de:	76fb      	strb	r3, [r7, #27]
 80048e0:	e0e8      	b.n	8004ab4 <UART_SetConfig+0x284>
 80048e2:	2302      	movs	r3, #2
 80048e4:	76fb      	strb	r3, [r7, #27]
 80048e6:	e0e5      	b.n	8004ab4 <UART_SetConfig+0x284>
 80048e8:	2304      	movs	r3, #4
 80048ea:	76fb      	strb	r3, [r7, #27]
 80048ec:	e0e2      	b.n	8004ab4 <UART_SetConfig+0x284>
 80048ee:	2308      	movs	r3, #8
 80048f0:	76fb      	strb	r3, [r7, #27]
 80048f2:	e0df      	b.n	8004ab4 <UART_SetConfig+0x284>
 80048f4:	2310      	movs	r3, #16
 80048f6:	76fb      	strb	r3, [r7, #27]
 80048f8:	bf00      	nop
 80048fa:	e0db      	b.n	8004ab4 <UART_SetConfig+0x284>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a87      	ldr	r2, [pc, #540]	; (8004b20 <UART_SetConfig+0x2f0>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d134      	bne.n	8004970 <UART_SetConfig+0x140>
 8004906:	4b85      	ldr	r3, [pc, #532]	; (8004b1c <UART_SetConfig+0x2ec>)
 8004908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490c:	f003 030c 	and.w	r3, r3, #12
 8004910:	2b0c      	cmp	r3, #12
 8004912:	d829      	bhi.n	8004968 <UART_SetConfig+0x138>
 8004914:	a201      	add	r2, pc, #4	; (adr r2, 800491c <UART_SetConfig+0xec>)
 8004916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491a:	bf00      	nop
 800491c:	08004951 	.word	0x08004951
 8004920:	08004969 	.word	0x08004969
 8004924:	08004969 	.word	0x08004969
 8004928:	08004969 	.word	0x08004969
 800492c:	0800495d 	.word	0x0800495d
 8004930:	08004969 	.word	0x08004969
 8004934:	08004969 	.word	0x08004969
 8004938:	08004969 	.word	0x08004969
 800493c:	08004957 	.word	0x08004957
 8004940:	08004969 	.word	0x08004969
 8004944:	08004969 	.word	0x08004969
 8004948:	08004969 	.word	0x08004969
 800494c:	08004963 	.word	0x08004963
 8004950:	2300      	movs	r3, #0
 8004952:	76fb      	strb	r3, [r7, #27]
 8004954:	e0ae      	b.n	8004ab4 <UART_SetConfig+0x284>
 8004956:	2302      	movs	r3, #2
 8004958:	76fb      	strb	r3, [r7, #27]
 800495a:	e0ab      	b.n	8004ab4 <UART_SetConfig+0x284>
 800495c:	2304      	movs	r3, #4
 800495e:	76fb      	strb	r3, [r7, #27]
 8004960:	e0a8      	b.n	8004ab4 <UART_SetConfig+0x284>
 8004962:	2308      	movs	r3, #8
 8004964:	76fb      	strb	r3, [r7, #27]
 8004966:	e0a5      	b.n	8004ab4 <UART_SetConfig+0x284>
 8004968:	2310      	movs	r3, #16
 800496a:	76fb      	strb	r3, [r7, #27]
 800496c:	bf00      	nop
 800496e:	e0a1      	b.n	8004ab4 <UART_SetConfig+0x284>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a6b      	ldr	r2, [pc, #428]	; (8004b24 <UART_SetConfig+0x2f4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d120      	bne.n	80049bc <UART_SetConfig+0x18c>
 800497a:	4b68      	ldr	r3, [pc, #416]	; (8004b1c <UART_SetConfig+0x2ec>)
 800497c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004980:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004984:	2b10      	cmp	r3, #16
 8004986:	d00f      	beq.n	80049a8 <UART_SetConfig+0x178>
 8004988:	2b10      	cmp	r3, #16
 800498a:	d802      	bhi.n	8004992 <UART_SetConfig+0x162>
 800498c:	2b00      	cmp	r3, #0
 800498e:	d005      	beq.n	800499c <UART_SetConfig+0x16c>
 8004990:	e010      	b.n	80049b4 <UART_SetConfig+0x184>
 8004992:	2b20      	cmp	r3, #32
 8004994:	d005      	beq.n	80049a2 <UART_SetConfig+0x172>
 8004996:	2b30      	cmp	r3, #48	; 0x30
 8004998:	d009      	beq.n	80049ae <UART_SetConfig+0x17e>
 800499a:	e00b      	b.n	80049b4 <UART_SetConfig+0x184>
 800499c:	2300      	movs	r3, #0
 800499e:	76fb      	strb	r3, [r7, #27]
 80049a0:	e088      	b.n	8004ab4 <UART_SetConfig+0x284>
 80049a2:	2302      	movs	r3, #2
 80049a4:	76fb      	strb	r3, [r7, #27]
 80049a6:	e085      	b.n	8004ab4 <UART_SetConfig+0x284>
 80049a8:	2304      	movs	r3, #4
 80049aa:	76fb      	strb	r3, [r7, #27]
 80049ac:	e082      	b.n	8004ab4 <UART_SetConfig+0x284>
 80049ae:	2308      	movs	r3, #8
 80049b0:	76fb      	strb	r3, [r7, #27]
 80049b2:	e07f      	b.n	8004ab4 <UART_SetConfig+0x284>
 80049b4:	2310      	movs	r3, #16
 80049b6:	76fb      	strb	r3, [r7, #27]
 80049b8:	bf00      	nop
 80049ba:	e07b      	b.n	8004ab4 <UART_SetConfig+0x284>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a59      	ldr	r2, [pc, #356]	; (8004b28 <UART_SetConfig+0x2f8>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d120      	bne.n	8004a08 <UART_SetConfig+0x1d8>
 80049c6:	4b55      	ldr	r3, [pc, #340]	; (8004b1c <UART_SetConfig+0x2ec>)
 80049c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80049d0:	2b40      	cmp	r3, #64	; 0x40
 80049d2:	d00f      	beq.n	80049f4 <UART_SetConfig+0x1c4>
 80049d4:	2b40      	cmp	r3, #64	; 0x40
 80049d6:	d802      	bhi.n	80049de <UART_SetConfig+0x1ae>
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d005      	beq.n	80049e8 <UART_SetConfig+0x1b8>
 80049dc:	e010      	b.n	8004a00 <UART_SetConfig+0x1d0>
 80049de:	2b80      	cmp	r3, #128	; 0x80
 80049e0:	d005      	beq.n	80049ee <UART_SetConfig+0x1be>
 80049e2:	2bc0      	cmp	r3, #192	; 0xc0
 80049e4:	d009      	beq.n	80049fa <UART_SetConfig+0x1ca>
 80049e6:	e00b      	b.n	8004a00 <UART_SetConfig+0x1d0>
 80049e8:	2300      	movs	r3, #0
 80049ea:	76fb      	strb	r3, [r7, #27]
 80049ec:	e062      	b.n	8004ab4 <UART_SetConfig+0x284>
 80049ee:	2302      	movs	r3, #2
 80049f0:	76fb      	strb	r3, [r7, #27]
 80049f2:	e05f      	b.n	8004ab4 <UART_SetConfig+0x284>
 80049f4:	2304      	movs	r3, #4
 80049f6:	76fb      	strb	r3, [r7, #27]
 80049f8:	e05c      	b.n	8004ab4 <UART_SetConfig+0x284>
 80049fa:	2308      	movs	r3, #8
 80049fc:	76fb      	strb	r3, [r7, #27]
 80049fe:	e059      	b.n	8004ab4 <UART_SetConfig+0x284>
 8004a00:	2310      	movs	r3, #16
 8004a02:	76fb      	strb	r3, [r7, #27]
 8004a04:	bf00      	nop
 8004a06:	e055      	b.n	8004ab4 <UART_SetConfig+0x284>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a47      	ldr	r2, [pc, #284]	; (8004b2c <UART_SetConfig+0x2fc>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d124      	bne.n	8004a5c <UART_SetConfig+0x22c>
 8004a12:	4b42      	ldr	r3, [pc, #264]	; (8004b1c <UART_SetConfig+0x2ec>)
 8004a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a20:	d012      	beq.n	8004a48 <UART_SetConfig+0x218>
 8004a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a26:	d802      	bhi.n	8004a2e <UART_SetConfig+0x1fe>
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d007      	beq.n	8004a3c <UART_SetConfig+0x20c>
 8004a2c:	e012      	b.n	8004a54 <UART_SetConfig+0x224>
 8004a2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a32:	d006      	beq.n	8004a42 <UART_SetConfig+0x212>
 8004a34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a38:	d009      	beq.n	8004a4e <UART_SetConfig+0x21e>
 8004a3a:	e00b      	b.n	8004a54 <UART_SetConfig+0x224>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	76fb      	strb	r3, [r7, #27]
 8004a40:	e038      	b.n	8004ab4 <UART_SetConfig+0x284>
 8004a42:	2302      	movs	r3, #2
 8004a44:	76fb      	strb	r3, [r7, #27]
 8004a46:	e035      	b.n	8004ab4 <UART_SetConfig+0x284>
 8004a48:	2304      	movs	r3, #4
 8004a4a:	76fb      	strb	r3, [r7, #27]
 8004a4c:	e032      	b.n	8004ab4 <UART_SetConfig+0x284>
 8004a4e:	2308      	movs	r3, #8
 8004a50:	76fb      	strb	r3, [r7, #27]
 8004a52:	e02f      	b.n	8004ab4 <UART_SetConfig+0x284>
 8004a54:	2310      	movs	r3, #16
 8004a56:	76fb      	strb	r3, [r7, #27]
 8004a58:	bf00      	nop
 8004a5a:	e02b      	b.n	8004ab4 <UART_SetConfig+0x284>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a2c      	ldr	r2, [pc, #176]	; (8004b14 <UART_SetConfig+0x2e4>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d124      	bne.n	8004ab0 <UART_SetConfig+0x280>
 8004a66:	4b2d      	ldr	r3, [pc, #180]	; (8004b1c <UART_SetConfig+0x2ec>)
 8004a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a74:	d012      	beq.n	8004a9c <UART_SetConfig+0x26c>
 8004a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a7a:	d802      	bhi.n	8004a82 <UART_SetConfig+0x252>
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d007      	beq.n	8004a90 <UART_SetConfig+0x260>
 8004a80:	e012      	b.n	8004aa8 <UART_SetConfig+0x278>
 8004a82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a86:	d006      	beq.n	8004a96 <UART_SetConfig+0x266>
 8004a88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a8c:	d009      	beq.n	8004aa2 <UART_SetConfig+0x272>
 8004a8e:	e00b      	b.n	8004aa8 <UART_SetConfig+0x278>
 8004a90:	2300      	movs	r3, #0
 8004a92:	76fb      	strb	r3, [r7, #27]
 8004a94:	e00e      	b.n	8004ab4 <UART_SetConfig+0x284>
 8004a96:	2302      	movs	r3, #2
 8004a98:	76fb      	strb	r3, [r7, #27]
 8004a9a:	e00b      	b.n	8004ab4 <UART_SetConfig+0x284>
 8004a9c:	2304      	movs	r3, #4
 8004a9e:	76fb      	strb	r3, [r7, #27]
 8004aa0:	e008      	b.n	8004ab4 <UART_SetConfig+0x284>
 8004aa2:	2308      	movs	r3, #8
 8004aa4:	76fb      	strb	r3, [r7, #27]
 8004aa6:	e005      	b.n	8004ab4 <UART_SetConfig+0x284>
 8004aa8:	2310      	movs	r3, #16
 8004aaa:	76fb      	strb	r3, [r7, #27]
 8004aac:	bf00      	nop
 8004aae:	e001      	b.n	8004ab4 <UART_SetConfig+0x284>
 8004ab0:	2310      	movs	r3, #16
 8004ab2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a16      	ldr	r2, [pc, #88]	; (8004b14 <UART_SetConfig+0x2e4>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	f040 8087 	bne.w	8004bce <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ac0:	7efb      	ldrb	r3, [r7, #27]
 8004ac2:	2b08      	cmp	r3, #8
 8004ac4:	d836      	bhi.n	8004b34 <UART_SetConfig+0x304>
 8004ac6:	a201      	add	r2, pc, #4	; (adr r2, 8004acc <UART_SetConfig+0x29c>)
 8004ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004acc:	08004af1 	.word	0x08004af1
 8004ad0:	08004b35 	.word	0x08004b35
 8004ad4:	08004af9 	.word	0x08004af9
 8004ad8:	08004b35 	.word	0x08004b35
 8004adc:	08004aff 	.word	0x08004aff
 8004ae0:	08004b35 	.word	0x08004b35
 8004ae4:	08004b35 	.word	0x08004b35
 8004ae8:	08004b35 	.word	0x08004b35
 8004aec:	08004b07 	.word	0x08004b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004af0:	f7fe fc4c 	bl	800338c <HAL_RCC_GetPCLK1Freq>
 8004af4:	6178      	str	r0, [r7, #20]
        break;
 8004af6:	e022      	b.n	8004b3e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004af8:	4b0d      	ldr	r3, [pc, #52]	; (8004b30 <UART_SetConfig+0x300>)
 8004afa:	617b      	str	r3, [r7, #20]
        break;
 8004afc:	e01f      	b.n	8004b3e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004afe:	f7fe fbaf 	bl	8003260 <HAL_RCC_GetSysClockFreq>
 8004b02:	6178      	str	r0, [r7, #20]
        break;
 8004b04:	e01b      	b.n	8004b3e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b0a:	617b      	str	r3, [r7, #20]
        break;
 8004b0c:	e017      	b.n	8004b3e <UART_SetConfig+0x30e>
 8004b0e:	bf00      	nop
 8004b10:	efff69f3 	.word	0xefff69f3
 8004b14:	40008000 	.word	0x40008000
 8004b18:	40013800 	.word	0x40013800
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	40004400 	.word	0x40004400
 8004b24:	40004800 	.word	0x40004800
 8004b28:	40004c00 	.word	0x40004c00
 8004b2c:	40005000 	.word	0x40005000
 8004b30:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	76bb      	strb	r3, [r7, #26]
        break;
 8004b3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 80f1 	beq.w	8004d28 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	4413      	add	r3, r2
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d305      	bcc.n	8004b62 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d902      	bls.n	8004b68 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	76bb      	strb	r3, [r7, #26]
 8004b66:	e0df      	b.n	8004d28 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	f04f 0300 	mov.w	r3, #0
 8004b74:	f04f 0400 	mov.w	r4, #0
 8004b78:	0214      	lsls	r4, r2, #8
 8004b7a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004b7e:	020b      	lsls	r3, r1, #8
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	6852      	ldr	r2, [r2, #4]
 8004b84:	0852      	lsrs	r2, r2, #1
 8004b86:	4611      	mov	r1, r2
 8004b88:	f04f 0200 	mov.w	r2, #0
 8004b8c:	eb13 0b01 	adds.w	fp, r3, r1
 8004b90:	eb44 0c02 	adc.w	ip, r4, r2
 8004b94:	4658      	mov	r0, fp
 8004b96:	4661      	mov	r1, ip
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f04f 0400 	mov.w	r4, #0
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	4623      	mov	r3, r4
 8004ba4:	f7fb fb6c 	bl	8000280 <__aeabi_uldivmod>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	460c      	mov	r4, r1
 8004bac:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bb4:	d308      	bcc.n	8004bc8 <UART_SetConfig+0x398>
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bbc:	d204      	bcs.n	8004bc8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	60da      	str	r2, [r3, #12]
 8004bc6:	e0af      	b.n	8004d28 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	76bb      	strb	r3, [r7, #26]
 8004bcc:	e0ac      	b.n	8004d28 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bd6:	d15b      	bne.n	8004c90 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004bd8:	7efb      	ldrb	r3, [r7, #27]
 8004bda:	2b08      	cmp	r3, #8
 8004bdc:	d827      	bhi.n	8004c2e <UART_SetConfig+0x3fe>
 8004bde:	a201      	add	r2, pc, #4	; (adr r2, 8004be4 <UART_SetConfig+0x3b4>)
 8004be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be4:	08004c09 	.word	0x08004c09
 8004be8:	08004c11 	.word	0x08004c11
 8004bec:	08004c19 	.word	0x08004c19
 8004bf0:	08004c2f 	.word	0x08004c2f
 8004bf4:	08004c1f 	.word	0x08004c1f
 8004bf8:	08004c2f 	.word	0x08004c2f
 8004bfc:	08004c2f 	.word	0x08004c2f
 8004c00:	08004c2f 	.word	0x08004c2f
 8004c04:	08004c27 	.word	0x08004c27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c08:	f7fe fbc0 	bl	800338c <HAL_RCC_GetPCLK1Freq>
 8004c0c:	6178      	str	r0, [r7, #20]
        break;
 8004c0e:	e013      	b.n	8004c38 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c10:	f7fe fbd2 	bl	80033b8 <HAL_RCC_GetPCLK2Freq>
 8004c14:	6178      	str	r0, [r7, #20]
        break;
 8004c16:	e00f      	b.n	8004c38 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c18:	4b49      	ldr	r3, [pc, #292]	; (8004d40 <UART_SetConfig+0x510>)
 8004c1a:	617b      	str	r3, [r7, #20]
        break;
 8004c1c:	e00c      	b.n	8004c38 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c1e:	f7fe fb1f 	bl	8003260 <HAL_RCC_GetSysClockFreq>
 8004c22:	6178      	str	r0, [r7, #20]
        break;
 8004c24:	e008      	b.n	8004c38 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c2a:	617b      	str	r3, [r7, #20]
        break;
 8004c2c:	e004      	b.n	8004c38 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	76bb      	strb	r3, [r7, #26]
        break;
 8004c36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d074      	beq.n	8004d28 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	005a      	lsls	r2, r3, #1
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	085b      	lsrs	r3, r3, #1
 8004c48:	441a      	add	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	2b0f      	cmp	r3, #15
 8004c5a:	d916      	bls.n	8004c8a <UART_SetConfig+0x45a>
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c62:	d212      	bcs.n	8004c8a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	f023 030f 	bic.w	r3, r3, #15
 8004c6c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	085b      	lsrs	r3, r3, #1
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	f003 0307 	and.w	r3, r3, #7
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	89fb      	ldrh	r3, [r7, #14]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	89fa      	ldrh	r2, [r7, #14]
 8004c86:	60da      	str	r2, [r3, #12]
 8004c88:	e04e      	b.n	8004d28 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	76bb      	strb	r3, [r7, #26]
 8004c8e:	e04b      	b.n	8004d28 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c90:	7efb      	ldrb	r3, [r7, #27]
 8004c92:	2b08      	cmp	r3, #8
 8004c94:	d827      	bhi.n	8004ce6 <UART_SetConfig+0x4b6>
 8004c96:	a201      	add	r2, pc, #4	; (adr r2, 8004c9c <UART_SetConfig+0x46c>)
 8004c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9c:	08004cc1 	.word	0x08004cc1
 8004ca0:	08004cc9 	.word	0x08004cc9
 8004ca4:	08004cd1 	.word	0x08004cd1
 8004ca8:	08004ce7 	.word	0x08004ce7
 8004cac:	08004cd7 	.word	0x08004cd7
 8004cb0:	08004ce7 	.word	0x08004ce7
 8004cb4:	08004ce7 	.word	0x08004ce7
 8004cb8:	08004ce7 	.word	0x08004ce7
 8004cbc:	08004cdf 	.word	0x08004cdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cc0:	f7fe fb64 	bl	800338c <HAL_RCC_GetPCLK1Freq>
 8004cc4:	6178      	str	r0, [r7, #20]
        break;
 8004cc6:	e013      	b.n	8004cf0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cc8:	f7fe fb76 	bl	80033b8 <HAL_RCC_GetPCLK2Freq>
 8004ccc:	6178      	str	r0, [r7, #20]
        break;
 8004cce:	e00f      	b.n	8004cf0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cd0:	4b1b      	ldr	r3, [pc, #108]	; (8004d40 <UART_SetConfig+0x510>)
 8004cd2:	617b      	str	r3, [r7, #20]
        break;
 8004cd4:	e00c      	b.n	8004cf0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cd6:	f7fe fac3 	bl	8003260 <HAL_RCC_GetSysClockFreq>
 8004cda:	6178      	str	r0, [r7, #20]
        break;
 8004cdc:	e008      	b.n	8004cf0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ce2:	617b      	str	r3, [r7, #20]
        break;
 8004ce4:	e004      	b.n	8004cf0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	76bb      	strb	r3, [r7, #26]
        break;
 8004cee:	bf00      	nop
    }

    if (pclk != 0U)
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d018      	beq.n	8004d28 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	085a      	lsrs	r2, r3, #1
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	441a      	add	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	2b0f      	cmp	r3, #15
 8004d10:	d908      	bls.n	8004d24 <UART_SetConfig+0x4f4>
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d18:	d204      	bcs.n	8004d24 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	60da      	str	r2, [r3, #12]
 8004d22:	e001      	b.n	8004d28 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004d34:	7ebb      	ldrb	r3, [r7, #26]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3720      	adds	r7, #32
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004d40:	00f42400 	.word	0x00f42400

08004d44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00a      	beq.n	8004d6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	f003 0304 	and.w	r3, r3, #4
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	f003 0308 	and.w	r3, r3, #8
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	f003 0310 	and.w	r3, r3, #16
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00a      	beq.n	8004df6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	f003 0320 	and.w	r3, r3, #32
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00a      	beq.n	8004e18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d01a      	beq.n	8004e5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e42:	d10a      	bne.n	8004e5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00a      	beq.n	8004e7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	605a      	str	r2, [r3, #4]
  }
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af02      	add	r7, sp, #8
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004e96:	f7fd f833 	bl	8001f00 <HAL_GetTick>
 8004e9a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d10e      	bne.n	8004ec8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eaa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 f82a 	bl	8004f12 <UART_WaitOnFlagUntilTimeout>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e020      	b.n	8004f0a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0304 	and.w	r3, r3, #4
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d10e      	bne.n	8004ef4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ed6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f814 	bl	8004f12 <UART_WaitOnFlagUntilTimeout>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e00a      	b.n	8004f0a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2220      	movs	r2, #32
 8004efe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b084      	sub	sp, #16
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	60f8      	str	r0, [r7, #12]
 8004f1a:	60b9      	str	r1, [r7, #8]
 8004f1c:	603b      	str	r3, [r7, #0]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f22:	e05d      	b.n	8004fe0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2a:	d059      	beq.n	8004fe0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2c:	f7fc ffe8 	bl	8001f00 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d302      	bcc.n	8004f42 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d11b      	bne.n	8004f7a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f50:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0201 	bic.w	r2, r2, #1
 8004f60:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2220      	movs	r2, #32
 8004f66:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e042      	b.n	8005000 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d02b      	beq.n	8004fe0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f96:	d123      	bne.n	8004fe0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fa0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004fb0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689a      	ldr	r2, [r3, #8]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 0201 	bic.w	r2, r2, #1
 8004fc0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e00f      	b.n	8005000 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	69da      	ldr	r2, [r3, #28]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	bf0c      	ite	eq
 8004ff0:	2301      	moveq	r3, #1
 8004ff2:	2300      	movne	r3, #0
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	79fb      	ldrb	r3, [r7, #7]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d092      	beq.n	8004f24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b08c      	sub	sp, #48	; 0x30
 800500c:	af00      	add	r7, sp, #0
 800500e:	603b      	str	r3, [r7, #0]
 8005010:	4603      	mov	r3, r0
 8005012:	71fb      	strb	r3, [r7, #7]
 8005014:	460b      	mov	r3, r1
 8005016:	71bb      	strb	r3, [r7, #6]
 8005018:	4613      	mov	r3, r2
 800501a:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 800501c:	79fb      	ldrb	r3, [r7, #7]
 800501e:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8005020:	79bb      	ldrb	r3, [r7, #6]
 8005022:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8005024:	797b      	ldrb	r3, [r7, #5]
 8005026:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005028:	f107 030c 	add.w	r3, r7, #12
 800502c:	2207      	movs	r2, #7
 800502e:	2100      	movs	r1, #0
 8005030:	4618      	mov	r0, r3
 8005032:	f001 fc60 	bl	80068f6 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005036:	f107 0318 	add.w	r3, r7, #24
 800503a:	2218      	movs	r2, #24
 800503c:	2100      	movs	r1, #0
 800503e:	4618      	mov	r0, r3
 8005040:	f001 fc59 	bl	80068f6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005044:	233f      	movs	r3, #63	; 0x3f
 8005046:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8005048:	238a      	movs	r3, #138	; 0x8a
 800504a:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800504c:	f107 0314 	add.w	r3, r7, #20
 8005050:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8005052:	2303      	movs	r3, #3
 8005054:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 8005056:	f107 030c 	add.w	r3, r7, #12
 800505a:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 800505c:	2307      	movs	r3, #7
 800505e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8005060:	f107 0318 	add.w	r3, r7, #24
 8005064:	2100      	movs	r1, #0
 8005066:	4618      	mov	r0, r3
 8005068:	f000 ffec 	bl	8006044 <hci_send_req>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	da01      	bge.n	8005076 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8005072:	23ff      	movs	r3, #255	; 0xff
 8005074:	e014      	b.n	80050a0 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8005076:	7b3b      	ldrb	r3, [r7, #12]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d001      	beq.n	8005080 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 800507c:	7b3b      	ldrb	r3, [r7, #12]
 800507e:	e00f      	b.n	80050a0 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8005080:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8005084:	b29a      	uxth	r2, r3
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800508a:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800508e:	b29a      	uxth	r2, r3
 8005090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005092:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8005094:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8005098:	b29a      	uxth	r2, r3
 800509a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800509c:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3730      	adds	r7, #48	; 0x30
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b08e      	sub	sp, #56	; 0x38
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60b9      	str	r1, [r7, #8]
 80050b0:	607a      	str	r2, [r7, #4]
 80050b2:	603b      	str	r3, [r7, #0]
 80050b4:	4603      	mov	r3, r0
 80050b6:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
 80050ba:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80050bc:	f107 0314 	add.w	r3, r7, #20
 80050c0:	2207      	movs	r2, #7
 80050c2:	2100      	movs	r1, #0
 80050c4:	4618      	mov	r0, r3
 80050c6:	f001 fc16 	bl	80068f6 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80050ca:	f107 0320 	add.w	r3, r7, #32
 80050ce:	2218      	movs	r2, #24
 80050d0:	2100      	movs	r1, #0
 80050d2:	4618      	mov	r0, r3
 80050d4:	f001 fc0f 	bl	80068f6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80050d8:	233f      	movs	r3, #63	; 0x3f
 80050da:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 80050dc:	238a      	movs	r3, #138	; 0x8a
 80050de:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = &cp;
 80050e0:	f107 031c 	add.w	r3, r7, #28
 80050e4:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = sizeof(cp);
 80050e6:	2301      	movs	r3, #1
 80050e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 80050ea:	f107 0314 	add.w	r3, r7, #20
 80050ee:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 80050f0:	2307      	movs	r3, #7
 80050f2:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 80050f4:	f107 0320 	add.w	r3, r7, #32
 80050f8:	2100      	movs	r1, #0
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 ffa2 	bl	8006044 <hci_send_req>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	da01      	bge.n	800510a <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 8005106:	23ff      	movs	r3, #255	; 0xff
 8005108:	e014      	b.n	8005134 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 800510a:	7d3b      	ldrb	r3, [r7, #20]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 8005110:	7d3b      	ldrb	r3, [r7, #20]
 8005112:	e00f      	b.n	8005134 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 8005114:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8005118:	b29a      	uxth	r2, r3
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800511e:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 8005122:	b29a      	uxth	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8005128:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800512c:	b29a      	uxth	r2, r3
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3738      	adds	r7, #56	; 0x38
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800513c:	b590      	push	{r4, r7, lr}
 800513e:	b095      	sub	sp, #84	; 0x54
 8005140:	af00      	add	r7, sp, #0
 8005142:	4604      	mov	r4, r0
 8005144:	4608      	mov	r0, r1
 8005146:	4611      	mov	r1, r2
 8005148:	461a      	mov	r2, r3
 800514a:	4623      	mov	r3, r4
 800514c:	71fb      	strb	r3, [r7, #7]
 800514e:	4603      	mov	r3, r0
 8005150:	80bb      	strh	r3, [r7, #4]
 8005152:	460b      	mov	r3, r1
 8005154:	807b      	strh	r3, [r7, #2]
 8005156:	4613      	mov	r3, r2
 8005158:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 800515a:	2300      	movs	r3, #0
 800515c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8005160:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8005164:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8005168:	4413      	add	r3, r2
 800516a:	330e      	adds	r3, #14
 800516c:	2b28      	cmp	r3, #40	; 0x28
 800516e:	d901      	bls.n	8005174 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8005170:	2342      	movs	r3, #66	; 0x42
 8005172:	e0ce      	b.n	8005312 <aci_gap_set_discoverable+0x1d6>

  buffer[indx] = AdvType;
 8005174:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005178:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800517c:	4413      	add	r3, r2
 800517e:	79fa      	ldrb	r2, [r7, #7]
 8005180:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8005184:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005188:	3301      	adds	r3, #1
 800518a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 800518e:	88bb      	ldrh	r3, [r7, #4]
 8005190:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8005192:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005196:	f107 0208 	add.w	r2, r7, #8
 800519a:	4413      	add	r3, r2
 800519c:	88ba      	ldrh	r2, [r7, #4]
 800519e:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80051a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80051a4:	3302      	adds	r3, #2
 80051a6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 80051aa:	887b      	ldrh	r3, [r7, #2]
 80051ac:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 80051ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80051b2:	f107 0208 	add.w	r2, r7, #8
 80051b6:	4413      	add	r3, r2
 80051b8:	887a      	ldrh	r2, [r7, #2]
 80051ba:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80051bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80051c0:	3302      	adds	r3, #2
 80051c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 80051c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80051ca:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80051ce:	4413      	add	r3, r2
 80051d0:	79ba      	ldrb	r2, [r7, #6]
 80051d2:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80051d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80051da:	3301      	adds	r3, #1
 80051dc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 80051e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80051e4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80051e8:	4413      	add	r3, r2
 80051ea:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80051ee:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80051f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80051f6:	3301      	adds	r3, #1
 80051f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 80051fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005200:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005204:	4413      	add	r3, r2
 8005206:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800520a:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800520e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005212:	3301      	adds	r3, #1
 8005214:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8005218:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800521c:	f107 0208 	add.w	r2, r7, #8
 8005220:	4413      	add	r3, r2
 8005222:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8005226:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005228:	4618      	mov	r0, r3
 800522a:	f001 fb59 	bl	80068e0 <memcpy>
  indx +=  LocalNameLen;
 800522e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005232:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8005236:	4413      	add	r3, r2
 8005238:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 800523c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005240:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005244:	4413      	add	r3, r2
 8005246:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800524a:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800524e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005252:	3301      	adds	r3, #1
 8005254:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8005258:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800525c:	f107 0208 	add.w	r2, r7, #8
 8005260:	4413      	add	r3, r2
 8005262:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8005266:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8005268:	4618      	mov	r0, r3
 800526a:	f001 fb39 	bl	80068e0 <memcpy>
  indx +=  ServiceUUIDLen;  
 800526e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005272:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8005276:	4413      	add	r3, r2
 8005278:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 800527c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8005280:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8005284:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005288:	f107 0208 	add.w	r2, r7, #8
 800528c:	4413      	add	r3, r2
 800528e:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8005292:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8005294:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005298:	3302      	adds	r3, #2
 800529a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 800529e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80052a2:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 80052a6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80052aa:	f107 0208 	add.w	r2, r7, #8
 80052ae:	4413      	add	r3, r2
 80052b0:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80052b4:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 80052b6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80052ba:	3302      	adds	r3, #2
 80052bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80052c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80052c4:	2218      	movs	r2, #24
 80052c6:	2100      	movs	r1, #0
 80052c8:	4618      	mov	r0, r3
 80052ca:	f001 fb14 	bl	80068f6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80052ce:	233f      	movs	r3, #63	; 0x3f
 80052d0:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 80052d2:	2383      	movs	r3, #131	; 0x83
 80052d4:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 80052d6:	f107 0308 	add.w	r3, r7, #8
 80052da:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 80052dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80052e0:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 80052e2:	f107 0333 	add.w	r3, r7, #51	; 0x33
 80052e6:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 80052e8:	2301      	movs	r3, #1
 80052ea:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 80052ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80052f0:	2100      	movs	r1, #0
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 fea6 	bl	8006044 <hci_send_req>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	da01      	bge.n	8005302 <aci_gap_set_discoverable+0x1c6>
    return BLE_STATUS_TIMEOUT;
 80052fe:	23ff      	movs	r3, #255	; 0xff
 8005300:	e007      	b.n	8005312 <aci_gap_set_discoverable+0x1d6>

  if (status) {
 8005302:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005306:	2b00      	cmp	r3, #0
 8005308:	d002      	beq.n	8005310 <aci_gap_set_discoverable+0x1d4>
    return status;
 800530a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800530e:	e000      	b.n	8005312 <aci_gap_set_discoverable+0x1d6>
  }

  return 0;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3754      	adds	r7, #84	; 0x54
 8005316:	46bd      	mov	sp, r7
 8005318:	bd90      	pop	{r4, r7, pc}

0800531a <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 800531a:	b590      	push	{r4, r7, lr}
 800531c:	b091      	sub	sp, #68	; 0x44
 800531e:	af00      	add	r7, sp, #0
 8005320:	603a      	str	r2, [r7, #0]
 8005322:	461a      	mov	r2, r3
 8005324:	4603      	mov	r3, r0
 8005326:	71fb      	strb	r3, [r7, #7]
 8005328:	460b      	mov	r3, r1
 800532a:	71bb      	strb	r3, [r7, #6]
 800532c:	4613      	mov	r3, r2
 800532e:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8005330:	79fb      	ldrb	r3, [r7, #7]
 8005332:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 8005334:	79bb      	ldrb	r3, [r7, #6]
 8005336:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 8005338:	79bb      	ldrb	r3, [r7, #6]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00a      	beq.n	8005354 <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	f107 030e 	add.w	r3, r7, #14
 8005344:	6814      	ldr	r4, [r2, #0]
 8005346:	6850      	ldr	r0, [r2, #4]
 8005348:	6891      	ldr	r1, [r2, #8]
 800534a:	68d2      	ldr	r2, [r2, #12]
 800534c:	601c      	str	r4, [r3, #0]
 800534e:	6058      	str	r0, [r3, #4]
 8005350:	6099      	str	r1, [r3, #8]
 8005352:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 8005354:	797b      	ldrb	r3, [r7, #5]
 8005356:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8005358:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800535c:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 800535e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8005362:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 8005366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005368:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 800536c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005370:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005374:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005378:	2218      	movs	r2, #24
 800537a:	2100      	movs	r1, #0
 800537c:	4618      	mov	r0, r3
 800537e:	f001 faba 	bl	80068f6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005382:	233f      	movs	r3, #63	; 0x3f
 8005384:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8005386:	2386      	movs	r3, #134	; 0x86
 8005388:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 800538a:	f107 030c 	add.w	r3, r7, #12
 800538e:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 8005390:	231a      	movs	r3, #26
 8005392:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 8005394:	f107 030b 	add.w	r3, r7, #11
 8005398:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 800539a:	2301      	movs	r3, #1
 800539c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 800539e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053a2:	2100      	movs	r1, #0
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 fe4d 	bl	8006044 <hci_send_req>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	da01      	bge.n	80053b4 <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 80053b0:	23ff      	movs	r3, #255	; 0xff
 80053b2:	e005      	b.n	80053c0 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 80053b4:	7afb      	ldrb	r3, [r7, #11]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <aci_gap_set_auth_requirement+0xa4>
    return status;
 80053ba:	7afb      	ldrb	r3, [r7, #11]
 80053bc:	e000      	b.n	80053c0 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3744      	adds	r7, #68	; 0x44
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd90      	pop	{r4, r7, pc}

080053c8 <aci_gap_create_connection>:
				     uint8_t peer_bdaddr_type, tBDAddr peer_bdaddr,	
				     uint8_t own_bdaddr_type, uint16_t conn_min_interval,	
				     uint16_t conn_max_interval, uint16_t conn_latency,	
				     uint16_t supervision_timeout, uint16_t min_conn_length, 
				     uint16_t max_conn_length)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b092      	sub	sp, #72	; 0x48
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	607b      	str	r3, [r7, #4]
 80053d0:	4603      	mov	r3, r0
 80053d2:	81fb      	strh	r3, [r7, #14]
 80053d4:	460b      	mov	r3, r1
 80053d6:	81bb      	strh	r3, [r7, #12]
 80053d8:	4613      	mov	r3, r2
 80053da:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  gap_create_connection_cp cp;
  uint8_t status;  

  cp.scanInterval = htobs(scanInterval);
 80053dc:	89fb      	ldrh	r3, [r7, #14]
 80053de:	833b      	strh	r3, [r7, #24]
  cp.scanWindow = htobs(scanWindow);
 80053e0:	89bb      	ldrh	r3, [r7, #12]
 80053e2:	837b      	strh	r3, [r7, #26]
  cp.peer_bdaddr_type = peer_bdaddr_type;
 80053e4:	7afb      	ldrb	r3, [r7, #11]
 80053e6:	773b      	strb	r3, [r7, #28]
  BLUENRG_memcpy(cp.peer_bdaddr, peer_bdaddr, 6);
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	f107 031d 	add.w	r3, r7, #29
 80053ee:	6811      	ldr	r1, [r2, #0]
 80053f0:	6019      	str	r1, [r3, #0]
 80053f2:	8892      	ldrh	r2, [r2, #4]
 80053f4:	809a      	strh	r2, [r3, #4]
  cp.own_bdaddr_type = own_bdaddr_type;
 80053f6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80053fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  cp.conn_min_interval = htobs(conn_min_interval);
 80053fe:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005402:	84bb      	strh	r3, [r7, #36]	; 0x24
  cp.conn_max_interval = htobs(conn_max_interval);
 8005404:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005408:	84fb      	strh	r3, [r7, #38]	; 0x26
  cp.conn_latency = htobs(conn_latency);
 800540a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800540e:	853b      	strh	r3, [r7, #40]	; 0x28
  cp.supervision_timeout = htobs(supervision_timeout);
 8005410:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8005414:	857b      	strh	r3, [r7, #42]	; 0x2a
  cp.min_conn_length = htobs(min_conn_length);
 8005416:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800541a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  cp.max_conn_length = htobs(max_conn_length);
 800541c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005420:	85fb      	strh	r3, [r7, #46]	; 0x2e

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005422:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005426:	2218      	movs	r2, #24
 8005428:	2100      	movs	r1, #0
 800542a:	4618      	mov	r0, r3
 800542c:	f001 fa63 	bl	80068f6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005430:	233f      	movs	r3, #63	; 0x3f
 8005432:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_GAP_CREATE_CONNECTION;
 8005434:	239c      	movs	r3, #156	; 0x9c
 8005436:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &cp;
 8005438:	f107 0318 	add.w	r3, r7, #24
 800543c:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = sizeof(cp);
 800543e:	2318      	movs	r3, #24
 8005440:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.event = EVT_CMD_STATUS;
 8005442:	230f      	movs	r3, #15
 8005444:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 8005446:	f107 0317 	add.w	r3, r7, #23
 800544a:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 800544c:	2301      	movs	r3, #1
 800544e:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 8005450:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005454:	2100      	movs	r1, #0
 8005456:	4618      	mov	r0, r3
 8005458:	f000 fdf4 	bl	8006044 <hci_send_req>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	da01      	bge.n	8005466 <aci_gap_create_connection+0x9e>
    return BLE_STATUS_TIMEOUT;
 8005462:	23ff      	movs	r3, #255	; 0xff
 8005464:	e000      	b.n	8005468 <aci_gap_create_connection+0xa0>

  return status;
 8005466:	7dfb      	ldrb	r3, [r7, #23]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3748      	adds	r7, #72	; 0x48
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b088      	sub	sp, #32
 8005474:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005476:	f107 0308 	add.w	r3, r7, #8
 800547a:	2218      	movs	r2, #24
 800547c:	2100      	movs	r1, #0
 800547e:	4618      	mov	r0, r3
 8005480:	f001 fa39 	bl	80068f6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005484:	233f      	movs	r3, #63	; 0x3f
 8005486:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8005488:	f240 1301 	movw	r3, #257	; 0x101
 800548c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800548e:	1dfb      	adds	r3, r7, #7
 8005490:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005492:	2301      	movs	r3, #1
 8005494:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8005496:	f107 0308 	add.w	r3, r7, #8
 800549a:	2100      	movs	r1, #0
 800549c:	4618      	mov	r0, r3
 800549e:	f000 fdd1 	bl	8006044 <hci_send_req>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	da01      	bge.n	80054ac <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 80054a8:	23ff      	movs	r3, #255	; 0xff
 80054aa:	e000      	b.n	80054ae <aci_gatt_init+0x3e>

  return status;
 80054ac:	79fb      	ldrb	r3, [r7, #7]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3720      	adds	r7, #32
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b090      	sub	sp, #64	; 0x40
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6039      	str	r1, [r7, #0]
 80054be:	4611      	mov	r1, r2
 80054c0:	461a      	mov	r2, r3
 80054c2:	4603      	mov	r3, r0
 80054c4:	71fb      	strb	r3, [r7, #7]
 80054c6:	460b      	mov	r3, r1
 80054c8:	71bb      	strb	r3, [r7, #6]
 80054ca:	4613      	mov	r3, r2
 80054cc:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 80054ce:	2300      	movs	r3, #0
 80054d0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 80054d4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80054d8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80054dc:	4413      	add	r3, r2
 80054de:	79fa      	ldrb	r2, [r7, #7]
 80054e0:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80054e4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80054e8:	3301      	adds	r3, #1
 80054ea:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 80054ee:	79fb      	ldrb	r3, [r7, #7]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d103      	bne.n	80054fc <aci_gatt_add_serv+0x46>
    uuid_len = 2;
 80054f4:	2302      	movs	r3, #2
 80054f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80054fa:	e002      	b.n	8005502 <aci_gatt_add_serv+0x4c>
  }
  else {
    uuid_len = 16;
 80054fc:	2310      	movs	r3, #16
 80054fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8005502:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005506:	f107 020c 	add.w	r2, r7, #12
 800550a:	4413      	add	r3, r2
 800550c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005510:	6839      	ldr	r1, [r7, #0]
 8005512:	4618      	mov	r0, r3
 8005514:	f001 f9e4 	bl	80068e0 <memcpy>
  indx +=  uuid_len;
 8005518:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800551c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005520:	4413      	add	r3, r2
 8005522:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 8005526:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800552a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800552e:	4413      	add	r3, r2
 8005530:	79ba      	ldrb	r2, [r7, #6]
 8005532:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8005536:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800553a:	3301      	adds	r3, #1
 800553c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 8005540:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005544:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005548:	4413      	add	r3, r2
 800554a:	797a      	ldrb	r2, [r7, #5]
 800554c:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8005550:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005554:	3301      	adds	r3, #1
 8005556:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800555a:	f107 0320 	add.w	r3, r7, #32
 800555e:	2203      	movs	r2, #3
 8005560:	2100      	movs	r1, #0
 8005562:	4618      	mov	r0, r3
 8005564:	f001 f9c7 	bl	80068f6 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800556c:	2218      	movs	r2, #24
 800556e:	2100      	movs	r1, #0
 8005570:	4618      	mov	r0, r3
 8005572:	f001 f9c0 	bl	80068f6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005576:	233f      	movs	r3, #63	; 0x3f
 8005578:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 800557a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800557e:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 8005580:	f107 030c 	add.w	r3, r7, #12
 8005584:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 8005586:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800558a:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 800558c:	f107 0320 	add.w	r3, r7, #32
 8005590:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8005592:	2303      	movs	r3, #3
 8005594:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8005596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800559a:	2100      	movs	r1, #0
 800559c:	4618      	mov	r0, r3
 800559e:	f000 fd51 	bl	8006044 <hci_send_req>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	da01      	bge.n	80055ac <aci_gatt_add_serv+0xf6>
    return BLE_STATUS_TIMEOUT;
 80055a8:	23ff      	movs	r3, #255	; 0xff
 80055aa:	e00c      	b.n	80055c6 <aci_gatt_add_serv+0x110>

  if (resp.status) {
 80055ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d002      	beq.n	80055ba <aci_gatt_add_serv+0x104>
    return resp.status;
 80055b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80055b8:	e005      	b.n	80055c6 <aci_gatt_add_serv+0x110>
  }
    
  *serviceHandle = btohs(resp.handle);
 80055ba:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 80055be:	b29a      	uxth	r2, r3
 80055c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055c2:	801a      	strh	r2, [r3, #0]

  return 0;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3740      	adds	r7, #64	; 0x40
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b092      	sub	sp, #72	; 0x48
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	603a      	str	r2, [r7, #0]
 80055d6:	461a      	mov	r2, r3
 80055d8:	4603      	mov	r3, r0
 80055da:	80fb      	strh	r3, [r7, #6]
 80055dc:	460b      	mov	r3, r1
 80055de:	717b      	strb	r3, [r7, #5]
 80055e0:	4613      	mov	r3, r2
 80055e2:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 80055e4:	2300      	movs	r3, #0
 80055e6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 80055ea:	88fb      	ldrh	r3, [r7, #6]
 80055ec:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 80055ee:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80055f2:	f107 020c 	add.w	r2, r7, #12
 80055f6:	4413      	add	r3, r2
 80055f8:	88fa      	ldrh	r2, [r7, #6]
 80055fa:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80055fc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005600:	3302      	adds	r3, #2
 8005602:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 8005606:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800560a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800560e:	4413      	add	r3, r2
 8005610:	797a      	ldrb	r2, [r7, #5]
 8005612:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8005616:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800561a:	3301      	adds	r3, #1
 800561c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8005620:	797b      	ldrb	r3, [r7, #5]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d103      	bne.n	800562e <aci_gatt_add_char+0x60>
    uuid_len = 2;
 8005626:	2302      	movs	r3, #2
 8005628:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800562c:	e002      	b.n	8005634 <aci_gatt_add_char+0x66>
  }
  else {
    uuid_len = 16;
 800562e:	2310      	movs	r3, #16
 8005630:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8005634:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005638:	f107 020c 	add.w	r2, r7, #12
 800563c:	4413      	add	r3, r2
 800563e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8005642:	6839      	ldr	r1, [r7, #0]
 8005644:	4618      	mov	r0, r3
 8005646:	f001 f94b 	bl	80068e0 <memcpy>
  indx +=  uuid_len;
 800564a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800564e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005652:	4413      	add	r3, r2
 8005654:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 8005658:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800565c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005660:	4413      	add	r3, r2
 8005662:	793a      	ldrb	r2, [r7, #4]
 8005664:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8005668:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800566c:	3301      	adds	r3, #1
 800566e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 8005672:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005676:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800567a:	4413      	add	r3, r2
 800567c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8005680:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8005684:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005688:	3301      	adds	r3, #1
 800568a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 800568e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005692:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005696:	4413      	add	r3, r2
 8005698:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800569c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80056a0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80056a4:	3301      	adds	r3, #1
 80056a6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 80056aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80056ae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80056b2:	4413      	add	r3, r2
 80056b4:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 80056b8:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80056bc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80056c0:	3301      	adds	r3, #1
 80056c2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 80056c6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80056ca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80056ce:	4413      	add	r3, r2
 80056d0:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80056d4:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80056d8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80056dc:	3301      	adds	r3, #1
 80056de:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 80056e2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80056e6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80056ea:	4413      	add	r3, r2
 80056ec:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80056f0:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80056f4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80056f8:	3301      	adds	r3, #1
 80056fa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80056fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005702:	2203      	movs	r2, #3
 8005704:	2100      	movs	r1, #0
 8005706:	4618      	mov	r0, r3
 8005708:	f001 f8f5 	bl	80068f6 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800570c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005710:	2218      	movs	r2, #24
 8005712:	2100      	movs	r1, #0
 8005714:	4618      	mov	r0, r3
 8005716:	f001 f8ee 	bl	80068f6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800571a:	233f      	movs	r3, #63	; 0x3f
 800571c:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 800571e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005722:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 8005724:	f107 030c 	add.w	r3, r7, #12
 8005728:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 800572a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800572e:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 8005730:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005734:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8005736:	2303      	movs	r3, #3
 8005738:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 800573a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800573e:	2100      	movs	r1, #0
 8005740:	4618      	mov	r0, r3
 8005742:	f000 fc7f 	bl	8006044 <hci_send_req>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	da01      	bge.n	8005750 <aci_gatt_add_char+0x182>
    return BLE_STATUS_TIMEOUT;
 800574c:	23ff      	movs	r3, #255	; 0xff
 800574e:	e00c      	b.n	800576a <aci_gatt_add_char+0x19c>

  if (resp.status) {
 8005750:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005754:	2b00      	cmp	r3, #0
 8005756:	d002      	beq.n	800575e <aci_gatt_add_char+0x190>
    return resp.status;
 8005758:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800575c:	e005      	b.n	800576a <aci_gatt_add_char+0x19c>
  }
    
  *charHandle = btohs(resp.handle);
 800575e:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 8005762:	b29a      	uxth	r2, r3
 8005764:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005766:	801a      	strh	r2, [r3, #0]

  return 0;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3748      	adds	r7, #72	; 0x48
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8005772:	b590      	push	{r4, r7, lr}
 8005774:	b0ab      	sub	sp, #172	; 0xac
 8005776:	af00      	add	r7, sp, #0
 8005778:	4604      	mov	r4, r0
 800577a:	4608      	mov	r0, r1
 800577c:	4611      	mov	r1, r2
 800577e:	461a      	mov	r2, r3
 8005780:	4623      	mov	r3, r4
 8005782:	80fb      	strh	r3, [r7, #6]
 8005784:	4603      	mov	r3, r0
 8005786:	80bb      	strh	r3, [r7, #4]
 8005788:	460b      	mov	r3, r1
 800578a:	70fb      	strb	r3, [r7, #3]
 800578c:	4613      	mov	r3, r2
 800578e:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8005790:	2300      	movs	r3, #0
 8005792:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8005796:	78bb      	ldrb	r3, [r7, #2]
 8005798:	3306      	adds	r3, #6
 800579a:	2b80      	cmp	r3, #128	; 0x80
 800579c:	dd01      	ble.n	80057a2 <aci_gatt_update_char_value+0x30>
    return BLE_STATUS_INVALID_PARAMS;
 800579e:	2342      	movs	r3, #66	; 0x42
 80057a0:	e076      	b.n	8005890 <aci_gatt_update_char_value+0x11e>

  servHandle = htobs(servHandle);
 80057a2:	88fb      	ldrh	r3, [r7, #6]
 80057a4:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 80057a6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80057aa:	f107 0208 	add.w	r2, r7, #8
 80057ae:	4413      	add	r3, r2
 80057b0:	88fa      	ldrh	r2, [r7, #6]
 80057b2:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80057b4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80057b8:	3302      	adds	r3, #2
 80057ba:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 80057be:	88bb      	ldrh	r3, [r7, #4]
 80057c0:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 80057c2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80057c6:	f107 0208 	add.w	r2, r7, #8
 80057ca:	4413      	add	r3, r2
 80057cc:	88ba      	ldrh	r2, [r7, #4]
 80057ce:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80057d0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80057d4:	3302      	adds	r3, #2
 80057d6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 80057da:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80057de:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80057e2:	4413      	add	r3, r2
 80057e4:	78fa      	ldrb	r2, [r7, #3]
 80057e6:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 80057ea:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80057ee:	3301      	adds	r3, #1
 80057f0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 80057f4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80057f8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80057fc:	4413      	add	r3, r2
 80057fe:	78ba      	ldrb	r2, [r7, #2]
 8005800:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8005804:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005808:	3301      	adds	r3, #1
 800580a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800580e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005812:	f107 0208 	add.w	r2, r7, #8
 8005816:	4413      	add	r3, r2
 8005818:	78ba      	ldrb	r2, [r7, #2]
 800581a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800581e:	4618      	mov	r0, r3
 8005820:	f001 f85e 	bl	80068e0 <memcpy>
  indx +=  charValueLen;
 8005824:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8005828:	78bb      	ldrb	r3, [r7, #2]
 800582a:	4413      	add	r3, r2
 800582c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005830:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005834:	2218      	movs	r2, #24
 8005836:	2100      	movs	r1, #0
 8005838:	4618      	mov	r0, r3
 800583a:	f001 f85c 	bl	80068f6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800583e:	233f      	movs	r3, #63	; 0x3f
 8005840:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8005844:	f44f 7383 	mov.w	r3, #262	; 0x106
 8005848:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 800584c:	f107 0308 	add.w	r3, r7, #8
 8005850:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8005854:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005858:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 800585c:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8005860:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 8005864:	2301      	movs	r3, #1
 8005866:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800586a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800586e:	2100      	movs	r1, #0
 8005870:	4618      	mov	r0, r3
 8005872:	f000 fbe7 	bl	8006044 <hci_send_req>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	da01      	bge.n	8005880 <aci_gatt_update_char_value+0x10e>
    return BLE_STATUS_TIMEOUT;
 800587c:	23ff      	movs	r3, #255	; 0xff
 800587e:	e007      	b.n	8005890 <aci_gatt_update_char_value+0x11e>

  if (status) {
 8005880:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <aci_gatt_update_char_value+0x11c>
    return status;
 8005888:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800588c:	e000      	b.n	8005890 <aci_gatt_update_char_value+0x11e>
  }

  return 0;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	37ac      	adds	r7, #172	; 0xac
 8005894:	46bd      	mov	sp, r7
 8005896:	bd90      	pop	{r4, r7, pc}

08005898 <aci_gatt_disc_charac_by_uuid>:
}

tBleStatus aci_gatt_disc_charac_by_uuid(uint16_t conn_handle, uint16_t start_handle,
				                     uint16_t end_handle, uint8_t charUuidType,
                                                     const uint8_t* charUuid)
{
 8005898:	b590      	push	{r4, r7, lr}
 800589a:	b091      	sub	sp, #68	; 0x44
 800589c:	af00      	add	r7, sp, #0
 800589e:	4604      	mov	r4, r0
 80058a0:	4608      	mov	r0, r1
 80058a2:	4611      	mov	r1, r2
 80058a4:	461a      	mov	r2, r3
 80058a6:	4623      	mov	r3, r4
 80058a8:	80fb      	strh	r3, [r7, #6]
 80058aa:	4603      	mov	r3, r0
 80058ac:	80bb      	strh	r3, [r7, #4]
 80058ae:	460b      	mov	r3, r1
 80058b0:	807b      	strh	r3, [r7, #2]
 80058b2:	4613      	mov	r3, r2
 80058b4:	707b      	strb	r3, [r7, #1]
  struct hci_request rq;
  uint8_t status;
  
  uint8_t buffer[23];
  uint8_t uuid_len;
  uint8_t indx = 0;
 80058b6:	2300      	movs	r3, #0
 80058b8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  conn_handle = htobs(conn_handle);
 80058bc:	88fb      	ldrh	r3, [r7, #6]
 80058be:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 80058c0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80058c4:	f107 020c 	add.w	r2, r7, #12
 80058c8:	4413      	add	r3, r2
 80058ca:	88fa      	ldrh	r2, [r7, #6]
 80058cc:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80058ce:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80058d2:	3302      	adds	r3, #2
 80058d4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  start_handle = htobs(start_handle);
 80058d8:	88bb      	ldrh	r3, [r7, #4]
 80058da:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &start_handle, 2);
 80058dc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80058e0:	f107 020c 	add.w	r2, r7, #12
 80058e4:	4413      	add	r3, r2
 80058e6:	88ba      	ldrh	r2, [r7, #4]
 80058e8:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80058ea:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80058ee:	3302      	adds	r3, #2
 80058f0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  
  end_handle = htobs(end_handle);
 80058f4:	887b      	ldrh	r3, [r7, #2]
 80058f6:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &end_handle, 2);
 80058f8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80058fc:	f107 020c 	add.w	r2, r7, #12
 8005900:	4413      	add	r3, r2
 8005902:	887a      	ldrh	r2, [r7, #2]
 8005904:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8005906:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800590a:	3302      	adds	r3, #2
 800590c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  
  buffer[indx] = charUuidType;
 8005910:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005914:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005918:	4413      	add	r3, r2
 800591a:	787a      	ldrb	r2, [r7, #1]
 800591c:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8005920:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005924:	3301      	adds	r3, #1
 8005926:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(charUuidType == 0x01){
 800592a:	787b      	ldrb	r3, [r7, #1]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d103      	bne.n	8005938 <aci_gatt_disc_charac_by_uuid+0xa0>
    uuid_len = 2;
 8005930:	2302      	movs	r3, #2
 8005932:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005936:	e002      	b.n	800593e <aci_gatt_disc_charac_by_uuid+0xa6>
  }
  else {
    uuid_len = 16;
 8005938:	2310      	movs	r3, #16
 800593a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800593e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005942:	f107 020c 	add.w	r2, r7, #12
 8005946:	4413      	add	r3, r2
 8005948:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800594c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800594e:	4618      	mov	r0, r3
 8005950:	f000 ffc6 	bl	80068e0 <memcpy>
  indx +=  uuid_len;
 8005954:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8005958:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800595c:	4413      	add	r3, r2
 800595e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005966:	2218      	movs	r2, #24
 8005968:	2100      	movs	r1, #0
 800596a:	4618      	mov	r0, r3
 800596c:	f000 ffc3 	bl	80068f6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005970:	233f      	movs	r3, #63	; 0x3f
 8005972:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_DISC_CHARAC_BY_UUID;
 8005974:	f44f 738b 	mov.w	r3, #278	; 0x116
 8005978:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 800597a:	f107 030c 	add.w	r3, r7, #12
 800597e:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 8005980:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005984:	633b      	str	r3, [r7, #48]	; 0x30
  rq.event = EVT_CMD_STATUS;
 8005986:	230f      	movs	r3, #15
 8005988:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rparam = &status;
 800598a:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800598e:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = 1;
 8005990:	2301      	movs	r3, #1
 8005992:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8005994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005998:	2100      	movs	r1, #0
 800599a:	4618      	mov	r0, r3
 800599c:	f000 fb52 	bl	8006044 <hci_send_req>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	da01      	bge.n	80059aa <aci_gatt_disc_charac_by_uuid+0x112>
    return BLE_STATUS_TIMEOUT;
 80059a6:	23ff      	movs	r3, #255	; 0xff
 80059a8:	e001      	b.n	80059ae <aci_gatt_disc_charac_by_uuid+0x116>

  return status;
 80059aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3744      	adds	r7, #68	; 0x44
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd90      	pop	{r4, r7, pc}

080059b6 <aci_gatt_write_charac_descriptor>:
  return status;
}

tBleStatus aci_gatt_write_charac_descriptor(uint16_t conn_handle, uint16_t attr_handle, 
					   uint8_t value_len, uint8_t *attr_value)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b0ac      	sub	sp, #176	; 0xb0
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	607b      	str	r3, [r7, #4]
 80059be:	4603      	mov	r3, r0
 80059c0:	81fb      	strh	r3, [r7, #14]
 80059c2:	460b      	mov	r3, r1
 80059c4:	81bb      	strh	r3, [r7, #12]
 80059c6:	4613      	mov	r3, r2
 80059c8:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 80059ca:	2300      	movs	r3, #0
 80059cc:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 80059d0:	7afb      	ldrb	r3, [r7, #11]
 80059d2:	3305      	adds	r3, #5
 80059d4:	2b80      	cmp	r3, #128	; 0x80
 80059d6:	dd01      	ble.n	80059dc <aci_gatt_write_charac_descriptor+0x26>
    return BLE_STATUS_INVALID_PARAMS;
 80059d8:	2342      	movs	r3, #66	; 0x42
 80059da:	e065      	b.n	8005aa8 <aci_gatt_write_charac_descriptor+0xf2>

  conn_handle = htobs(conn_handle);
 80059dc:	89fb      	ldrh	r3, [r7, #14]
 80059de:	81fb      	strh	r3, [r7, #14]
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 80059e0:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80059e4:	f107 0210 	add.w	r2, r7, #16
 80059e8:	4413      	add	r3, r2
 80059ea:	89fa      	ldrh	r2, [r7, #14]
 80059ec:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80059ee:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80059f2:	3302      	adds	r3, #2
 80059f4:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    
  attr_handle = htobs(attr_handle);
 80059f8:	89bb      	ldrh	r3, [r7, #12]
 80059fa:	81bb      	strh	r3, [r7, #12]
  BLUENRG_memcpy(buffer + indx, &attr_handle, 2);
 80059fc:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8005a00:	f107 0210 	add.w	r2, r7, #16
 8005a04:	4413      	add	r3, r2
 8005a06:	89ba      	ldrh	r2, [r7, #12]
 8005a08:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8005a0a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8005a0e:	3302      	adds	r3, #2
 8005a10:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  buffer[indx] = value_len;
 8005a14:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8005a18:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8005a1c:	4413      	add	r3, r2
 8005a1e:	7afa      	ldrb	r2, [r7, #11]
 8005a20:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8005a24:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8005a28:	3301      	adds	r3, #1
 8005a2a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 8005a2e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8005a32:	f107 0210 	add.w	r2, r7, #16
 8005a36:	4413      	add	r3, r2
 8005a38:	7afa      	ldrb	r2, [r7, #11]
 8005a3a:	6879      	ldr	r1, [r7, #4]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f000 ff4f 	bl	80068e0 <memcpy>
  indx +=  value_len;
 8005a42:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 8005a46:	7afb      	ldrb	r3, [r7, #11]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005a4e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005a52:	2218      	movs	r2, #24
 8005a54:	2100      	movs	r1, #0
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 ff4d 	bl	80068f6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005a5c:	233f      	movs	r3, #63	; 0x3f
 8005a5e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
  rq.ocf = OCF_GATT_WRITE_CHAR_DESCRIPTOR;
 8005a62:	f240 1321 	movw	r3, #289	; 0x121
 8005a66:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
  rq.cparam = (void *)buffer;
 8005a6a:	f107 0310 	add.w	r3, r7, #16
 8005a6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.clen = indx;
 8005a72:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8005a76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  rq.event = EVT_CMD_STATUS; 
 8005a7a:	230f      	movs	r3, #15
 8005a7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8005a80:	f107 0393 	add.w	r3, r7, #147	; 0x93
 8005a84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  rq.rlen = 1;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (hci_send_req(&rq, FALSE) < 0)
 8005a8e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005a92:	2100      	movs	r1, #0
 8005a94:	4618      	mov	r0, r3
 8005a96:	f000 fad5 	bl	8006044 <hci_send_req>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	da01      	bge.n	8005aa4 <aci_gatt_write_charac_descriptor+0xee>
    return BLE_STATUS_TIMEOUT;
 8005aa0:	23ff      	movs	r3, #255	; 0xff
 8005aa2:	e001      	b.n	8005aa8 <aci_gatt_write_charac_descriptor+0xf2>

  return status;
 8005aa4:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	37b0      	adds	r7, #176	; 0xb0
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <aci_gatt_write_without_response>:
  return status;
}

tBleStatus aci_gatt_write_without_response(uint16_t conn_handle, uint16_t attr_handle,
                                              uint8_t val_len, const uint8_t* attr_val)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b092      	sub	sp, #72	; 0x48
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	607b      	str	r3, [r7, #4]
 8005ab8:	4603      	mov	r3, r0
 8005aba:	81fb      	strh	r3, [r7, #14]
 8005abc:	460b      	mov	r3, r1
 8005abe:	81bb      	strh	r3, [r7, #12]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  uint8_t status;
  gatt_write_without_resp_cp cp;
  
  if(val_len > sizeof(cp.attr_val))
 8005ac4:	7afb      	ldrb	r3, [r7, #11]
 8005ac6:	2b14      	cmp	r3, #20
 8005ac8:	d901      	bls.n	8005ace <aci_gatt_write_without_response+0x1e>
    return BLE_STATUS_INVALID_PARAMS;
 8005aca:	2342      	movs	r3, #66	; 0x42
 8005acc:	e031      	b.n	8005b32 <aci_gatt_write_without_response+0x82>

  cp.conn_handle = htobs(conn_handle);
 8005ace:	89fb      	ldrh	r3, [r7, #14]
 8005ad0:	82bb      	strh	r3, [r7, #20]
  cp.attr_handle = htobs(attr_handle);
 8005ad2:	89bb      	ldrh	r3, [r7, #12]
 8005ad4:	82fb      	strh	r3, [r7, #22]
  cp.val_len = val_len;
 8005ad6:	7afb      	ldrb	r3, [r7, #11]
 8005ad8:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(cp.attr_val, attr_val, val_len);
 8005ada:	7afa      	ldrb	r2, [r7, #11]
 8005adc:	f107 0314 	add.w	r3, r7, #20
 8005ae0:	3305      	adds	r3, #5
 8005ae2:	6879      	ldr	r1, [r7, #4]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 fefb 	bl	80068e0 <memcpy>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005aea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005aee:	2218      	movs	r2, #24
 8005af0:	2100      	movs	r1, #0
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 feff 	bl	80068f6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005af8:	233f      	movs	r3, #63	; 0x3f
 8005afa:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_GATT_WRITE_WITHOUT_RESPONSE;
 8005afc:	f240 1323 	movw	r3, #291	; 0x123
 8005b00:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &cp;
 8005b02:	f107 0314 	add.w	r3, r7, #20
 8005b06:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
 8005b08:	7afb      	ldrb	r3, [r7, #11]
 8005b0a:	3305      	adds	r3, #5
 8005b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 8005b0e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8005b12:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 8005b14:	2301      	movs	r3, #1
 8005b16:	647b      	str	r3, [r7, #68]	; 0x44

  if (hci_send_req(&rq, FALSE) < 0)
 8005b18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 fa90 	bl	8006044 <hci_send_req>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	da01      	bge.n	8005b2e <aci_gatt_write_without_response+0x7e>
    return BLE_STATUS_TIMEOUT;
 8005b2a:	23ff      	movs	r3, #255	; 0xff
 8005b2c:	e001      	b.n	8005b32 <aci_gatt_write_without_response+0x82>

  return status;
 8005b2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3748      	adds	r7, #72	; 0x48
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b0aa      	sub	sp, #168	; 0xa8
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	4603      	mov	r3, r0
 8005b42:	603a      	str	r2, [r7, #0]
 8005b44:	71fb      	strb	r3, [r7, #7]
 8005b46:	460b      	mov	r3, r1
 8005b48:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8005b50:	79bb      	ldrb	r3, [r7, #6]
 8005b52:	3302      	adds	r3, #2
 8005b54:	2b80      	cmp	r3, #128	; 0x80
 8005b56:	dd01      	ble.n	8005b5c <aci_hal_write_config_data+0x22>
    return BLE_STATUS_INVALID_PARAMS;
 8005b58:	2342      	movs	r3, #66	; 0x42
 8005b5a:	e052      	b.n	8005c02 <aci_hal_write_config_data+0xc8>

  buffer[indx] = offset;
 8005b5c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005b60:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005b64:	4413      	add	r3, r2
 8005b66:	79fa      	ldrb	r2, [r7, #7]
 8005b68:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8005b6c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005b70:	3301      	adds	r3, #1
 8005b72:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = len;
 8005b76:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005b7a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005b7e:	4413      	add	r3, r2
 8005b80:	79ba      	ldrb	r2, [r7, #6]
 8005b82:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8005b86:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, val, len);
 8005b90:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005b94:	f107 0208 	add.w	r2, r7, #8
 8005b98:	4413      	add	r3, r2
 8005b9a:	79ba      	ldrb	r2, [r7, #6]
 8005b9c:	6839      	ldr	r1, [r7, #0]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 fe9e 	bl	80068e0 <memcpy>
  indx +=  len;
 8005ba4:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8005ba8:	79bb      	ldrb	r3, [r7, #6]
 8005baa:	4413      	add	r3, r2
 8005bac:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005bb0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005bb4:	2218      	movs	r2, #24
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f000 fe9c 	bl	80068f6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005bbe:	233f      	movs	r3, #63	; 0x3f
 8005bc0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 8005bc4:	230c      	movs	r3, #12
 8005bc6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 8005bca:	f107 0308 	add.w	r3, r7, #8
 8005bce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8005bd2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005bd6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8005bda:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8005bde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 8005be2:	2301      	movs	r3, #1
 8005be4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8005be8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005bec:	2100      	movs	r1, #0
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 fa28 	bl	8006044 <hci_send_req>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	da01      	bge.n	8005bfe <aci_hal_write_config_data+0xc4>
    return BLE_STATUS_TIMEOUT;
 8005bfa:	23ff      	movs	r3, #255	; 0xff
 8005bfc:	e001      	b.n	8005c02 <aci_hal_write_config_data+0xc8>

  return status;
 8005bfe:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	37a8      	adds	r7, #168	; 0xa8
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b08a      	sub	sp, #40	; 0x28
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	4603      	mov	r3, r0
 8005c12:	460a      	mov	r2, r1
 8005c14:	71fb      	strb	r3, [r7, #7]
 8005c16:	4613      	mov	r3, r2
 8005c18:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8005c1a:	79fb      	ldrb	r3, [r7, #7]
 8005c1c:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 8005c1e:	79bb      	ldrb	r3, [r7, #6]
 8005c20:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005c22:	f107 0310 	add.w	r3, r7, #16
 8005c26:	2218      	movs	r2, #24
 8005c28:	2100      	movs	r1, #0
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 fe63 	bl	80068f6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005c30:	233f      	movs	r3, #63	; 0x3f
 8005c32:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8005c34:	230f      	movs	r3, #15
 8005c36:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 8005c38:	f107 030c 	add.w	r3, r7, #12
 8005c3c:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8005c3e:	2302      	movs	r3, #2
 8005c40:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8005c42:	f107 030b 	add.w	r3, r7, #11
 8005c46:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 8005c4c:	f107 0310 	add.w	r3, r7, #16
 8005c50:	2100      	movs	r1, #0
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 f9f6 	bl	8006044 <hci_send_req>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	da01      	bge.n	8005c62 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 8005c5e:	23ff      	movs	r3, #255	; 0xff
 8005c60:	e000      	b.n	8005c64 <aci_hal_set_tx_power_level+0x5a>

  return status;
 8005c62:	7afb      	ldrb	r3, [r7, #11]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3728      	adds	r7, #40	; 0x28
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8005c6c:	b590      	push	{r4, r7, lr}
 8005c6e:	b089      	sub	sp, #36	; 0x24
 8005c70:	af02      	add	r7, sp, #8
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8005c76:	f107 0410 	add.w	r4, r7, #16
 8005c7a:	f107 0215 	add.w	r2, r7, #21
 8005c7e:	f107 0112 	add.w	r1, r7, #18
 8005c82:	f107 0016 	add.w	r0, r7, #22
 8005c86:	f107 030e 	add.w	r3, r7, #14
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	4623      	mov	r3, r4
 8005c8e:	f000 f853 	bl	8005d38 <hci_le_read_local_version>
 8005c92:	4603      	mov	r3, r0
 8005c94:	75fb      	strb	r3, [r7, #23]
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d126      	bne.n	8005cea <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 8005c9c:	8a7b      	ldrh	r3, [r7, #18]
 8005c9e:	0a1b      	lsrs	r3, r3, #8
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8005ca8:	8a7b      	ldrh	r3, [r7, #18]
 8005caa:	021b      	lsls	r3, r3, #8
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	881b      	ldrh	r3, [r3, #0]
 8005cb6:	b21a      	sxth	r2, r3
 8005cb8:	89fb      	ldrh	r3, [r7, #14]
 8005cba:	091b      	lsrs	r3, r3, #4
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	011b      	lsls	r3, r3, #4
 8005cc0:	b21b      	sxth	r3, r3
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	b21b      	sxth	r3, r3
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	b21b      	sxth	r3, r3
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	b21a      	sxth	r2, r3
 8005cd6:	89fb      	ldrh	r3, [r7, #14]
 8005cd8:	b21b      	sxth	r3, r3
 8005cda:	f003 030f 	and.w	r3, r3, #15
 8005cde:	b21b      	sxth	r3, r3
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	b21b      	sxth	r3, r3
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8005cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	371c      	adds	r7, #28
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd90      	pop	{r4, r7, pc}

08005cf4 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b088      	sub	sp, #32
 8005cf8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005cfa:	f107 0308 	add.w	r3, r7, #8
 8005cfe:	2218      	movs	r2, #24
 8005d00:	2100      	movs	r1, #0
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 fdf7 	bl	80068f6 <memset>
  rq.ogf = OGF_HOST_CTL;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005d10:	1dfb      	adds	r3, r7, #7
 8005d12:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005d14:	2301      	movs	r3, #1
 8005d16:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8005d18:	f107 0308 	add.w	r3, r7, #8
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 f990 	bl	8006044 <hci_send_req>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	da01      	bge.n	8005d2e <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8005d2a:	23ff      	movs	r3, #255	; 0xff
 8005d2c:	e000      	b.n	8005d30 <hci_reset+0x3c>
  
  return status;  
 8005d2e:	79fb      	ldrb	r3, [r7, #7]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3720      	adds	r7, #32
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b08e      	sub	sp, #56	; 0x38
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
 8005d44:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005d46:	f107 0314 	add.w	r3, r7, #20
 8005d4a:	2209      	movs	r2, #9
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 fdd1 	bl	80068f6 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005d54:	f107 0320 	add.w	r3, r7, #32
 8005d58:	2218      	movs	r2, #24
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f000 fdca 	bl	80068f6 <memset>
  rq.ogf = OGF_INFO_PARAM;
 8005d62:	2304      	movs	r3, #4
 8005d64:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8005d66:	2301      	movs	r3, #1
 8005d68:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 8005d72:	f107 0314 	add.w	r3, r7, #20
 8005d76:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8005d78:	2309      	movs	r3, #9
 8005d7a:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8005d7c:	f107 0320 	add.w	r3, r7, #32
 8005d80:	2100      	movs	r1, #0
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 f95e 	bl	8006044 <hci_send_req>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	da01      	bge.n	8005d92 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8005d8e:	23ff      	movs	r3, #255	; 0xff
 8005d90:	e018      	b.n	8005dc4 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8005d92:	7d3b      	ldrb	r3, [r7, #20]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <hci_le_read_local_version+0x64>
    return resp.status;
 8005d98:	7d3b      	ldrb	r3, [r7, #20]
 8005d9a:	e013      	b.n	8005dc4 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 8005d9c:	7d7a      	ldrb	r2, [r7, #21]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8005da2:	8afa      	ldrh	r2, [r7, #22]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8005da8:	7e3a      	ldrb	r2, [r7, #24]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8005dae:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8005db8:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dc0:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3738      	adds	r7, #56	; 0x38
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b092      	sub	sp, #72	; 0x48
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	6039      	str	r1, [r7, #0]
 8005dd6:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8005dd8:	f107 0310 	add.w	r3, r7, #16
 8005ddc:	2220      	movs	r2, #32
 8005dde:	2100      	movs	r1, #0
 8005de0:	4618      	mov	r0, r3
 8005de2:	f000 fd88 	bl	80068f6 <memset>
  scan_resp_cp.length = length;
 8005de6:	79fb      	ldrb	r3, [r7, #7]
 8005de8:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8005dea:	79fb      	ldrb	r3, [r7, #7]
 8005dec:	2b1f      	cmp	r3, #31
 8005dee:	bf28      	it	cs
 8005df0:	231f      	movcs	r3, #31
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	461a      	mov	r2, r3
 8005df6:	f107 0310 	add.w	r3, r7, #16
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	6839      	ldr	r1, [r7, #0]
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 fd6e 	bl	80068e0 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005e04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005e08:	2218      	movs	r2, #24
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f000 fd72 	bl	80068f6 <memset>
  rq.ogf = OGF_LE_CTL;
 8005e12:	2308      	movs	r3, #8
 8005e14:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8005e16:	2309      	movs	r3, #9
 8005e18:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 8005e1a:	f107 0310 	add.w	r3, r7, #16
 8005e1e:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8005e20:	2320      	movs	r3, #32
 8005e22:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 8005e24:	f107 030f 	add.w	r3, r7, #15
 8005e28:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 8005e2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005e32:	2100      	movs	r1, #0
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 f905 	bl	8006044 <hci_send_req>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	da01      	bge.n	8005e44 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 8005e40:	23ff      	movs	r3, #255	; 0xff
 8005e42:	e000      	b.n	8005e46 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3748      	adds	r7, #72	; 0x48
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b085      	sub	sp, #20
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	3308      	adds	r3, #8
 8005e5a:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	2b04      	cmp	r3, #4
 8005e62:	d001      	beq.n	8005e68 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8005e64:	2301      	movs	r3, #1
 8005e66:	e00c      	b.n	8005e82 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	3302      	adds	r3, #2
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	461a      	mov	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8005e76:	3b03      	subs	r3, #3
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d001      	beq.n	8005e80 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	e000      	b.n	8005e82 <verify_packet+0x34>
  
  return 0;      
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
	...

08005e90 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b0a6      	sub	sp, #152	; 0x98
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	607b      	str	r3, [r7, #4]
 8005e98:	4603      	mov	r3, r0
 8005e9a:	81fb      	strh	r3, [r7, #14]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	81bb      	strh	r3, [r7, #12]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8005ea4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005ea8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eac:	b21a      	sxth	r2, r3
 8005eae:	89fb      	ldrh	r3, [r7, #14]
 8005eb0:	029b      	lsls	r3, r3, #10
 8005eb2:	b21b      	sxth	r3, r3
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	b21b      	sxth	r3, r3
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8005ebc:	7afb      	ldrb	r3, [r7, #11]
 8005ebe:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8005ec4:	f107 0318 	add.w	r3, r7, #24
 8005ec8:	3301      	adds	r3, #1
 8005eca:	461a      	mov	r2, r3
 8005ecc:	f107 0314 	add.w	r3, r7, #20
 8005ed0:	8819      	ldrh	r1, [r3, #0]
 8005ed2:	789b      	ldrb	r3, [r3, #2]
 8005ed4:	8011      	strh	r1, [r2, #0]
 8005ed6:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8005ed8:	f107 0318 	add.w	r3, r7, #24
 8005edc:	3304      	adds	r3, #4
 8005ede:	7afa      	ldrb	r2, [r7, #11]
 8005ee0:	6879      	ldr	r1, [r7, #4]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 fcfc 	bl	80068e0 <memcpy>
  
  if (hciContext.io.Send)
 8005ee8:	4b08      	ldr	r3, [pc, #32]	; (8005f0c <send_cmd+0x7c>)
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d009      	beq.n	8005f04 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8005ef0:	4b06      	ldr	r3, [pc, #24]	; (8005f0c <send_cmd+0x7c>)
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	7afa      	ldrb	r2, [r7, #11]
 8005ef6:	b292      	uxth	r2, r2
 8005ef8:	3204      	adds	r2, #4
 8005efa:	b291      	uxth	r1, r2
 8005efc:	f107 0218 	add.w	r2, r7, #24
 8005f00:	4610      	mov	r0, r2
 8005f02:	4798      	blx	r3
  }
}
 8005f04:	bf00      	nop
 8005f06:	3798      	adds	r7, #152	; 0x98
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	200005e8 	.word	0x200005e8

08005f10 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8005f1a:	e00a      	b.n	8005f32 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8005f1c:	f107 030c 	add.w	r3, r7, #12
 8005f20:	4619      	mov	r1, r3
 8005f22:	6838      	ldr	r0, [r7, #0]
 8005f24:	f000 fada 	bl	80064dc <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 fa49 	bl	80063c4 <list_insert_head>
  while (!list_is_empty(src_list))
 8005f32:	6838      	ldr	r0, [r7, #0]
 8005f34:	f000 fa26 	bl	8006384 <list_is_empty>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d0ee      	beq.n	8005f1c <move_list+0xc>
  }
}
 8005f3e:	bf00      	nop
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
	...

08005f48 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8005f4e:	e009      	b.n	8005f64 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8005f50:	1d3b      	adds	r3, r7, #4
 8005f52:	4619      	mov	r1, r3
 8005f54:	4808      	ldr	r0, [pc, #32]	; (8005f78 <free_event_list+0x30>)
 8005f56:	f000 fa9c 	bl	8006492 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	4807      	ldr	r0, [pc, #28]	; (8005f7c <free_event_list+0x34>)
 8005f60:	f000 fa54 	bl	800640c <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8005f64:	4805      	ldr	r0, [pc, #20]	; (8005f7c <free_event_list+0x34>)
 8005f66:	f000 fade 	bl	8006526 <list_get_size>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	ddef      	ble.n	8005f50 <free_event_list+0x8>
  }
}
 8005f70:	bf00      	nop
 8005f72:	3708      	adds	r7, #8
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	20000714 	.word	0x20000714
 8005f7c:	2000070c 	.word	0x2000070c

08005f80 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d002      	beq.n	8005f96 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8005f90:	4a18      	ldr	r2, [pc, #96]	; (8005ff4 <hci_init+0x74>)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8005f96:	4818      	ldr	r0, [pc, #96]	; (8005ff8 <hci_init+0x78>)
 8005f98:	f000 f9e4 	bl	8006364 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8005f9c:	4817      	ldr	r0, [pc, #92]	; (8005ffc <hci_init+0x7c>)
 8005f9e:	f000 f9e1 	bl	8006364 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8005fa2:	f7fb f989 	bl	80012b8 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	73fb      	strb	r3, [r7, #15]
 8005faa:	e00c      	b.n	8005fc6 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8005fac:	7bfb      	ldrb	r3, [r7, #15]
 8005fae:	228c      	movs	r2, #140	; 0x8c
 8005fb0:	fb02 f303 	mul.w	r3, r2, r3
 8005fb4:	4a12      	ldr	r2, [pc, #72]	; (8006000 <hci_init+0x80>)
 8005fb6:	4413      	add	r3, r2
 8005fb8:	4619      	mov	r1, r3
 8005fba:	480f      	ldr	r0, [pc, #60]	; (8005ff8 <hci_init+0x78>)
 8005fbc:	f000 fa26 	bl	800640c <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	73fb      	strb	r3, [r7, #15]
 8005fc6:	7bfb      	ldrb	r3, [r7, #15]
 8005fc8:	2b04      	cmp	r3, #4
 8005fca:	d9ef      	bls.n	8005fac <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8005fcc:	4b09      	ldr	r3, [pc, #36]	; (8005ff4 <hci_init+0x74>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d003      	beq.n	8005fdc <hci_init+0x5c>
 8005fd4:	4b07      	ldr	r3, [pc, #28]	; (8005ff4 <hci_init+0x74>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2000      	movs	r0, #0
 8005fda:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8005fdc:	4b05      	ldr	r3, [pc, #20]	; (8005ff4 <hci_init+0x74>)
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d002      	beq.n	8005fea <hci_init+0x6a>
 8005fe4:	4b03      	ldr	r3, [pc, #12]	; (8005ff4 <hci_init+0x74>)
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	4798      	blx	r3
}
 8005fea:	bf00      	nop
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	200005e8 	.word	0x200005e8
 8005ff8:	2000070c 	.word	0x2000070c
 8005ffc:	20000714 	.word	0x20000714
 8006000:	2000032c 	.word	0x2000032c

08006004 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a0b      	ldr	r2, [pc, #44]	; (8006040 <hci_register_io_bus+0x3c>)
 8006012:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	4a09      	ldr	r2, [pc, #36]	; (8006040 <hci_register_io_bus+0x3c>)
 800601a:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	4a07      	ldr	r2, [pc, #28]	; (8006040 <hci_register_io_bus+0x3c>)
 8006022:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	4a05      	ldr	r2, [pc, #20]	; (8006040 <hci_register_io_bus+0x3c>)
 800602a:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	4a03      	ldr	r2, [pc, #12]	; (8006040 <hci_register_io_bus+0x3c>)
 8006032:	6093      	str	r3, [r2, #8]
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	200005e8 	.word	0x200005e8

08006044 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b08e      	sub	sp, #56	; 0x38
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	460b      	mov	r3, r1
 800604e:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	885b      	ldrh	r3, [r3, #2]
 8006054:	b21b      	sxth	r3, r3
 8006056:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800605a:	b21a      	sxth	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	029b      	lsls	r3, r3, #10
 8006062:	b21b      	sxth	r3, r3
 8006064:	4313      	orrs	r3, r2
 8006066:	b21b      	sxth	r3, r3
 8006068:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800606a:	2300      	movs	r3, #0
 800606c:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800606e:	f107 0308 	add.w	r3, r7, #8
 8006072:	4618      	mov	r0, r3
 8006074:	f000 f976 	bl	8006364 <list_init_head>

  free_event_list();
 8006078:	f7ff ff66 	bl	8005f48 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	8818      	ldrh	r0, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	8859      	ldrh	r1, [r3, #2]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	b2da      	uxtb	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f7ff feff 	bl	8005e90 <send_cmd>
  
  if (async)
 8006092:	78fb      	ldrb	r3, [r7, #3]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d001      	beq.n	800609c <hci_send_req+0x58>
  {
    return 0;
 8006098:	2300      	movs	r3, #0
 800609a:	e0e2      	b.n	8006262 <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800609c:	f7fb ff30 	bl	8001f00 <HAL_GetTick>
 80060a0:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80060a2:	f7fb ff2d 	bl	8001f00 <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060b0:	f200 80b3 	bhi.w	800621a <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 80060b4:	486d      	ldr	r0, [pc, #436]	; (800626c <hci_send_req+0x228>)
 80060b6:	f000 f965 	bl	8006384 <list_is_empty>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d000      	beq.n	80060c2 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80060c0:	e7ef      	b.n	80060a2 <hci_send_req+0x5e>
      {
        break;
 80060c2:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 80060c4:	f107 0310 	add.w	r3, r7, #16
 80060c8:	4619      	mov	r1, r3
 80060ca:	4868      	ldr	r0, [pc, #416]	; (800626c <hci_send_req+0x228>)
 80060cc:	f000 f9e1 	bl	8006492 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	3308      	adds	r3, #8
 80060d4:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 80060d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	2b04      	cmp	r3, #4
 80060dc:	d17a      	bne.n	80061d4 <hci_send_req+0x190>
    {
      event_pckt = (void *)(hci_hdr->data);
 80060de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e0:	3301      	adds	r3, #1
 80060e2:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	3308      	adds	r3, #8
 80060e8:	3303      	adds	r3, #3
 80060ea:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80060f2:	3b03      	subs	r3, #3
 80060f4:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 80060f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b0f      	cmp	r3, #15
 80060fc:	d00a      	beq.n	8006114 <hci_send_req+0xd0>
 80060fe:	2b0f      	cmp	r3, #15
 8006100:	dc02      	bgt.n	8006108 <hci_send_req+0xc4>
 8006102:	2b0e      	cmp	r3, #14
 8006104:	d028      	beq.n	8006158 <hci_send_req+0x114>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8006106:	e06a      	b.n	80061de <hci_send_req+0x19a>
      switch (event_pckt->evt) 
 8006108:	2b10      	cmp	r3, #16
 800610a:	f000 8088 	beq.w	800621e <hci_send_req+0x1da>
 800610e:	2b3e      	cmp	r3, #62	; 0x3e
 8006110:	d042      	beq.n	8006198 <hci_send_req+0x154>
        break;
 8006112:	e064      	b.n	80061de <hci_send_req+0x19a>
        cs = (void *) ptr;
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	61bb      	str	r3, [r7, #24]
        if (cs->opcode != opcode)
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	885b      	ldrh	r3, [r3, #2]
 800611c:	b29b      	uxth	r3, r3
 800611e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006120:	429a      	cmp	r2, r3
 8006122:	d17e      	bne.n	8006222 <hci_send_req+0x1de>
        if (r->event != EVT_CMD_STATUS) {
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	2b0f      	cmp	r3, #15
 800612a:	d004      	beq.n	8006136 <hci_send_req+0xf2>
          if (cs->status) {
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d051      	beq.n	80061d8 <hci_send_req+0x194>
            goto failed;
 8006134:	e078      	b.n	8006228 <hci_send_req+0x1e4>
        r->rlen = MIN(len, r->rlen);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	695a      	ldr	r2, [r3, #20]
 800613a:	6a3b      	ldr	r3, [r7, #32]
 800613c:	429a      	cmp	r2, r3
 800613e:	bf28      	it	cs
 8006140:	461a      	movcs	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6918      	ldr	r0, [r3, #16]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	461a      	mov	r2, r3
 8006150:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006152:	f000 fbc5 	bl	80068e0 <memcpy>
        goto done;
 8006156:	e078      	b.n	800624a <hci_send_req+0x206>
        cc = (void *) ptr;
 8006158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615a:	617b      	str	r3, [r7, #20]
        if (cc->opcode != opcode)
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006162:	b29b      	uxth	r3, r3
 8006164:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006166:	429a      	cmp	r2, r3
 8006168:	d15d      	bne.n	8006226 <hci_send_req+0x1e2>
        ptr += EVT_CMD_COMPLETE_SIZE;
 800616a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616c:	3303      	adds	r3, #3
 800616e:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8006170:	6a3b      	ldr	r3, [r7, #32]
 8006172:	3b03      	subs	r3, #3
 8006174:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	695a      	ldr	r2, [r3, #20]
 800617a:	6a3b      	ldr	r3, [r7, #32]
 800617c:	429a      	cmp	r2, r3
 800617e:	bf28      	it	cs
 8006180:	461a      	movcs	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6918      	ldr	r0, [r3, #16]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	461a      	mov	r2, r3
 8006190:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006192:	f000 fba5 	bl	80068e0 <memcpy>
        goto done;
 8006196:	e058      	b.n	800624a <hci_send_req+0x206>
        me = (void *) ptr;
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	61fb      	str	r3, [r7, #28]
        if (me->subevent != r->event)
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	461a      	mov	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d118      	bne.n	80061dc <hci_send_req+0x198>
        len -= 1;
 80061aa:	6a3b      	ldr	r3, [r7, #32]
 80061ac:	3b01      	subs	r3, #1
 80061ae:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	695a      	ldr	r2, [r3, #20]
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	bf28      	it	cs
 80061ba:	461a      	movcs	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6918      	ldr	r0, [r3, #16]
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	1c59      	adds	r1, r3, #1
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	461a      	mov	r2, r3
 80061ce:	f000 fb87 	bl	80068e0 <memcpy>
        goto done;
 80061d2:	e03a      	b.n	800624a <hci_send_req+0x206>
      }
    }
 80061d4:	bf00      	nop
 80061d6:	e002      	b.n	80061de <hci_send_req+0x19a>
          break;
 80061d8:	bf00      	nop
 80061da:	e000      	b.n	80061de <hci_send_req+0x19a>
          break;
 80061dc:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 80061de:	4824      	ldr	r0, [pc, #144]	; (8006270 <hci_send_req+0x22c>)
 80061e0:	f000 f8d0 	bl	8006384 <list_is_empty>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00d      	beq.n	8006206 <hci_send_req+0x1c2>
 80061ea:	4820      	ldr	r0, [pc, #128]	; (800626c <hci_send_req+0x228>)
 80061ec:	f000 f8ca 	bl	8006384 <list_is_empty>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d007      	beq.n	8006206 <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	4619      	mov	r1, r3
 80061fa:	481d      	ldr	r0, [pc, #116]	; (8006270 <hci_send_req+0x22c>)
 80061fc:	f000 f906 	bl	800640c <list_insert_tail>
      hciReadPacket=NULL;
 8006200:	2300      	movs	r3, #0
 8006202:	613b      	str	r3, [r7, #16]
 8006204:	e008      	b.n	8006218 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	f107 0308 	add.w	r3, r7, #8
 800620c:	4611      	mov	r1, r2
 800620e:	4618      	mov	r0, r3
 8006210:	f000 f8fc 	bl	800640c <list_insert_tail>
      hciReadPacket=NULL;
 8006214:	2300      	movs	r3, #0
 8006216:	613b      	str	r3, [r7, #16]
  {
 8006218:	e740      	b.n	800609c <hci_send_req+0x58>
        goto failed;
 800621a:	bf00      	nop
 800621c:	e004      	b.n	8006228 <hci_send_req+0x1e4>
        goto failed;
 800621e:	bf00      	nop
 8006220:	e002      	b.n	8006228 <hci_send_req+0x1e4>
          goto failed;
 8006222:	bf00      	nop
 8006224:	e000      	b.n	8006228 <hci_send_req+0x1e4>
          goto failed;
 8006226:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d004      	beq.n	8006238 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	4619      	mov	r1, r3
 8006232:	480f      	ldr	r0, [pc, #60]	; (8006270 <hci_send_req+0x22c>)
 8006234:	f000 f8c6 	bl	80063c4 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8006238:	f107 0308 	add.w	r3, r7, #8
 800623c:	4619      	mov	r1, r3
 800623e:	480b      	ldr	r0, [pc, #44]	; (800626c <hci_send_req+0x228>)
 8006240:	f7ff fe66 	bl	8005f10 <move_list>

  return -1;
 8006244:	f04f 33ff 	mov.w	r3, #4294967295
 8006248:	e00b      	b.n	8006262 <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	4619      	mov	r1, r3
 800624e:	4808      	ldr	r0, [pc, #32]	; (8006270 <hci_send_req+0x22c>)
 8006250:	f000 f8b8 	bl	80063c4 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8006254:	f107 0308 	add.w	r3, r7, #8
 8006258:	4619      	mov	r1, r3
 800625a:	4804      	ldr	r0, [pc, #16]	; (800626c <hci_send_req+0x228>)
 800625c:	f7ff fe58 	bl	8005f10 <move_list>

  return 0;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3738      	adds	r7, #56	; 0x38
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	20000714 	.word	0x20000714
 8006270:	2000070c 	.word	0x2000070c

08006274 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800627a:	2300      	movs	r3, #0
 800627c:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800627e:	e013      	b.n	80062a8 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8006280:	1d3b      	adds	r3, r7, #4
 8006282:	4619      	mov	r1, r3
 8006284:	480d      	ldr	r0, [pc, #52]	; (80062bc <hci_user_evt_proc+0x48>)
 8006286:	f000 f904 	bl	8006492 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800628a:	4b0d      	ldr	r3, [pc, #52]	; (80062c0 <hci_user_evt_proc+0x4c>)
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d005      	beq.n	800629e <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8006292:	4b0b      	ldr	r3, [pc, #44]	; (80062c0 <hci_user_evt_proc+0x4c>)
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	3208      	adds	r2, #8
 800629a:	4610      	mov	r0, r2
 800629c:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4619      	mov	r1, r3
 80062a2:	4808      	ldr	r0, [pc, #32]	; (80062c4 <hci_user_evt_proc+0x50>)
 80062a4:	f000 f8b2 	bl	800640c <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80062a8:	4804      	ldr	r0, [pc, #16]	; (80062bc <hci_user_evt_proc+0x48>)
 80062aa:	f000 f86b 	bl	8006384 <list_is_empty>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d0e5      	beq.n	8006280 <hci_user_evt_proc+0xc>
  }
}
 80062b4:	bf00      	nop
 80062b6:	3708      	adds	r7, #8
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	20000714 	.word	0x20000714
 80062c0:	200005e8 	.word	0x200005e8
 80062c4:	2000070c 	.word	0x2000070c

080062c8 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 80062d0:	2300      	movs	r3, #0
 80062d2:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 80062d4:	2300      	movs	r3, #0
 80062d6:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 80062d8:	481f      	ldr	r0, [pc, #124]	; (8006358 <hci_notify_asynch_evt+0x90>)
 80062da:	f000 f853 	bl	8006384 <list_is_empty>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d132      	bne.n	800634a <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 80062e4:	f107 030c 	add.w	r3, r7, #12
 80062e8:	4619      	mov	r1, r3
 80062ea:	481b      	ldr	r0, [pc, #108]	; (8006358 <hci_notify_asynch_evt+0x90>)
 80062ec:	f000 f8d1 	bl	8006492 <list_remove_head>
    
    if (hciContext.io.Receive)
 80062f0:	4b1a      	ldr	r3, [pc, #104]	; (800635c <hci_notify_asynch_evt+0x94>)
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d02a      	beq.n	800634e <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 80062f8:	4b18      	ldr	r3, [pc, #96]	; (800635c <hci_notify_asynch_evt+0x94>)
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	3208      	adds	r2, #8
 8006300:	2180      	movs	r1, #128	; 0x80
 8006302:	4610      	mov	r0, r2
 8006304:	4798      	blx	r3
 8006306:	4603      	mov	r3, r0
 8006308:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800630a:	7cfb      	ldrb	r3, [r7, #19]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d016      	beq.n	800633e <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	7cfa      	ldrb	r2, [r7, #19]
 8006314:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff fd97 	bl	8005e4e <verify_packet>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d105      	bne.n	8006332 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	4619      	mov	r1, r3
 800632a:	480d      	ldr	r0, [pc, #52]	; (8006360 <hci_notify_asynch_evt+0x98>)
 800632c:	f000 f86e 	bl	800640c <list_insert_tail>
 8006330:	e00d      	b.n	800634e <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	4619      	mov	r1, r3
 8006336:	4808      	ldr	r0, [pc, #32]	; (8006358 <hci_notify_asynch_evt+0x90>)
 8006338:	f000 f844 	bl	80063c4 <list_insert_head>
 800633c:	e007      	b.n	800634e <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	4619      	mov	r1, r3
 8006342:	4805      	ldr	r0, [pc, #20]	; (8006358 <hci_notify_asynch_evt+0x90>)
 8006344:	f000 f83e 	bl	80063c4 <list_insert_head>
 8006348:	e001      	b.n	800634e <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800634a:	2301      	movs	r3, #1
 800634c:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800634e:	697b      	ldr	r3, [r7, #20]

}
 8006350:	4618      	mov	r0, r3
 8006352:	3718      	adds	r7, #24
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	2000070c 	.word	0x2000070c
 800635c:	200005e8 	.word	0x200005e8
 8006360:	20000714 	.word	0x20000714

08006364 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	605a      	str	r2, [r3, #4]
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800638c:	f3ef 8310 	mrs	r3, PRIMASK
 8006390:	60fb      	str	r3, [r7, #12]
  return(result);
 8006392:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006394:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006396:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d102      	bne.n	80063a8 <list_is_empty+0x24>
  {
    return_value = 1;
 80063a2:	2301      	movs	r3, #1
 80063a4:	75fb      	strb	r3, [r7, #23]
 80063a6:	e001      	b.n	80063ac <list_is_empty+0x28>
  }
  else
  {
    return_value = 0;
 80063a8:	2300      	movs	r3, #0
 80063aa:	75fb      	strb	r3, [r7, #23]
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 80063b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	371c      	adds	r7, #28
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063ce:	f3ef 8310 	mrs	r3, PRIMASK
 80063d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80063d4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80063d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80063d8:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	683a      	ldr	r2, [r7, #0]
 80063f4:	605a      	str	r2, [r3, #4]
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8006400:	bf00      	nop
 8006402:	371c      	adds	r7, #28
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800640c:	b480      	push	{r7}
 800640e:	b087      	sub	sp, #28
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006416:	f3ef 8310 	mrs	r3, PRIMASK
 800641a:	60fb      	str	r3, [r7, #12]
  return(result);
 800641c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800641e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006420:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8006448:	bf00      	nop
 800644a:	371c      	adds	r7, #28
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8006454:	b480      	push	{r7}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800645c:	f3ef 8310 	mrs	r3, PRIMASK
 8006460:	60fb      	str	r3, [r7, #12]
  return(result);
 8006462:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006464:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006466:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	6812      	ldr	r2, [r2, #0]
 8006470:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	6852      	ldr	r2, [r2, #4]
 800647a:	605a      	str	r2, [r3, #4]
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8006486:	bf00      	nop
 8006488:	371c      	adds	r7, #28
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b086      	sub	sp, #24
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800649c:	f3ef 8310 	mrs	r3, PRIMASK
 80064a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80064a2:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80064a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80064a6:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7ff ffcd 	bl	8006454 <list_remove_node>
  (*node)->next = NULL;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2200      	movs	r2, #0
 80064c0:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2200      	movs	r2, #0
 80064c8:	605a      	str	r2, [r3, #4]
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80064d4:	bf00      	nop
 80064d6:	3718      	adds	r7, #24
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064e6:	f3ef 8310 	mrs	r3, PRIMASK
 80064ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80064ec:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80064ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80064f0:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	4618      	mov	r0, r3
 8006500:	f7ff ffa8 	bl	8006454 <list_remove_node>
  (*node)->next = NULL;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2200      	movs	r2, #0
 800650a:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2200      	movs	r2, #0
 8006512:	605a      	str	r2, [r3, #4]
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800651e:	bf00      	nop
 8006520:	3718      	adds	r7, #24
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8006526:	b480      	push	{r7}
 8006528:	b089      	sub	sp, #36	; 0x24
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  int size = 0;
 800652e:	2300      	movs	r3, #0
 8006530:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006532:	f3ef 8310 	mrs	r3, PRIMASK
 8006536:	613b      	str	r3, [r7, #16]
  return(result);
 8006538:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800653a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800653c:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8006544:	e005      	b.n	8006552 <list_get_size+0x2c>
  {
    size++;
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	3301      	adds	r3, #1
 800654a:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	429a      	cmp	r2, r3
 8006558:	d1f5      	bne.n	8006546 <list_get_size+0x20>
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8006564:	69fb      	ldr	r3, [r7, #28]
}
 8006566:	4618      	mov	r0, r3
 8006568:	3724      	adds	r7, #36	; 0x24
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
	...

08006574 <__errno>:
 8006574:	4b01      	ldr	r3, [pc, #4]	; (800657c <__errno+0x8>)
 8006576:	6818      	ldr	r0, [r3, #0]
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	20000024 	.word	0x20000024

08006580 <__sflush_r>:
 8006580:	898a      	ldrh	r2, [r1, #12]
 8006582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006586:	4605      	mov	r5, r0
 8006588:	0710      	lsls	r0, r2, #28
 800658a:	460c      	mov	r4, r1
 800658c:	d458      	bmi.n	8006640 <__sflush_r+0xc0>
 800658e:	684b      	ldr	r3, [r1, #4]
 8006590:	2b00      	cmp	r3, #0
 8006592:	dc05      	bgt.n	80065a0 <__sflush_r+0x20>
 8006594:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006596:	2b00      	cmp	r3, #0
 8006598:	dc02      	bgt.n	80065a0 <__sflush_r+0x20>
 800659a:	2000      	movs	r0, #0
 800659c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065a2:	2e00      	cmp	r6, #0
 80065a4:	d0f9      	beq.n	800659a <__sflush_r+0x1a>
 80065a6:	2300      	movs	r3, #0
 80065a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80065ac:	682f      	ldr	r7, [r5, #0]
 80065ae:	6a21      	ldr	r1, [r4, #32]
 80065b0:	602b      	str	r3, [r5, #0]
 80065b2:	d032      	beq.n	800661a <__sflush_r+0x9a>
 80065b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80065b6:	89a3      	ldrh	r3, [r4, #12]
 80065b8:	075a      	lsls	r2, r3, #29
 80065ba:	d505      	bpl.n	80065c8 <__sflush_r+0x48>
 80065bc:	6863      	ldr	r3, [r4, #4]
 80065be:	1ac0      	subs	r0, r0, r3
 80065c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80065c2:	b10b      	cbz	r3, 80065c8 <__sflush_r+0x48>
 80065c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80065c6:	1ac0      	subs	r0, r0, r3
 80065c8:	2300      	movs	r3, #0
 80065ca:	4602      	mov	r2, r0
 80065cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065ce:	6a21      	ldr	r1, [r4, #32]
 80065d0:	4628      	mov	r0, r5
 80065d2:	47b0      	blx	r6
 80065d4:	1c43      	adds	r3, r0, #1
 80065d6:	89a3      	ldrh	r3, [r4, #12]
 80065d8:	d106      	bne.n	80065e8 <__sflush_r+0x68>
 80065da:	6829      	ldr	r1, [r5, #0]
 80065dc:	291d      	cmp	r1, #29
 80065de:	d848      	bhi.n	8006672 <__sflush_r+0xf2>
 80065e0:	4a29      	ldr	r2, [pc, #164]	; (8006688 <__sflush_r+0x108>)
 80065e2:	40ca      	lsrs	r2, r1
 80065e4:	07d6      	lsls	r6, r2, #31
 80065e6:	d544      	bpl.n	8006672 <__sflush_r+0xf2>
 80065e8:	2200      	movs	r2, #0
 80065ea:	6062      	str	r2, [r4, #4]
 80065ec:	04d9      	lsls	r1, r3, #19
 80065ee:	6922      	ldr	r2, [r4, #16]
 80065f0:	6022      	str	r2, [r4, #0]
 80065f2:	d504      	bpl.n	80065fe <__sflush_r+0x7e>
 80065f4:	1c42      	adds	r2, r0, #1
 80065f6:	d101      	bne.n	80065fc <__sflush_r+0x7c>
 80065f8:	682b      	ldr	r3, [r5, #0]
 80065fa:	b903      	cbnz	r3, 80065fe <__sflush_r+0x7e>
 80065fc:	6560      	str	r0, [r4, #84]	; 0x54
 80065fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006600:	602f      	str	r7, [r5, #0]
 8006602:	2900      	cmp	r1, #0
 8006604:	d0c9      	beq.n	800659a <__sflush_r+0x1a>
 8006606:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800660a:	4299      	cmp	r1, r3
 800660c:	d002      	beq.n	8006614 <__sflush_r+0x94>
 800660e:	4628      	mov	r0, r5
 8006610:	f000 f97a 	bl	8006908 <_free_r>
 8006614:	2000      	movs	r0, #0
 8006616:	6360      	str	r0, [r4, #52]	; 0x34
 8006618:	e7c0      	b.n	800659c <__sflush_r+0x1c>
 800661a:	2301      	movs	r3, #1
 800661c:	4628      	mov	r0, r5
 800661e:	47b0      	blx	r6
 8006620:	1c41      	adds	r1, r0, #1
 8006622:	d1c8      	bne.n	80065b6 <__sflush_r+0x36>
 8006624:	682b      	ldr	r3, [r5, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d0c5      	beq.n	80065b6 <__sflush_r+0x36>
 800662a:	2b1d      	cmp	r3, #29
 800662c:	d001      	beq.n	8006632 <__sflush_r+0xb2>
 800662e:	2b16      	cmp	r3, #22
 8006630:	d101      	bne.n	8006636 <__sflush_r+0xb6>
 8006632:	602f      	str	r7, [r5, #0]
 8006634:	e7b1      	b.n	800659a <__sflush_r+0x1a>
 8006636:	89a3      	ldrh	r3, [r4, #12]
 8006638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800663c:	81a3      	strh	r3, [r4, #12]
 800663e:	e7ad      	b.n	800659c <__sflush_r+0x1c>
 8006640:	690f      	ldr	r7, [r1, #16]
 8006642:	2f00      	cmp	r7, #0
 8006644:	d0a9      	beq.n	800659a <__sflush_r+0x1a>
 8006646:	0793      	lsls	r3, r2, #30
 8006648:	680e      	ldr	r6, [r1, #0]
 800664a:	bf08      	it	eq
 800664c:	694b      	ldreq	r3, [r1, #20]
 800664e:	600f      	str	r7, [r1, #0]
 8006650:	bf18      	it	ne
 8006652:	2300      	movne	r3, #0
 8006654:	eba6 0807 	sub.w	r8, r6, r7
 8006658:	608b      	str	r3, [r1, #8]
 800665a:	f1b8 0f00 	cmp.w	r8, #0
 800665e:	dd9c      	ble.n	800659a <__sflush_r+0x1a>
 8006660:	4643      	mov	r3, r8
 8006662:	463a      	mov	r2, r7
 8006664:	6a21      	ldr	r1, [r4, #32]
 8006666:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006668:	4628      	mov	r0, r5
 800666a:	47b0      	blx	r6
 800666c:	2800      	cmp	r0, #0
 800666e:	dc06      	bgt.n	800667e <__sflush_r+0xfe>
 8006670:	89a3      	ldrh	r3, [r4, #12]
 8006672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006676:	81a3      	strh	r3, [r4, #12]
 8006678:	f04f 30ff 	mov.w	r0, #4294967295
 800667c:	e78e      	b.n	800659c <__sflush_r+0x1c>
 800667e:	4407      	add	r7, r0
 8006680:	eba8 0800 	sub.w	r8, r8, r0
 8006684:	e7e9      	b.n	800665a <__sflush_r+0xda>
 8006686:	bf00      	nop
 8006688:	20400001 	.word	0x20400001

0800668c <_fflush_r>:
 800668c:	b538      	push	{r3, r4, r5, lr}
 800668e:	690b      	ldr	r3, [r1, #16]
 8006690:	4605      	mov	r5, r0
 8006692:	460c      	mov	r4, r1
 8006694:	b1db      	cbz	r3, 80066ce <_fflush_r+0x42>
 8006696:	b118      	cbz	r0, 80066a0 <_fflush_r+0x14>
 8006698:	6983      	ldr	r3, [r0, #24]
 800669a:	b90b      	cbnz	r3, 80066a0 <_fflush_r+0x14>
 800669c:	f000 f872 	bl	8006784 <__sinit>
 80066a0:	4b0c      	ldr	r3, [pc, #48]	; (80066d4 <_fflush_r+0x48>)
 80066a2:	429c      	cmp	r4, r3
 80066a4:	d109      	bne.n	80066ba <_fflush_r+0x2e>
 80066a6:	686c      	ldr	r4, [r5, #4]
 80066a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066ac:	b17b      	cbz	r3, 80066ce <_fflush_r+0x42>
 80066ae:	4621      	mov	r1, r4
 80066b0:	4628      	mov	r0, r5
 80066b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066b6:	f7ff bf63 	b.w	8006580 <__sflush_r>
 80066ba:	4b07      	ldr	r3, [pc, #28]	; (80066d8 <_fflush_r+0x4c>)
 80066bc:	429c      	cmp	r4, r3
 80066be:	d101      	bne.n	80066c4 <_fflush_r+0x38>
 80066c0:	68ac      	ldr	r4, [r5, #8]
 80066c2:	e7f1      	b.n	80066a8 <_fflush_r+0x1c>
 80066c4:	4b05      	ldr	r3, [pc, #20]	; (80066dc <_fflush_r+0x50>)
 80066c6:	429c      	cmp	r4, r3
 80066c8:	bf08      	it	eq
 80066ca:	68ec      	ldreq	r4, [r5, #12]
 80066cc:	e7ec      	b.n	80066a8 <_fflush_r+0x1c>
 80066ce:	2000      	movs	r0, #0
 80066d0:	bd38      	pop	{r3, r4, r5, pc}
 80066d2:	bf00      	nop
 80066d4:	0800797c 	.word	0x0800797c
 80066d8:	0800799c 	.word	0x0800799c
 80066dc:	0800795c 	.word	0x0800795c

080066e0 <fflush>:
 80066e0:	4601      	mov	r1, r0
 80066e2:	b920      	cbnz	r0, 80066ee <fflush+0xe>
 80066e4:	4b04      	ldr	r3, [pc, #16]	; (80066f8 <fflush+0x18>)
 80066e6:	4905      	ldr	r1, [pc, #20]	; (80066fc <fflush+0x1c>)
 80066e8:	6818      	ldr	r0, [r3, #0]
 80066ea:	f000 b8b7 	b.w	800685c <_fwalk_reent>
 80066ee:	4b04      	ldr	r3, [pc, #16]	; (8006700 <fflush+0x20>)
 80066f0:	6818      	ldr	r0, [r3, #0]
 80066f2:	f7ff bfcb 	b.w	800668c <_fflush_r>
 80066f6:	bf00      	nop
 80066f8:	080079bc 	.word	0x080079bc
 80066fc:	0800668d 	.word	0x0800668d
 8006700:	20000024 	.word	0x20000024

08006704 <std>:
 8006704:	2300      	movs	r3, #0
 8006706:	b510      	push	{r4, lr}
 8006708:	4604      	mov	r4, r0
 800670a:	e9c0 3300 	strd	r3, r3, [r0]
 800670e:	6083      	str	r3, [r0, #8]
 8006710:	8181      	strh	r1, [r0, #12]
 8006712:	6643      	str	r3, [r0, #100]	; 0x64
 8006714:	81c2      	strh	r2, [r0, #14]
 8006716:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800671a:	6183      	str	r3, [r0, #24]
 800671c:	4619      	mov	r1, r3
 800671e:	2208      	movs	r2, #8
 8006720:	305c      	adds	r0, #92	; 0x5c
 8006722:	f000 f8e8 	bl	80068f6 <memset>
 8006726:	4b05      	ldr	r3, [pc, #20]	; (800673c <std+0x38>)
 8006728:	6263      	str	r3, [r4, #36]	; 0x24
 800672a:	4b05      	ldr	r3, [pc, #20]	; (8006740 <std+0x3c>)
 800672c:	62a3      	str	r3, [r4, #40]	; 0x28
 800672e:	4b05      	ldr	r3, [pc, #20]	; (8006744 <std+0x40>)
 8006730:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006732:	4b05      	ldr	r3, [pc, #20]	; (8006748 <std+0x44>)
 8006734:	6224      	str	r4, [r4, #32]
 8006736:	6323      	str	r3, [r4, #48]	; 0x30
 8006738:	bd10      	pop	{r4, pc}
 800673a:	bf00      	nop
 800673c:	08006b99 	.word	0x08006b99
 8006740:	08006bbb 	.word	0x08006bbb
 8006744:	08006bf3 	.word	0x08006bf3
 8006748:	08006c17 	.word	0x08006c17

0800674c <_cleanup_r>:
 800674c:	4901      	ldr	r1, [pc, #4]	; (8006754 <_cleanup_r+0x8>)
 800674e:	f000 b885 	b.w	800685c <_fwalk_reent>
 8006752:	bf00      	nop
 8006754:	0800668d 	.word	0x0800668d

08006758 <__sfmoreglue>:
 8006758:	b570      	push	{r4, r5, r6, lr}
 800675a:	1e4a      	subs	r2, r1, #1
 800675c:	2568      	movs	r5, #104	; 0x68
 800675e:	4355      	muls	r5, r2
 8006760:	460e      	mov	r6, r1
 8006762:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006766:	f000 f91d 	bl	80069a4 <_malloc_r>
 800676a:	4604      	mov	r4, r0
 800676c:	b140      	cbz	r0, 8006780 <__sfmoreglue+0x28>
 800676e:	2100      	movs	r1, #0
 8006770:	e9c0 1600 	strd	r1, r6, [r0]
 8006774:	300c      	adds	r0, #12
 8006776:	60a0      	str	r0, [r4, #8]
 8006778:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800677c:	f000 f8bb 	bl	80068f6 <memset>
 8006780:	4620      	mov	r0, r4
 8006782:	bd70      	pop	{r4, r5, r6, pc}

08006784 <__sinit>:
 8006784:	6983      	ldr	r3, [r0, #24]
 8006786:	b510      	push	{r4, lr}
 8006788:	4604      	mov	r4, r0
 800678a:	bb33      	cbnz	r3, 80067da <__sinit+0x56>
 800678c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006790:	6503      	str	r3, [r0, #80]	; 0x50
 8006792:	4b12      	ldr	r3, [pc, #72]	; (80067dc <__sinit+0x58>)
 8006794:	4a12      	ldr	r2, [pc, #72]	; (80067e0 <__sinit+0x5c>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6282      	str	r2, [r0, #40]	; 0x28
 800679a:	4298      	cmp	r0, r3
 800679c:	bf04      	itt	eq
 800679e:	2301      	moveq	r3, #1
 80067a0:	6183      	streq	r3, [r0, #24]
 80067a2:	f000 f81f 	bl	80067e4 <__sfp>
 80067a6:	6060      	str	r0, [r4, #4]
 80067a8:	4620      	mov	r0, r4
 80067aa:	f000 f81b 	bl	80067e4 <__sfp>
 80067ae:	60a0      	str	r0, [r4, #8]
 80067b0:	4620      	mov	r0, r4
 80067b2:	f000 f817 	bl	80067e4 <__sfp>
 80067b6:	2200      	movs	r2, #0
 80067b8:	60e0      	str	r0, [r4, #12]
 80067ba:	2104      	movs	r1, #4
 80067bc:	6860      	ldr	r0, [r4, #4]
 80067be:	f7ff ffa1 	bl	8006704 <std>
 80067c2:	2201      	movs	r2, #1
 80067c4:	2109      	movs	r1, #9
 80067c6:	68a0      	ldr	r0, [r4, #8]
 80067c8:	f7ff ff9c 	bl	8006704 <std>
 80067cc:	2202      	movs	r2, #2
 80067ce:	2112      	movs	r1, #18
 80067d0:	68e0      	ldr	r0, [r4, #12]
 80067d2:	f7ff ff97 	bl	8006704 <std>
 80067d6:	2301      	movs	r3, #1
 80067d8:	61a3      	str	r3, [r4, #24]
 80067da:	bd10      	pop	{r4, pc}
 80067dc:	080079bc 	.word	0x080079bc
 80067e0:	0800674d 	.word	0x0800674d

080067e4 <__sfp>:
 80067e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e6:	4b1b      	ldr	r3, [pc, #108]	; (8006854 <__sfp+0x70>)
 80067e8:	681e      	ldr	r6, [r3, #0]
 80067ea:	69b3      	ldr	r3, [r6, #24]
 80067ec:	4607      	mov	r7, r0
 80067ee:	b913      	cbnz	r3, 80067f6 <__sfp+0x12>
 80067f0:	4630      	mov	r0, r6
 80067f2:	f7ff ffc7 	bl	8006784 <__sinit>
 80067f6:	3648      	adds	r6, #72	; 0x48
 80067f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80067fc:	3b01      	subs	r3, #1
 80067fe:	d503      	bpl.n	8006808 <__sfp+0x24>
 8006800:	6833      	ldr	r3, [r6, #0]
 8006802:	b133      	cbz	r3, 8006812 <__sfp+0x2e>
 8006804:	6836      	ldr	r6, [r6, #0]
 8006806:	e7f7      	b.n	80067f8 <__sfp+0x14>
 8006808:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800680c:	b16d      	cbz	r5, 800682a <__sfp+0x46>
 800680e:	3468      	adds	r4, #104	; 0x68
 8006810:	e7f4      	b.n	80067fc <__sfp+0x18>
 8006812:	2104      	movs	r1, #4
 8006814:	4638      	mov	r0, r7
 8006816:	f7ff ff9f 	bl	8006758 <__sfmoreglue>
 800681a:	6030      	str	r0, [r6, #0]
 800681c:	2800      	cmp	r0, #0
 800681e:	d1f1      	bne.n	8006804 <__sfp+0x20>
 8006820:	230c      	movs	r3, #12
 8006822:	603b      	str	r3, [r7, #0]
 8006824:	4604      	mov	r4, r0
 8006826:	4620      	mov	r0, r4
 8006828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800682a:	4b0b      	ldr	r3, [pc, #44]	; (8006858 <__sfp+0x74>)
 800682c:	6665      	str	r5, [r4, #100]	; 0x64
 800682e:	e9c4 5500 	strd	r5, r5, [r4]
 8006832:	60a5      	str	r5, [r4, #8]
 8006834:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006838:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800683c:	2208      	movs	r2, #8
 800683e:	4629      	mov	r1, r5
 8006840:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006844:	f000 f857 	bl	80068f6 <memset>
 8006848:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800684c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006850:	e7e9      	b.n	8006826 <__sfp+0x42>
 8006852:	bf00      	nop
 8006854:	080079bc 	.word	0x080079bc
 8006858:	ffff0001 	.word	0xffff0001

0800685c <_fwalk_reent>:
 800685c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006860:	4680      	mov	r8, r0
 8006862:	4689      	mov	r9, r1
 8006864:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006868:	2600      	movs	r6, #0
 800686a:	b914      	cbnz	r4, 8006872 <_fwalk_reent+0x16>
 800686c:	4630      	mov	r0, r6
 800686e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006872:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006876:	3f01      	subs	r7, #1
 8006878:	d501      	bpl.n	800687e <_fwalk_reent+0x22>
 800687a:	6824      	ldr	r4, [r4, #0]
 800687c:	e7f5      	b.n	800686a <_fwalk_reent+0xe>
 800687e:	89ab      	ldrh	r3, [r5, #12]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d907      	bls.n	8006894 <_fwalk_reent+0x38>
 8006884:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006888:	3301      	adds	r3, #1
 800688a:	d003      	beq.n	8006894 <_fwalk_reent+0x38>
 800688c:	4629      	mov	r1, r5
 800688e:	4640      	mov	r0, r8
 8006890:	47c8      	blx	r9
 8006892:	4306      	orrs	r6, r0
 8006894:	3568      	adds	r5, #104	; 0x68
 8006896:	e7ee      	b.n	8006876 <_fwalk_reent+0x1a>

08006898 <__libc_init_array>:
 8006898:	b570      	push	{r4, r5, r6, lr}
 800689a:	4e0d      	ldr	r6, [pc, #52]	; (80068d0 <__libc_init_array+0x38>)
 800689c:	4c0d      	ldr	r4, [pc, #52]	; (80068d4 <__libc_init_array+0x3c>)
 800689e:	1ba4      	subs	r4, r4, r6
 80068a0:	10a4      	asrs	r4, r4, #2
 80068a2:	2500      	movs	r5, #0
 80068a4:	42a5      	cmp	r5, r4
 80068a6:	d109      	bne.n	80068bc <__libc_init_array+0x24>
 80068a8:	4e0b      	ldr	r6, [pc, #44]	; (80068d8 <__libc_init_array+0x40>)
 80068aa:	4c0c      	ldr	r4, [pc, #48]	; (80068dc <__libc_init_array+0x44>)
 80068ac:	f000 fef8 	bl	80076a0 <_init>
 80068b0:	1ba4      	subs	r4, r4, r6
 80068b2:	10a4      	asrs	r4, r4, #2
 80068b4:	2500      	movs	r5, #0
 80068b6:	42a5      	cmp	r5, r4
 80068b8:	d105      	bne.n	80068c6 <__libc_init_array+0x2e>
 80068ba:	bd70      	pop	{r4, r5, r6, pc}
 80068bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068c0:	4798      	blx	r3
 80068c2:	3501      	adds	r5, #1
 80068c4:	e7ee      	b.n	80068a4 <__libc_init_array+0xc>
 80068c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068ca:	4798      	blx	r3
 80068cc:	3501      	adds	r5, #1
 80068ce:	e7f2      	b.n	80068b6 <__libc_init_array+0x1e>
 80068d0:	08007b08 	.word	0x08007b08
 80068d4:	08007b08 	.word	0x08007b08
 80068d8:	08007b08 	.word	0x08007b08
 80068dc:	08007b0c 	.word	0x08007b0c

080068e0 <memcpy>:
 80068e0:	b510      	push	{r4, lr}
 80068e2:	1e43      	subs	r3, r0, #1
 80068e4:	440a      	add	r2, r1
 80068e6:	4291      	cmp	r1, r2
 80068e8:	d100      	bne.n	80068ec <memcpy+0xc>
 80068ea:	bd10      	pop	{r4, pc}
 80068ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068f4:	e7f7      	b.n	80068e6 <memcpy+0x6>

080068f6 <memset>:
 80068f6:	4402      	add	r2, r0
 80068f8:	4603      	mov	r3, r0
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d100      	bne.n	8006900 <memset+0xa>
 80068fe:	4770      	bx	lr
 8006900:	f803 1b01 	strb.w	r1, [r3], #1
 8006904:	e7f9      	b.n	80068fa <memset+0x4>
	...

08006908 <_free_r>:
 8006908:	b538      	push	{r3, r4, r5, lr}
 800690a:	4605      	mov	r5, r0
 800690c:	2900      	cmp	r1, #0
 800690e:	d045      	beq.n	800699c <_free_r+0x94>
 8006910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006914:	1f0c      	subs	r4, r1, #4
 8006916:	2b00      	cmp	r3, #0
 8006918:	bfb8      	it	lt
 800691a:	18e4      	addlt	r4, r4, r3
 800691c:	f000 fb7e 	bl	800701c <__malloc_lock>
 8006920:	4a1f      	ldr	r2, [pc, #124]	; (80069a0 <_free_r+0x98>)
 8006922:	6813      	ldr	r3, [r2, #0]
 8006924:	4610      	mov	r0, r2
 8006926:	b933      	cbnz	r3, 8006936 <_free_r+0x2e>
 8006928:	6063      	str	r3, [r4, #4]
 800692a:	6014      	str	r4, [r2, #0]
 800692c:	4628      	mov	r0, r5
 800692e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006932:	f000 bb74 	b.w	800701e <__malloc_unlock>
 8006936:	42a3      	cmp	r3, r4
 8006938:	d90c      	bls.n	8006954 <_free_r+0x4c>
 800693a:	6821      	ldr	r1, [r4, #0]
 800693c:	1862      	adds	r2, r4, r1
 800693e:	4293      	cmp	r3, r2
 8006940:	bf04      	itt	eq
 8006942:	681a      	ldreq	r2, [r3, #0]
 8006944:	685b      	ldreq	r3, [r3, #4]
 8006946:	6063      	str	r3, [r4, #4]
 8006948:	bf04      	itt	eq
 800694a:	1852      	addeq	r2, r2, r1
 800694c:	6022      	streq	r2, [r4, #0]
 800694e:	6004      	str	r4, [r0, #0]
 8006950:	e7ec      	b.n	800692c <_free_r+0x24>
 8006952:	4613      	mov	r3, r2
 8006954:	685a      	ldr	r2, [r3, #4]
 8006956:	b10a      	cbz	r2, 800695c <_free_r+0x54>
 8006958:	42a2      	cmp	r2, r4
 800695a:	d9fa      	bls.n	8006952 <_free_r+0x4a>
 800695c:	6819      	ldr	r1, [r3, #0]
 800695e:	1858      	adds	r0, r3, r1
 8006960:	42a0      	cmp	r0, r4
 8006962:	d10b      	bne.n	800697c <_free_r+0x74>
 8006964:	6820      	ldr	r0, [r4, #0]
 8006966:	4401      	add	r1, r0
 8006968:	1858      	adds	r0, r3, r1
 800696a:	4282      	cmp	r2, r0
 800696c:	6019      	str	r1, [r3, #0]
 800696e:	d1dd      	bne.n	800692c <_free_r+0x24>
 8006970:	6810      	ldr	r0, [r2, #0]
 8006972:	6852      	ldr	r2, [r2, #4]
 8006974:	605a      	str	r2, [r3, #4]
 8006976:	4401      	add	r1, r0
 8006978:	6019      	str	r1, [r3, #0]
 800697a:	e7d7      	b.n	800692c <_free_r+0x24>
 800697c:	d902      	bls.n	8006984 <_free_r+0x7c>
 800697e:	230c      	movs	r3, #12
 8006980:	602b      	str	r3, [r5, #0]
 8006982:	e7d3      	b.n	800692c <_free_r+0x24>
 8006984:	6820      	ldr	r0, [r4, #0]
 8006986:	1821      	adds	r1, r4, r0
 8006988:	428a      	cmp	r2, r1
 800698a:	bf04      	itt	eq
 800698c:	6811      	ldreq	r1, [r2, #0]
 800698e:	6852      	ldreq	r2, [r2, #4]
 8006990:	6062      	str	r2, [r4, #4]
 8006992:	bf04      	itt	eq
 8006994:	1809      	addeq	r1, r1, r0
 8006996:	6021      	streq	r1, [r4, #0]
 8006998:	605c      	str	r4, [r3, #4]
 800699a:	e7c7      	b.n	800692c <_free_r+0x24>
 800699c:	bd38      	pop	{r3, r4, r5, pc}
 800699e:	bf00      	nop
 80069a0:	20000608 	.word	0x20000608

080069a4 <_malloc_r>:
 80069a4:	b570      	push	{r4, r5, r6, lr}
 80069a6:	1ccd      	adds	r5, r1, #3
 80069a8:	f025 0503 	bic.w	r5, r5, #3
 80069ac:	3508      	adds	r5, #8
 80069ae:	2d0c      	cmp	r5, #12
 80069b0:	bf38      	it	cc
 80069b2:	250c      	movcc	r5, #12
 80069b4:	2d00      	cmp	r5, #0
 80069b6:	4606      	mov	r6, r0
 80069b8:	db01      	blt.n	80069be <_malloc_r+0x1a>
 80069ba:	42a9      	cmp	r1, r5
 80069bc:	d903      	bls.n	80069c6 <_malloc_r+0x22>
 80069be:	230c      	movs	r3, #12
 80069c0:	6033      	str	r3, [r6, #0]
 80069c2:	2000      	movs	r0, #0
 80069c4:	bd70      	pop	{r4, r5, r6, pc}
 80069c6:	f000 fb29 	bl	800701c <__malloc_lock>
 80069ca:	4a21      	ldr	r2, [pc, #132]	; (8006a50 <_malloc_r+0xac>)
 80069cc:	6814      	ldr	r4, [r2, #0]
 80069ce:	4621      	mov	r1, r4
 80069d0:	b991      	cbnz	r1, 80069f8 <_malloc_r+0x54>
 80069d2:	4c20      	ldr	r4, [pc, #128]	; (8006a54 <_malloc_r+0xb0>)
 80069d4:	6823      	ldr	r3, [r4, #0]
 80069d6:	b91b      	cbnz	r3, 80069e0 <_malloc_r+0x3c>
 80069d8:	4630      	mov	r0, r6
 80069da:	f000 f8cd 	bl	8006b78 <_sbrk_r>
 80069de:	6020      	str	r0, [r4, #0]
 80069e0:	4629      	mov	r1, r5
 80069e2:	4630      	mov	r0, r6
 80069e4:	f000 f8c8 	bl	8006b78 <_sbrk_r>
 80069e8:	1c43      	adds	r3, r0, #1
 80069ea:	d124      	bne.n	8006a36 <_malloc_r+0x92>
 80069ec:	230c      	movs	r3, #12
 80069ee:	6033      	str	r3, [r6, #0]
 80069f0:	4630      	mov	r0, r6
 80069f2:	f000 fb14 	bl	800701e <__malloc_unlock>
 80069f6:	e7e4      	b.n	80069c2 <_malloc_r+0x1e>
 80069f8:	680b      	ldr	r3, [r1, #0]
 80069fa:	1b5b      	subs	r3, r3, r5
 80069fc:	d418      	bmi.n	8006a30 <_malloc_r+0x8c>
 80069fe:	2b0b      	cmp	r3, #11
 8006a00:	d90f      	bls.n	8006a22 <_malloc_r+0x7e>
 8006a02:	600b      	str	r3, [r1, #0]
 8006a04:	50cd      	str	r5, [r1, r3]
 8006a06:	18cc      	adds	r4, r1, r3
 8006a08:	4630      	mov	r0, r6
 8006a0a:	f000 fb08 	bl	800701e <__malloc_unlock>
 8006a0e:	f104 000b 	add.w	r0, r4, #11
 8006a12:	1d23      	adds	r3, r4, #4
 8006a14:	f020 0007 	bic.w	r0, r0, #7
 8006a18:	1ac3      	subs	r3, r0, r3
 8006a1a:	d0d3      	beq.n	80069c4 <_malloc_r+0x20>
 8006a1c:	425a      	negs	r2, r3
 8006a1e:	50e2      	str	r2, [r4, r3]
 8006a20:	e7d0      	b.n	80069c4 <_malloc_r+0x20>
 8006a22:	428c      	cmp	r4, r1
 8006a24:	684b      	ldr	r3, [r1, #4]
 8006a26:	bf16      	itet	ne
 8006a28:	6063      	strne	r3, [r4, #4]
 8006a2a:	6013      	streq	r3, [r2, #0]
 8006a2c:	460c      	movne	r4, r1
 8006a2e:	e7eb      	b.n	8006a08 <_malloc_r+0x64>
 8006a30:	460c      	mov	r4, r1
 8006a32:	6849      	ldr	r1, [r1, #4]
 8006a34:	e7cc      	b.n	80069d0 <_malloc_r+0x2c>
 8006a36:	1cc4      	adds	r4, r0, #3
 8006a38:	f024 0403 	bic.w	r4, r4, #3
 8006a3c:	42a0      	cmp	r0, r4
 8006a3e:	d005      	beq.n	8006a4c <_malloc_r+0xa8>
 8006a40:	1a21      	subs	r1, r4, r0
 8006a42:	4630      	mov	r0, r6
 8006a44:	f000 f898 	bl	8006b78 <_sbrk_r>
 8006a48:	3001      	adds	r0, #1
 8006a4a:	d0cf      	beq.n	80069ec <_malloc_r+0x48>
 8006a4c:	6025      	str	r5, [r4, #0]
 8006a4e:	e7db      	b.n	8006a08 <_malloc_r+0x64>
 8006a50:	20000608 	.word	0x20000608
 8006a54:	2000060c 	.word	0x2000060c

08006a58 <iprintf>:
 8006a58:	b40f      	push	{r0, r1, r2, r3}
 8006a5a:	4b0a      	ldr	r3, [pc, #40]	; (8006a84 <iprintf+0x2c>)
 8006a5c:	b513      	push	{r0, r1, r4, lr}
 8006a5e:	681c      	ldr	r4, [r3, #0]
 8006a60:	b124      	cbz	r4, 8006a6c <iprintf+0x14>
 8006a62:	69a3      	ldr	r3, [r4, #24]
 8006a64:	b913      	cbnz	r3, 8006a6c <iprintf+0x14>
 8006a66:	4620      	mov	r0, r4
 8006a68:	f7ff fe8c 	bl	8006784 <__sinit>
 8006a6c:	ab05      	add	r3, sp, #20
 8006a6e:	9a04      	ldr	r2, [sp, #16]
 8006a70:	68a1      	ldr	r1, [r4, #8]
 8006a72:	9301      	str	r3, [sp, #4]
 8006a74:	4620      	mov	r0, r4
 8006a76:	f000 fafd 	bl	8007074 <_vfiprintf_r>
 8006a7a:	b002      	add	sp, #8
 8006a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a80:	b004      	add	sp, #16
 8006a82:	4770      	bx	lr
 8006a84:	20000024 	.word	0x20000024

08006a88 <putchar>:
 8006a88:	b538      	push	{r3, r4, r5, lr}
 8006a8a:	4b08      	ldr	r3, [pc, #32]	; (8006aac <putchar+0x24>)
 8006a8c:	681c      	ldr	r4, [r3, #0]
 8006a8e:	4605      	mov	r5, r0
 8006a90:	b124      	cbz	r4, 8006a9c <putchar+0x14>
 8006a92:	69a3      	ldr	r3, [r4, #24]
 8006a94:	b913      	cbnz	r3, 8006a9c <putchar+0x14>
 8006a96:	4620      	mov	r0, r4
 8006a98:	f7ff fe74 	bl	8006784 <__sinit>
 8006a9c:	68a2      	ldr	r2, [r4, #8]
 8006a9e:	4629      	mov	r1, r5
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006aa6:	f000 bd83 	b.w	80075b0 <_putc_r>
 8006aaa:	bf00      	nop
 8006aac:	20000024 	.word	0x20000024

08006ab0 <_puts_r>:
 8006ab0:	b570      	push	{r4, r5, r6, lr}
 8006ab2:	460e      	mov	r6, r1
 8006ab4:	4605      	mov	r5, r0
 8006ab6:	b118      	cbz	r0, 8006ac0 <_puts_r+0x10>
 8006ab8:	6983      	ldr	r3, [r0, #24]
 8006aba:	b90b      	cbnz	r3, 8006ac0 <_puts_r+0x10>
 8006abc:	f7ff fe62 	bl	8006784 <__sinit>
 8006ac0:	69ab      	ldr	r3, [r5, #24]
 8006ac2:	68ac      	ldr	r4, [r5, #8]
 8006ac4:	b913      	cbnz	r3, 8006acc <_puts_r+0x1c>
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	f7ff fe5c 	bl	8006784 <__sinit>
 8006acc:	4b23      	ldr	r3, [pc, #140]	; (8006b5c <_puts_r+0xac>)
 8006ace:	429c      	cmp	r4, r3
 8006ad0:	d117      	bne.n	8006b02 <_puts_r+0x52>
 8006ad2:	686c      	ldr	r4, [r5, #4]
 8006ad4:	89a3      	ldrh	r3, [r4, #12]
 8006ad6:	071b      	lsls	r3, r3, #28
 8006ad8:	d51d      	bpl.n	8006b16 <_puts_r+0x66>
 8006ada:	6923      	ldr	r3, [r4, #16]
 8006adc:	b1db      	cbz	r3, 8006b16 <_puts_r+0x66>
 8006ade:	3e01      	subs	r6, #1
 8006ae0:	68a3      	ldr	r3, [r4, #8]
 8006ae2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	60a3      	str	r3, [r4, #8]
 8006aea:	b9e9      	cbnz	r1, 8006b28 <_puts_r+0x78>
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	da2e      	bge.n	8006b4e <_puts_r+0x9e>
 8006af0:	4622      	mov	r2, r4
 8006af2:	210a      	movs	r1, #10
 8006af4:	4628      	mov	r0, r5
 8006af6:	f000 f923 	bl	8006d40 <__swbuf_r>
 8006afa:	3001      	adds	r0, #1
 8006afc:	d011      	beq.n	8006b22 <_puts_r+0x72>
 8006afe:	200a      	movs	r0, #10
 8006b00:	e011      	b.n	8006b26 <_puts_r+0x76>
 8006b02:	4b17      	ldr	r3, [pc, #92]	; (8006b60 <_puts_r+0xb0>)
 8006b04:	429c      	cmp	r4, r3
 8006b06:	d101      	bne.n	8006b0c <_puts_r+0x5c>
 8006b08:	68ac      	ldr	r4, [r5, #8]
 8006b0a:	e7e3      	b.n	8006ad4 <_puts_r+0x24>
 8006b0c:	4b15      	ldr	r3, [pc, #84]	; (8006b64 <_puts_r+0xb4>)
 8006b0e:	429c      	cmp	r4, r3
 8006b10:	bf08      	it	eq
 8006b12:	68ec      	ldreq	r4, [r5, #12]
 8006b14:	e7de      	b.n	8006ad4 <_puts_r+0x24>
 8006b16:	4621      	mov	r1, r4
 8006b18:	4628      	mov	r0, r5
 8006b1a:	f000 f975 	bl	8006e08 <__swsetup_r>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	d0dd      	beq.n	8006ade <_puts_r+0x2e>
 8006b22:	f04f 30ff 	mov.w	r0, #4294967295
 8006b26:	bd70      	pop	{r4, r5, r6, pc}
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	da04      	bge.n	8006b36 <_puts_r+0x86>
 8006b2c:	69a2      	ldr	r2, [r4, #24]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	dc06      	bgt.n	8006b40 <_puts_r+0x90>
 8006b32:	290a      	cmp	r1, #10
 8006b34:	d004      	beq.n	8006b40 <_puts_r+0x90>
 8006b36:	6823      	ldr	r3, [r4, #0]
 8006b38:	1c5a      	adds	r2, r3, #1
 8006b3a:	6022      	str	r2, [r4, #0]
 8006b3c:	7019      	strb	r1, [r3, #0]
 8006b3e:	e7cf      	b.n	8006ae0 <_puts_r+0x30>
 8006b40:	4622      	mov	r2, r4
 8006b42:	4628      	mov	r0, r5
 8006b44:	f000 f8fc 	bl	8006d40 <__swbuf_r>
 8006b48:	3001      	adds	r0, #1
 8006b4a:	d1c9      	bne.n	8006ae0 <_puts_r+0x30>
 8006b4c:	e7e9      	b.n	8006b22 <_puts_r+0x72>
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	200a      	movs	r0, #10
 8006b52:	1c5a      	adds	r2, r3, #1
 8006b54:	6022      	str	r2, [r4, #0]
 8006b56:	7018      	strb	r0, [r3, #0]
 8006b58:	e7e5      	b.n	8006b26 <_puts_r+0x76>
 8006b5a:	bf00      	nop
 8006b5c:	0800797c 	.word	0x0800797c
 8006b60:	0800799c 	.word	0x0800799c
 8006b64:	0800795c 	.word	0x0800795c

08006b68 <puts>:
 8006b68:	4b02      	ldr	r3, [pc, #8]	; (8006b74 <puts+0xc>)
 8006b6a:	4601      	mov	r1, r0
 8006b6c:	6818      	ldr	r0, [r3, #0]
 8006b6e:	f7ff bf9f 	b.w	8006ab0 <_puts_r>
 8006b72:	bf00      	nop
 8006b74:	20000024 	.word	0x20000024

08006b78 <_sbrk_r>:
 8006b78:	b538      	push	{r3, r4, r5, lr}
 8006b7a:	4c06      	ldr	r4, [pc, #24]	; (8006b94 <_sbrk_r+0x1c>)
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	4605      	mov	r5, r0
 8006b80:	4608      	mov	r0, r1
 8006b82:	6023      	str	r3, [r4, #0]
 8006b84:	f7fa feae 	bl	80018e4 <_sbrk>
 8006b88:	1c43      	adds	r3, r0, #1
 8006b8a:	d102      	bne.n	8006b92 <_sbrk_r+0x1a>
 8006b8c:	6823      	ldr	r3, [r4, #0]
 8006b8e:	b103      	cbz	r3, 8006b92 <_sbrk_r+0x1a>
 8006b90:	602b      	str	r3, [r5, #0]
 8006b92:	bd38      	pop	{r3, r4, r5, pc}
 8006b94:	2000071c 	.word	0x2000071c

08006b98 <__sread>:
 8006b98:	b510      	push	{r4, lr}
 8006b9a:	460c      	mov	r4, r1
 8006b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ba0:	f000 fd3c 	bl	800761c <_read_r>
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	bfab      	itete	ge
 8006ba8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006baa:	89a3      	ldrhlt	r3, [r4, #12]
 8006bac:	181b      	addge	r3, r3, r0
 8006bae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006bb2:	bfac      	ite	ge
 8006bb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006bb6:	81a3      	strhlt	r3, [r4, #12]
 8006bb8:	bd10      	pop	{r4, pc}

08006bba <__swrite>:
 8006bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bbe:	461f      	mov	r7, r3
 8006bc0:	898b      	ldrh	r3, [r1, #12]
 8006bc2:	05db      	lsls	r3, r3, #23
 8006bc4:	4605      	mov	r5, r0
 8006bc6:	460c      	mov	r4, r1
 8006bc8:	4616      	mov	r6, r2
 8006bca:	d505      	bpl.n	8006bd8 <__swrite+0x1e>
 8006bcc:	2302      	movs	r3, #2
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bd4:	f000 f99a 	bl	8006f0c <_lseek_r>
 8006bd8:	89a3      	ldrh	r3, [r4, #12]
 8006bda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006be2:	81a3      	strh	r3, [r4, #12]
 8006be4:	4632      	mov	r2, r6
 8006be6:	463b      	mov	r3, r7
 8006be8:	4628      	mov	r0, r5
 8006bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bee:	f000 b8f9 	b.w	8006de4 <_write_r>

08006bf2 <__sseek>:
 8006bf2:	b510      	push	{r4, lr}
 8006bf4:	460c      	mov	r4, r1
 8006bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bfa:	f000 f987 	bl	8006f0c <_lseek_r>
 8006bfe:	1c43      	adds	r3, r0, #1
 8006c00:	89a3      	ldrh	r3, [r4, #12]
 8006c02:	bf15      	itete	ne
 8006c04:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c0e:	81a3      	strheq	r3, [r4, #12]
 8006c10:	bf18      	it	ne
 8006c12:	81a3      	strhne	r3, [r4, #12]
 8006c14:	bd10      	pop	{r4, pc}

08006c16 <__sclose>:
 8006c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c1a:	f000 b963 	b.w	8006ee4 <_close_r>

08006c1e <_strtol_l.isra.0>:
 8006c1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c22:	4680      	mov	r8, r0
 8006c24:	4689      	mov	r9, r1
 8006c26:	4692      	mov	sl, r2
 8006c28:	461e      	mov	r6, r3
 8006c2a:	460f      	mov	r7, r1
 8006c2c:	463d      	mov	r5, r7
 8006c2e:	9808      	ldr	r0, [sp, #32]
 8006c30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c34:	f000 f966 	bl	8006f04 <__locale_ctype_ptr_l>
 8006c38:	4420      	add	r0, r4
 8006c3a:	7843      	ldrb	r3, [r0, #1]
 8006c3c:	f013 0308 	ands.w	r3, r3, #8
 8006c40:	d132      	bne.n	8006ca8 <_strtol_l.isra.0+0x8a>
 8006c42:	2c2d      	cmp	r4, #45	; 0x2d
 8006c44:	d132      	bne.n	8006cac <_strtol_l.isra.0+0x8e>
 8006c46:	787c      	ldrb	r4, [r7, #1]
 8006c48:	1cbd      	adds	r5, r7, #2
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	2e00      	cmp	r6, #0
 8006c4e:	d05d      	beq.n	8006d0c <_strtol_l.isra.0+0xee>
 8006c50:	2e10      	cmp	r6, #16
 8006c52:	d109      	bne.n	8006c68 <_strtol_l.isra.0+0x4a>
 8006c54:	2c30      	cmp	r4, #48	; 0x30
 8006c56:	d107      	bne.n	8006c68 <_strtol_l.isra.0+0x4a>
 8006c58:	782b      	ldrb	r3, [r5, #0]
 8006c5a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006c5e:	2b58      	cmp	r3, #88	; 0x58
 8006c60:	d14f      	bne.n	8006d02 <_strtol_l.isra.0+0xe4>
 8006c62:	786c      	ldrb	r4, [r5, #1]
 8006c64:	2610      	movs	r6, #16
 8006c66:	3502      	adds	r5, #2
 8006c68:	2a00      	cmp	r2, #0
 8006c6a:	bf14      	ite	ne
 8006c6c:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006c70:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006c74:	2700      	movs	r7, #0
 8006c76:	fbb1 fcf6 	udiv	ip, r1, r6
 8006c7a:	4638      	mov	r0, r7
 8006c7c:	fb06 1e1c 	mls	lr, r6, ip, r1
 8006c80:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006c84:	2b09      	cmp	r3, #9
 8006c86:	d817      	bhi.n	8006cb8 <_strtol_l.isra.0+0x9a>
 8006c88:	461c      	mov	r4, r3
 8006c8a:	42a6      	cmp	r6, r4
 8006c8c:	dd23      	ble.n	8006cd6 <_strtol_l.isra.0+0xb8>
 8006c8e:	1c7b      	adds	r3, r7, #1
 8006c90:	d007      	beq.n	8006ca2 <_strtol_l.isra.0+0x84>
 8006c92:	4584      	cmp	ip, r0
 8006c94:	d31c      	bcc.n	8006cd0 <_strtol_l.isra.0+0xb2>
 8006c96:	d101      	bne.n	8006c9c <_strtol_l.isra.0+0x7e>
 8006c98:	45a6      	cmp	lr, r4
 8006c9a:	db19      	blt.n	8006cd0 <_strtol_l.isra.0+0xb2>
 8006c9c:	fb00 4006 	mla	r0, r0, r6, r4
 8006ca0:	2701      	movs	r7, #1
 8006ca2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ca6:	e7eb      	b.n	8006c80 <_strtol_l.isra.0+0x62>
 8006ca8:	462f      	mov	r7, r5
 8006caa:	e7bf      	b.n	8006c2c <_strtol_l.isra.0+0xe>
 8006cac:	2c2b      	cmp	r4, #43	; 0x2b
 8006cae:	bf04      	itt	eq
 8006cb0:	1cbd      	addeq	r5, r7, #2
 8006cb2:	787c      	ldrbeq	r4, [r7, #1]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	e7c9      	b.n	8006c4c <_strtol_l.isra.0+0x2e>
 8006cb8:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006cbc:	2b19      	cmp	r3, #25
 8006cbe:	d801      	bhi.n	8006cc4 <_strtol_l.isra.0+0xa6>
 8006cc0:	3c37      	subs	r4, #55	; 0x37
 8006cc2:	e7e2      	b.n	8006c8a <_strtol_l.isra.0+0x6c>
 8006cc4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006cc8:	2b19      	cmp	r3, #25
 8006cca:	d804      	bhi.n	8006cd6 <_strtol_l.isra.0+0xb8>
 8006ccc:	3c57      	subs	r4, #87	; 0x57
 8006cce:	e7dc      	b.n	8006c8a <_strtol_l.isra.0+0x6c>
 8006cd0:	f04f 37ff 	mov.w	r7, #4294967295
 8006cd4:	e7e5      	b.n	8006ca2 <_strtol_l.isra.0+0x84>
 8006cd6:	1c7b      	adds	r3, r7, #1
 8006cd8:	d108      	bne.n	8006cec <_strtol_l.isra.0+0xce>
 8006cda:	2322      	movs	r3, #34	; 0x22
 8006cdc:	f8c8 3000 	str.w	r3, [r8]
 8006ce0:	4608      	mov	r0, r1
 8006ce2:	f1ba 0f00 	cmp.w	sl, #0
 8006ce6:	d107      	bne.n	8006cf8 <_strtol_l.isra.0+0xda>
 8006ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cec:	b102      	cbz	r2, 8006cf0 <_strtol_l.isra.0+0xd2>
 8006cee:	4240      	negs	r0, r0
 8006cf0:	f1ba 0f00 	cmp.w	sl, #0
 8006cf4:	d0f8      	beq.n	8006ce8 <_strtol_l.isra.0+0xca>
 8006cf6:	b10f      	cbz	r7, 8006cfc <_strtol_l.isra.0+0xde>
 8006cf8:	f105 39ff 	add.w	r9, r5, #4294967295
 8006cfc:	f8ca 9000 	str.w	r9, [sl]
 8006d00:	e7f2      	b.n	8006ce8 <_strtol_l.isra.0+0xca>
 8006d02:	2430      	movs	r4, #48	; 0x30
 8006d04:	2e00      	cmp	r6, #0
 8006d06:	d1af      	bne.n	8006c68 <_strtol_l.isra.0+0x4a>
 8006d08:	2608      	movs	r6, #8
 8006d0a:	e7ad      	b.n	8006c68 <_strtol_l.isra.0+0x4a>
 8006d0c:	2c30      	cmp	r4, #48	; 0x30
 8006d0e:	d0a3      	beq.n	8006c58 <_strtol_l.isra.0+0x3a>
 8006d10:	260a      	movs	r6, #10
 8006d12:	e7a9      	b.n	8006c68 <_strtol_l.isra.0+0x4a>

08006d14 <strtol>:
 8006d14:	4b08      	ldr	r3, [pc, #32]	; (8006d38 <strtol+0x24>)
 8006d16:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d18:	681c      	ldr	r4, [r3, #0]
 8006d1a:	4d08      	ldr	r5, [pc, #32]	; (8006d3c <strtol+0x28>)
 8006d1c:	6a23      	ldr	r3, [r4, #32]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	bf08      	it	eq
 8006d22:	462b      	moveq	r3, r5
 8006d24:	9300      	str	r3, [sp, #0]
 8006d26:	4613      	mov	r3, r2
 8006d28:	460a      	mov	r2, r1
 8006d2a:	4601      	mov	r1, r0
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	f7ff ff76 	bl	8006c1e <_strtol_l.isra.0>
 8006d32:	b003      	add	sp, #12
 8006d34:	bd30      	pop	{r4, r5, pc}
 8006d36:	bf00      	nop
 8006d38:	20000024 	.word	0x20000024
 8006d3c:	20000088 	.word	0x20000088

08006d40 <__swbuf_r>:
 8006d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d42:	460e      	mov	r6, r1
 8006d44:	4614      	mov	r4, r2
 8006d46:	4605      	mov	r5, r0
 8006d48:	b118      	cbz	r0, 8006d52 <__swbuf_r+0x12>
 8006d4a:	6983      	ldr	r3, [r0, #24]
 8006d4c:	b90b      	cbnz	r3, 8006d52 <__swbuf_r+0x12>
 8006d4e:	f7ff fd19 	bl	8006784 <__sinit>
 8006d52:	4b21      	ldr	r3, [pc, #132]	; (8006dd8 <__swbuf_r+0x98>)
 8006d54:	429c      	cmp	r4, r3
 8006d56:	d12a      	bne.n	8006dae <__swbuf_r+0x6e>
 8006d58:	686c      	ldr	r4, [r5, #4]
 8006d5a:	69a3      	ldr	r3, [r4, #24]
 8006d5c:	60a3      	str	r3, [r4, #8]
 8006d5e:	89a3      	ldrh	r3, [r4, #12]
 8006d60:	071a      	lsls	r2, r3, #28
 8006d62:	d52e      	bpl.n	8006dc2 <__swbuf_r+0x82>
 8006d64:	6923      	ldr	r3, [r4, #16]
 8006d66:	b363      	cbz	r3, 8006dc2 <__swbuf_r+0x82>
 8006d68:	6923      	ldr	r3, [r4, #16]
 8006d6a:	6820      	ldr	r0, [r4, #0]
 8006d6c:	1ac0      	subs	r0, r0, r3
 8006d6e:	6963      	ldr	r3, [r4, #20]
 8006d70:	b2f6      	uxtb	r6, r6
 8006d72:	4283      	cmp	r3, r0
 8006d74:	4637      	mov	r7, r6
 8006d76:	dc04      	bgt.n	8006d82 <__swbuf_r+0x42>
 8006d78:	4621      	mov	r1, r4
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	f7ff fc86 	bl	800668c <_fflush_r>
 8006d80:	bb28      	cbnz	r0, 8006dce <__swbuf_r+0x8e>
 8006d82:	68a3      	ldr	r3, [r4, #8]
 8006d84:	3b01      	subs	r3, #1
 8006d86:	60a3      	str	r3, [r4, #8]
 8006d88:	6823      	ldr	r3, [r4, #0]
 8006d8a:	1c5a      	adds	r2, r3, #1
 8006d8c:	6022      	str	r2, [r4, #0]
 8006d8e:	701e      	strb	r6, [r3, #0]
 8006d90:	6963      	ldr	r3, [r4, #20]
 8006d92:	3001      	adds	r0, #1
 8006d94:	4283      	cmp	r3, r0
 8006d96:	d004      	beq.n	8006da2 <__swbuf_r+0x62>
 8006d98:	89a3      	ldrh	r3, [r4, #12]
 8006d9a:	07db      	lsls	r3, r3, #31
 8006d9c:	d519      	bpl.n	8006dd2 <__swbuf_r+0x92>
 8006d9e:	2e0a      	cmp	r6, #10
 8006da0:	d117      	bne.n	8006dd2 <__swbuf_r+0x92>
 8006da2:	4621      	mov	r1, r4
 8006da4:	4628      	mov	r0, r5
 8006da6:	f7ff fc71 	bl	800668c <_fflush_r>
 8006daa:	b190      	cbz	r0, 8006dd2 <__swbuf_r+0x92>
 8006dac:	e00f      	b.n	8006dce <__swbuf_r+0x8e>
 8006dae:	4b0b      	ldr	r3, [pc, #44]	; (8006ddc <__swbuf_r+0x9c>)
 8006db0:	429c      	cmp	r4, r3
 8006db2:	d101      	bne.n	8006db8 <__swbuf_r+0x78>
 8006db4:	68ac      	ldr	r4, [r5, #8]
 8006db6:	e7d0      	b.n	8006d5a <__swbuf_r+0x1a>
 8006db8:	4b09      	ldr	r3, [pc, #36]	; (8006de0 <__swbuf_r+0xa0>)
 8006dba:	429c      	cmp	r4, r3
 8006dbc:	bf08      	it	eq
 8006dbe:	68ec      	ldreq	r4, [r5, #12]
 8006dc0:	e7cb      	b.n	8006d5a <__swbuf_r+0x1a>
 8006dc2:	4621      	mov	r1, r4
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	f000 f81f 	bl	8006e08 <__swsetup_r>
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	d0cc      	beq.n	8006d68 <__swbuf_r+0x28>
 8006dce:	f04f 37ff 	mov.w	r7, #4294967295
 8006dd2:	4638      	mov	r0, r7
 8006dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	0800797c 	.word	0x0800797c
 8006ddc:	0800799c 	.word	0x0800799c
 8006de0:	0800795c 	.word	0x0800795c

08006de4 <_write_r>:
 8006de4:	b538      	push	{r3, r4, r5, lr}
 8006de6:	4c07      	ldr	r4, [pc, #28]	; (8006e04 <_write_r+0x20>)
 8006de8:	4605      	mov	r5, r0
 8006dea:	4608      	mov	r0, r1
 8006dec:	4611      	mov	r1, r2
 8006dee:	2200      	movs	r2, #0
 8006df0:	6022      	str	r2, [r4, #0]
 8006df2:	461a      	mov	r2, r3
 8006df4:	f7fa fd25 	bl	8001842 <_write>
 8006df8:	1c43      	adds	r3, r0, #1
 8006dfa:	d102      	bne.n	8006e02 <_write_r+0x1e>
 8006dfc:	6823      	ldr	r3, [r4, #0]
 8006dfe:	b103      	cbz	r3, 8006e02 <_write_r+0x1e>
 8006e00:	602b      	str	r3, [r5, #0]
 8006e02:	bd38      	pop	{r3, r4, r5, pc}
 8006e04:	2000071c 	.word	0x2000071c

08006e08 <__swsetup_r>:
 8006e08:	4b32      	ldr	r3, [pc, #200]	; (8006ed4 <__swsetup_r+0xcc>)
 8006e0a:	b570      	push	{r4, r5, r6, lr}
 8006e0c:	681d      	ldr	r5, [r3, #0]
 8006e0e:	4606      	mov	r6, r0
 8006e10:	460c      	mov	r4, r1
 8006e12:	b125      	cbz	r5, 8006e1e <__swsetup_r+0x16>
 8006e14:	69ab      	ldr	r3, [r5, #24]
 8006e16:	b913      	cbnz	r3, 8006e1e <__swsetup_r+0x16>
 8006e18:	4628      	mov	r0, r5
 8006e1a:	f7ff fcb3 	bl	8006784 <__sinit>
 8006e1e:	4b2e      	ldr	r3, [pc, #184]	; (8006ed8 <__swsetup_r+0xd0>)
 8006e20:	429c      	cmp	r4, r3
 8006e22:	d10f      	bne.n	8006e44 <__swsetup_r+0x3c>
 8006e24:	686c      	ldr	r4, [r5, #4]
 8006e26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	0715      	lsls	r5, r2, #28
 8006e2e:	d42c      	bmi.n	8006e8a <__swsetup_r+0x82>
 8006e30:	06d0      	lsls	r0, r2, #27
 8006e32:	d411      	bmi.n	8006e58 <__swsetup_r+0x50>
 8006e34:	2209      	movs	r2, #9
 8006e36:	6032      	str	r2, [r6, #0]
 8006e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e3c:	81a3      	strh	r3, [r4, #12]
 8006e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006e42:	e03e      	b.n	8006ec2 <__swsetup_r+0xba>
 8006e44:	4b25      	ldr	r3, [pc, #148]	; (8006edc <__swsetup_r+0xd4>)
 8006e46:	429c      	cmp	r4, r3
 8006e48:	d101      	bne.n	8006e4e <__swsetup_r+0x46>
 8006e4a:	68ac      	ldr	r4, [r5, #8]
 8006e4c:	e7eb      	b.n	8006e26 <__swsetup_r+0x1e>
 8006e4e:	4b24      	ldr	r3, [pc, #144]	; (8006ee0 <__swsetup_r+0xd8>)
 8006e50:	429c      	cmp	r4, r3
 8006e52:	bf08      	it	eq
 8006e54:	68ec      	ldreq	r4, [r5, #12]
 8006e56:	e7e6      	b.n	8006e26 <__swsetup_r+0x1e>
 8006e58:	0751      	lsls	r1, r2, #29
 8006e5a:	d512      	bpl.n	8006e82 <__swsetup_r+0x7a>
 8006e5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e5e:	b141      	cbz	r1, 8006e72 <__swsetup_r+0x6a>
 8006e60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e64:	4299      	cmp	r1, r3
 8006e66:	d002      	beq.n	8006e6e <__swsetup_r+0x66>
 8006e68:	4630      	mov	r0, r6
 8006e6a:	f7ff fd4d 	bl	8006908 <_free_r>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	6363      	str	r3, [r4, #52]	; 0x34
 8006e72:	89a3      	ldrh	r3, [r4, #12]
 8006e74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e78:	81a3      	strh	r3, [r4, #12]
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	6063      	str	r3, [r4, #4]
 8006e7e:	6923      	ldr	r3, [r4, #16]
 8006e80:	6023      	str	r3, [r4, #0]
 8006e82:	89a3      	ldrh	r3, [r4, #12]
 8006e84:	f043 0308 	orr.w	r3, r3, #8
 8006e88:	81a3      	strh	r3, [r4, #12]
 8006e8a:	6923      	ldr	r3, [r4, #16]
 8006e8c:	b94b      	cbnz	r3, 8006ea2 <__swsetup_r+0x9a>
 8006e8e:	89a3      	ldrh	r3, [r4, #12]
 8006e90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e98:	d003      	beq.n	8006ea2 <__swsetup_r+0x9a>
 8006e9a:	4621      	mov	r1, r4
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	f000 f86b 	bl	8006f78 <__smakebuf_r>
 8006ea2:	89a2      	ldrh	r2, [r4, #12]
 8006ea4:	f012 0301 	ands.w	r3, r2, #1
 8006ea8:	d00c      	beq.n	8006ec4 <__swsetup_r+0xbc>
 8006eaa:	2300      	movs	r3, #0
 8006eac:	60a3      	str	r3, [r4, #8]
 8006eae:	6963      	ldr	r3, [r4, #20]
 8006eb0:	425b      	negs	r3, r3
 8006eb2:	61a3      	str	r3, [r4, #24]
 8006eb4:	6923      	ldr	r3, [r4, #16]
 8006eb6:	b953      	cbnz	r3, 8006ece <__swsetup_r+0xc6>
 8006eb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ebc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006ec0:	d1ba      	bne.n	8006e38 <__swsetup_r+0x30>
 8006ec2:	bd70      	pop	{r4, r5, r6, pc}
 8006ec4:	0792      	lsls	r2, r2, #30
 8006ec6:	bf58      	it	pl
 8006ec8:	6963      	ldrpl	r3, [r4, #20]
 8006eca:	60a3      	str	r3, [r4, #8]
 8006ecc:	e7f2      	b.n	8006eb4 <__swsetup_r+0xac>
 8006ece:	2000      	movs	r0, #0
 8006ed0:	e7f7      	b.n	8006ec2 <__swsetup_r+0xba>
 8006ed2:	bf00      	nop
 8006ed4:	20000024 	.word	0x20000024
 8006ed8:	0800797c 	.word	0x0800797c
 8006edc:	0800799c 	.word	0x0800799c
 8006ee0:	0800795c 	.word	0x0800795c

08006ee4 <_close_r>:
 8006ee4:	b538      	push	{r3, r4, r5, lr}
 8006ee6:	4c06      	ldr	r4, [pc, #24]	; (8006f00 <_close_r+0x1c>)
 8006ee8:	2300      	movs	r3, #0
 8006eea:	4605      	mov	r5, r0
 8006eec:	4608      	mov	r0, r1
 8006eee:	6023      	str	r3, [r4, #0]
 8006ef0:	f7fa fcc3 	bl	800187a <_close>
 8006ef4:	1c43      	adds	r3, r0, #1
 8006ef6:	d102      	bne.n	8006efe <_close_r+0x1a>
 8006ef8:	6823      	ldr	r3, [r4, #0]
 8006efa:	b103      	cbz	r3, 8006efe <_close_r+0x1a>
 8006efc:	602b      	str	r3, [r5, #0]
 8006efe:	bd38      	pop	{r3, r4, r5, pc}
 8006f00:	2000071c 	.word	0x2000071c

08006f04 <__locale_ctype_ptr_l>:
 8006f04:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006f08:	4770      	bx	lr
	...

08006f0c <_lseek_r>:
 8006f0c:	b538      	push	{r3, r4, r5, lr}
 8006f0e:	4c07      	ldr	r4, [pc, #28]	; (8006f2c <_lseek_r+0x20>)
 8006f10:	4605      	mov	r5, r0
 8006f12:	4608      	mov	r0, r1
 8006f14:	4611      	mov	r1, r2
 8006f16:	2200      	movs	r2, #0
 8006f18:	6022      	str	r2, [r4, #0]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	f7fa fcd4 	bl	80018c8 <_lseek>
 8006f20:	1c43      	adds	r3, r0, #1
 8006f22:	d102      	bne.n	8006f2a <_lseek_r+0x1e>
 8006f24:	6823      	ldr	r3, [r4, #0]
 8006f26:	b103      	cbz	r3, 8006f2a <_lseek_r+0x1e>
 8006f28:	602b      	str	r3, [r5, #0]
 8006f2a:	bd38      	pop	{r3, r4, r5, pc}
 8006f2c:	2000071c 	.word	0x2000071c

08006f30 <__swhatbuf_r>:
 8006f30:	b570      	push	{r4, r5, r6, lr}
 8006f32:	460e      	mov	r6, r1
 8006f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f38:	2900      	cmp	r1, #0
 8006f3a:	b096      	sub	sp, #88	; 0x58
 8006f3c:	4614      	mov	r4, r2
 8006f3e:	461d      	mov	r5, r3
 8006f40:	da07      	bge.n	8006f52 <__swhatbuf_r+0x22>
 8006f42:	2300      	movs	r3, #0
 8006f44:	602b      	str	r3, [r5, #0]
 8006f46:	89b3      	ldrh	r3, [r6, #12]
 8006f48:	061a      	lsls	r2, r3, #24
 8006f4a:	d410      	bmi.n	8006f6e <__swhatbuf_r+0x3e>
 8006f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f50:	e00e      	b.n	8006f70 <__swhatbuf_r+0x40>
 8006f52:	466a      	mov	r2, sp
 8006f54:	f000 fb82 	bl	800765c <_fstat_r>
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	dbf2      	blt.n	8006f42 <__swhatbuf_r+0x12>
 8006f5c:	9a01      	ldr	r2, [sp, #4]
 8006f5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f66:	425a      	negs	r2, r3
 8006f68:	415a      	adcs	r2, r3
 8006f6a:	602a      	str	r2, [r5, #0]
 8006f6c:	e7ee      	b.n	8006f4c <__swhatbuf_r+0x1c>
 8006f6e:	2340      	movs	r3, #64	; 0x40
 8006f70:	2000      	movs	r0, #0
 8006f72:	6023      	str	r3, [r4, #0]
 8006f74:	b016      	add	sp, #88	; 0x58
 8006f76:	bd70      	pop	{r4, r5, r6, pc}

08006f78 <__smakebuf_r>:
 8006f78:	898b      	ldrh	r3, [r1, #12]
 8006f7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f7c:	079d      	lsls	r5, r3, #30
 8006f7e:	4606      	mov	r6, r0
 8006f80:	460c      	mov	r4, r1
 8006f82:	d507      	bpl.n	8006f94 <__smakebuf_r+0x1c>
 8006f84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	6123      	str	r3, [r4, #16]
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	6163      	str	r3, [r4, #20]
 8006f90:	b002      	add	sp, #8
 8006f92:	bd70      	pop	{r4, r5, r6, pc}
 8006f94:	ab01      	add	r3, sp, #4
 8006f96:	466a      	mov	r2, sp
 8006f98:	f7ff ffca 	bl	8006f30 <__swhatbuf_r>
 8006f9c:	9900      	ldr	r1, [sp, #0]
 8006f9e:	4605      	mov	r5, r0
 8006fa0:	4630      	mov	r0, r6
 8006fa2:	f7ff fcff 	bl	80069a4 <_malloc_r>
 8006fa6:	b948      	cbnz	r0, 8006fbc <__smakebuf_r+0x44>
 8006fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fac:	059a      	lsls	r2, r3, #22
 8006fae:	d4ef      	bmi.n	8006f90 <__smakebuf_r+0x18>
 8006fb0:	f023 0303 	bic.w	r3, r3, #3
 8006fb4:	f043 0302 	orr.w	r3, r3, #2
 8006fb8:	81a3      	strh	r3, [r4, #12]
 8006fba:	e7e3      	b.n	8006f84 <__smakebuf_r+0xc>
 8006fbc:	4b0d      	ldr	r3, [pc, #52]	; (8006ff4 <__smakebuf_r+0x7c>)
 8006fbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8006fc0:	89a3      	ldrh	r3, [r4, #12]
 8006fc2:	6020      	str	r0, [r4, #0]
 8006fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fc8:	81a3      	strh	r3, [r4, #12]
 8006fca:	9b00      	ldr	r3, [sp, #0]
 8006fcc:	6163      	str	r3, [r4, #20]
 8006fce:	9b01      	ldr	r3, [sp, #4]
 8006fd0:	6120      	str	r0, [r4, #16]
 8006fd2:	b15b      	cbz	r3, 8006fec <__smakebuf_r+0x74>
 8006fd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fd8:	4630      	mov	r0, r6
 8006fda:	f000 fb51 	bl	8007680 <_isatty_r>
 8006fde:	b128      	cbz	r0, 8006fec <__smakebuf_r+0x74>
 8006fe0:	89a3      	ldrh	r3, [r4, #12]
 8006fe2:	f023 0303 	bic.w	r3, r3, #3
 8006fe6:	f043 0301 	orr.w	r3, r3, #1
 8006fea:	81a3      	strh	r3, [r4, #12]
 8006fec:	89a3      	ldrh	r3, [r4, #12]
 8006fee:	431d      	orrs	r5, r3
 8006ff0:	81a5      	strh	r5, [r4, #12]
 8006ff2:	e7cd      	b.n	8006f90 <__smakebuf_r+0x18>
 8006ff4:	0800674d 	.word	0x0800674d

08006ff8 <__ascii_mbtowc>:
 8006ff8:	b082      	sub	sp, #8
 8006ffa:	b901      	cbnz	r1, 8006ffe <__ascii_mbtowc+0x6>
 8006ffc:	a901      	add	r1, sp, #4
 8006ffe:	b142      	cbz	r2, 8007012 <__ascii_mbtowc+0x1a>
 8007000:	b14b      	cbz	r3, 8007016 <__ascii_mbtowc+0x1e>
 8007002:	7813      	ldrb	r3, [r2, #0]
 8007004:	600b      	str	r3, [r1, #0]
 8007006:	7812      	ldrb	r2, [r2, #0]
 8007008:	1c10      	adds	r0, r2, #0
 800700a:	bf18      	it	ne
 800700c:	2001      	movne	r0, #1
 800700e:	b002      	add	sp, #8
 8007010:	4770      	bx	lr
 8007012:	4610      	mov	r0, r2
 8007014:	e7fb      	b.n	800700e <__ascii_mbtowc+0x16>
 8007016:	f06f 0001 	mvn.w	r0, #1
 800701a:	e7f8      	b.n	800700e <__ascii_mbtowc+0x16>

0800701c <__malloc_lock>:
 800701c:	4770      	bx	lr

0800701e <__malloc_unlock>:
 800701e:	4770      	bx	lr

08007020 <__sfputc_r>:
 8007020:	6893      	ldr	r3, [r2, #8]
 8007022:	3b01      	subs	r3, #1
 8007024:	2b00      	cmp	r3, #0
 8007026:	b410      	push	{r4}
 8007028:	6093      	str	r3, [r2, #8]
 800702a:	da08      	bge.n	800703e <__sfputc_r+0x1e>
 800702c:	6994      	ldr	r4, [r2, #24]
 800702e:	42a3      	cmp	r3, r4
 8007030:	db01      	blt.n	8007036 <__sfputc_r+0x16>
 8007032:	290a      	cmp	r1, #10
 8007034:	d103      	bne.n	800703e <__sfputc_r+0x1e>
 8007036:	f85d 4b04 	ldr.w	r4, [sp], #4
 800703a:	f7ff be81 	b.w	8006d40 <__swbuf_r>
 800703e:	6813      	ldr	r3, [r2, #0]
 8007040:	1c58      	adds	r0, r3, #1
 8007042:	6010      	str	r0, [r2, #0]
 8007044:	7019      	strb	r1, [r3, #0]
 8007046:	4608      	mov	r0, r1
 8007048:	f85d 4b04 	ldr.w	r4, [sp], #4
 800704c:	4770      	bx	lr

0800704e <__sfputs_r>:
 800704e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007050:	4606      	mov	r6, r0
 8007052:	460f      	mov	r7, r1
 8007054:	4614      	mov	r4, r2
 8007056:	18d5      	adds	r5, r2, r3
 8007058:	42ac      	cmp	r4, r5
 800705a:	d101      	bne.n	8007060 <__sfputs_r+0x12>
 800705c:	2000      	movs	r0, #0
 800705e:	e007      	b.n	8007070 <__sfputs_r+0x22>
 8007060:	463a      	mov	r2, r7
 8007062:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007066:	4630      	mov	r0, r6
 8007068:	f7ff ffda 	bl	8007020 <__sfputc_r>
 800706c:	1c43      	adds	r3, r0, #1
 800706e:	d1f3      	bne.n	8007058 <__sfputs_r+0xa>
 8007070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007074 <_vfiprintf_r>:
 8007074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007078:	460c      	mov	r4, r1
 800707a:	b09d      	sub	sp, #116	; 0x74
 800707c:	4617      	mov	r7, r2
 800707e:	461d      	mov	r5, r3
 8007080:	4606      	mov	r6, r0
 8007082:	b118      	cbz	r0, 800708c <_vfiprintf_r+0x18>
 8007084:	6983      	ldr	r3, [r0, #24]
 8007086:	b90b      	cbnz	r3, 800708c <_vfiprintf_r+0x18>
 8007088:	f7ff fb7c 	bl	8006784 <__sinit>
 800708c:	4b7c      	ldr	r3, [pc, #496]	; (8007280 <_vfiprintf_r+0x20c>)
 800708e:	429c      	cmp	r4, r3
 8007090:	d158      	bne.n	8007144 <_vfiprintf_r+0xd0>
 8007092:	6874      	ldr	r4, [r6, #4]
 8007094:	89a3      	ldrh	r3, [r4, #12]
 8007096:	0718      	lsls	r0, r3, #28
 8007098:	d55e      	bpl.n	8007158 <_vfiprintf_r+0xe4>
 800709a:	6923      	ldr	r3, [r4, #16]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d05b      	beq.n	8007158 <_vfiprintf_r+0xe4>
 80070a0:	2300      	movs	r3, #0
 80070a2:	9309      	str	r3, [sp, #36]	; 0x24
 80070a4:	2320      	movs	r3, #32
 80070a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070aa:	2330      	movs	r3, #48	; 0x30
 80070ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070b0:	9503      	str	r5, [sp, #12]
 80070b2:	f04f 0b01 	mov.w	fp, #1
 80070b6:	46b8      	mov	r8, r7
 80070b8:	4645      	mov	r5, r8
 80070ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80070be:	b10b      	cbz	r3, 80070c4 <_vfiprintf_r+0x50>
 80070c0:	2b25      	cmp	r3, #37	; 0x25
 80070c2:	d154      	bne.n	800716e <_vfiprintf_r+0xfa>
 80070c4:	ebb8 0a07 	subs.w	sl, r8, r7
 80070c8:	d00b      	beq.n	80070e2 <_vfiprintf_r+0x6e>
 80070ca:	4653      	mov	r3, sl
 80070cc:	463a      	mov	r2, r7
 80070ce:	4621      	mov	r1, r4
 80070d0:	4630      	mov	r0, r6
 80070d2:	f7ff ffbc 	bl	800704e <__sfputs_r>
 80070d6:	3001      	adds	r0, #1
 80070d8:	f000 80c2 	beq.w	8007260 <_vfiprintf_r+0x1ec>
 80070dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070de:	4453      	add	r3, sl
 80070e0:	9309      	str	r3, [sp, #36]	; 0x24
 80070e2:	f898 3000 	ldrb.w	r3, [r8]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f000 80ba 	beq.w	8007260 <_vfiprintf_r+0x1ec>
 80070ec:	2300      	movs	r3, #0
 80070ee:	f04f 32ff 	mov.w	r2, #4294967295
 80070f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070f6:	9304      	str	r3, [sp, #16]
 80070f8:	9307      	str	r3, [sp, #28]
 80070fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070fe:	931a      	str	r3, [sp, #104]	; 0x68
 8007100:	46a8      	mov	r8, r5
 8007102:	2205      	movs	r2, #5
 8007104:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007108:	485e      	ldr	r0, [pc, #376]	; (8007284 <_vfiprintf_r+0x210>)
 800710a:	f7f9 f869 	bl	80001e0 <memchr>
 800710e:	9b04      	ldr	r3, [sp, #16]
 8007110:	bb78      	cbnz	r0, 8007172 <_vfiprintf_r+0xfe>
 8007112:	06d9      	lsls	r1, r3, #27
 8007114:	bf44      	itt	mi
 8007116:	2220      	movmi	r2, #32
 8007118:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800711c:	071a      	lsls	r2, r3, #28
 800711e:	bf44      	itt	mi
 8007120:	222b      	movmi	r2, #43	; 0x2b
 8007122:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007126:	782a      	ldrb	r2, [r5, #0]
 8007128:	2a2a      	cmp	r2, #42	; 0x2a
 800712a:	d02a      	beq.n	8007182 <_vfiprintf_r+0x10e>
 800712c:	9a07      	ldr	r2, [sp, #28]
 800712e:	46a8      	mov	r8, r5
 8007130:	2000      	movs	r0, #0
 8007132:	250a      	movs	r5, #10
 8007134:	4641      	mov	r1, r8
 8007136:	f811 3b01 	ldrb.w	r3, [r1], #1
 800713a:	3b30      	subs	r3, #48	; 0x30
 800713c:	2b09      	cmp	r3, #9
 800713e:	d969      	bls.n	8007214 <_vfiprintf_r+0x1a0>
 8007140:	b360      	cbz	r0, 800719c <_vfiprintf_r+0x128>
 8007142:	e024      	b.n	800718e <_vfiprintf_r+0x11a>
 8007144:	4b50      	ldr	r3, [pc, #320]	; (8007288 <_vfiprintf_r+0x214>)
 8007146:	429c      	cmp	r4, r3
 8007148:	d101      	bne.n	800714e <_vfiprintf_r+0xda>
 800714a:	68b4      	ldr	r4, [r6, #8]
 800714c:	e7a2      	b.n	8007094 <_vfiprintf_r+0x20>
 800714e:	4b4f      	ldr	r3, [pc, #316]	; (800728c <_vfiprintf_r+0x218>)
 8007150:	429c      	cmp	r4, r3
 8007152:	bf08      	it	eq
 8007154:	68f4      	ldreq	r4, [r6, #12]
 8007156:	e79d      	b.n	8007094 <_vfiprintf_r+0x20>
 8007158:	4621      	mov	r1, r4
 800715a:	4630      	mov	r0, r6
 800715c:	f7ff fe54 	bl	8006e08 <__swsetup_r>
 8007160:	2800      	cmp	r0, #0
 8007162:	d09d      	beq.n	80070a0 <_vfiprintf_r+0x2c>
 8007164:	f04f 30ff 	mov.w	r0, #4294967295
 8007168:	b01d      	add	sp, #116	; 0x74
 800716a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800716e:	46a8      	mov	r8, r5
 8007170:	e7a2      	b.n	80070b8 <_vfiprintf_r+0x44>
 8007172:	4a44      	ldr	r2, [pc, #272]	; (8007284 <_vfiprintf_r+0x210>)
 8007174:	1a80      	subs	r0, r0, r2
 8007176:	fa0b f000 	lsl.w	r0, fp, r0
 800717a:	4318      	orrs	r0, r3
 800717c:	9004      	str	r0, [sp, #16]
 800717e:	4645      	mov	r5, r8
 8007180:	e7be      	b.n	8007100 <_vfiprintf_r+0x8c>
 8007182:	9a03      	ldr	r2, [sp, #12]
 8007184:	1d11      	adds	r1, r2, #4
 8007186:	6812      	ldr	r2, [r2, #0]
 8007188:	9103      	str	r1, [sp, #12]
 800718a:	2a00      	cmp	r2, #0
 800718c:	db01      	blt.n	8007192 <_vfiprintf_r+0x11e>
 800718e:	9207      	str	r2, [sp, #28]
 8007190:	e004      	b.n	800719c <_vfiprintf_r+0x128>
 8007192:	4252      	negs	r2, r2
 8007194:	f043 0302 	orr.w	r3, r3, #2
 8007198:	9207      	str	r2, [sp, #28]
 800719a:	9304      	str	r3, [sp, #16]
 800719c:	f898 3000 	ldrb.w	r3, [r8]
 80071a0:	2b2e      	cmp	r3, #46	; 0x2e
 80071a2:	d10e      	bne.n	80071c2 <_vfiprintf_r+0x14e>
 80071a4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80071a8:	2b2a      	cmp	r3, #42	; 0x2a
 80071aa:	d138      	bne.n	800721e <_vfiprintf_r+0x1aa>
 80071ac:	9b03      	ldr	r3, [sp, #12]
 80071ae:	1d1a      	adds	r2, r3, #4
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	9203      	str	r2, [sp, #12]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	bfb8      	it	lt
 80071b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80071bc:	f108 0802 	add.w	r8, r8, #2
 80071c0:	9305      	str	r3, [sp, #20]
 80071c2:	4d33      	ldr	r5, [pc, #204]	; (8007290 <_vfiprintf_r+0x21c>)
 80071c4:	f898 1000 	ldrb.w	r1, [r8]
 80071c8:	2203      	movs	r2, #3
 80071ca:	4628      	mov	r0, r5
 80071cc:	f7f9 f808 	bl	80001e0 <memchr>
 80071d0:	b140      	cbz	r0, 80071e4 <_vfiprintf_r+0x170>
 80071d2:	2340      	movs	r3, #64	; 0x40
 80071d4:	1b40      	subs	r0, r0, r5
 80071d6:	fa03 f000 	lsl.w	r0, r3, r0
 80071da:	9b04      	ldr	r3, [sp, #16]
 80071dc:	4303      	orrs	r3, r0
 80071de:	f108 0801 	add.w	r8, r8, #1
 80071e2:	9304      	str	r3, [sp, #16]
 80071e4:	f898 1000 	ldrb.w	r1, [r8]
 80071e8:	482a      	ldr	r0, [pc, #168]	; (8007294 <_vfiprintf_r+0x220>)
 80071ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071ee:	2206      	movs	r2, #6
 80071f0:	f108 0701 	add.w	r7, r8, #1
 80071f4:	f7f8 fff4 	bl	80001e0 <memchr>
 80071f8:	2800      	cmp	r0, #0
 80071fa:	d037      	beq.n	800726c <_vfiprintf_r+0x1f8>
 80071fc:	4b26      	ldr	r3, [pc, #152]	; (8007298 <_vfiprintf_r+0x224>)
 80071fe:	bb1b      	cbnz	r3, 8007248 <_vfiprintf_r+0x1d4>
 8007200:	9b03      	ldr	r3, [sp, #12]
 8007202:	3307      	adds	r3, #7
 8007204:	f023 0307 	bic.w	r3, r3, #7
 8007208:	3308      	adds	r3, #8
 800720a:	9303      	str	r3, [sp, #12]
 800720c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800720e:	444b      	add	r3, r9
 8007210:	9309      	str	r3, [sp, #36]	; 0x24
 8007212:	e750      	b.n	80070b6 <_vfiprintf_r+0x42>
 8007214:	fb05 3202 	mla	r2, r5, r2, r3
 8007218:	2001      	movs	r0, #1
 800721a:	4688      	mov	r8, r1
 800721c:	e78a      	b.n	8007134 <_vfiprintf_r+0xc0>
 800721e:	2300      	movs	r3, #0
 8007220:	f108 0801 	add.w	r8, r8, #1
 8007224:	9305      	str	r3, [sp, #20]
 8007226:	4619      	mov	r1, r3
 8007228:	250a      	movs	r5, #10
 800722a:	4640      	mov	r0, r8
 800722c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007230:	3a30      	subs	r2, #48	; 0x30
 8007232:	2a09      	cmp	r2, #9
 8007234:	d903      	bls.n	800723e <_vfiprintf_r+0x1ca>
 8007236:	2b00      	cmp	r3, #0
 8007238:	d0c3      	beq.n	80071c2 <_vfiprintf_r+0x14e>
 800723a:	9105      	str	r1, [sp, #20]
 800723c:	e7c1      	b.n	80071c2 <_vfiprintf_r+0x14e>
 800723e:	fb05 2101 	mla	r1, r5, r1, r2
 8007242:	2301      	movs	r3, #1
 8007244:	4680      	mov	r8, r0
 8007246:	e7f0      	b.n	800722a <_vfiprintf_r+0x1b6>
 8007248:	ab03      	add	r3, sp, #12
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	4622      	mov	r2, r4
 800724e:	4b13      	ldr	r3, [pc, #76]	; (800729c <_vfiprintf_r+0x228>)
 8007250:	a904      	add	r1, sp, #16
 8007252:	4630      	mov	r0, r6
 8007254:	f3af 8000 	nop.w
 8007258:	f1b0 3fff 	cmp.w	r0, #4294967295
 800725c:	4681      	mov	r9, r0
 800725e:	d1d5      	bne.n	800720c <_vfiprintf_r+0x198>
 8007260:	89a3      	ldrh	r3, [r4, #12]
 8007262:	065b      	lsls	r3, r3, #25
 8007264:	f53f af7e 	bmi.w	8007164 <_vfiprintf_r+0xf0>
 8007268:	9809      	ldr	r0, [sp, #36]	; 0x24
 800726a:	e77d      	b.n	8007168 <_vfiprintf_r+0xf4>
 800726c:	ab03      	add	r3, sp, #12
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	4622      	mov	r2, r4
 8007272:	4b0a      	ldr	r3, [pc, #40]	; (800729c <_vfiprintf_r+0x228>)
 8007274:	a904      	add	r1, sp, #16
 8007276:	4630      	mov	r0, r6
 8007278:	f000 f888 	bl	800738c <_printf_i>
 800727c:	e7ec      	b.n	8007258 <_vfiprintf_r+0x1e4>
 800727e:	bf00      	nop
 8007280:	0800797c 	.word	0x0800797c
 8007284:	080079ca 	.word	0x080079ca
 8007288:	0800799c 	.word	0x0800799c
 800728c:	0800795c 	.word	0x0800795c
 8007290:	080079d0 	.word	0x080079d0
 8007294:	080079d4 	.word	0x080079d4
 8007298:	00000000 	.word	0x00000000
 800729c:	0800704f 	.word	0x0800704f

080072a0 <_printf_common>:
 80072a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072a4:	4691      	mov	r9, r2
 80072a6:	461f      	mov	r7, r3
 80072a8:	688a      	ldr	r2, [r1, #8]
 80072aa:	690b      	ldr	r3, [r1, #16]
 80072ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072b0:	4293      	cmp	r3, r2
 80072b2:	bfb8      	it	lt
 80072b4:	4613      	movlt	r3, r2
 80072b6:	f8c9 3000 	str.w	r3, [r9]
 80072ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072be:	4606      	mov	r6, r0
 80072c0:	460c      	mov	r4, r1
 80072c2:	b112      	cbz	r2, 80072ca <_printf_common+0x2a>
 80072c4:	3301      	adds	r3, #1
 80072c6:	f8c9 3000 	str.w	r3, [r9]
 80072ca:	6823      	ldr	r3, [r4, #0]
 80072cc:	0699      	lsls	r1, r3, #26
 80072ce:	bf42      	ittt	mi
 80072d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80072d4:	3302      	addmi	r3, #2
 80072d6:	f8c9 3000 	strmi.w	r3, [r9]
 80072da:	6825      	ldr	r5, [r4, #0]
 80072dc:	f015 0506 	ands.w	r5, r5, #6
 80072e0:	d107      	bne.n	80072f2 <_printf_common+0x52>
 80072e2:	f104 0a19 	add.w	sl, r4, #25
 80072e6:	68e3      	ldr	r3, [r4, #12]
 80072e8:	f8d9 2000 	ldr.w	r2, [r9]
 80072ec:	1a9b      	subs	r3, r3, r2
 80072ee:	42ab      	cmp	r3, r5
 80072f0:	dc28      	bgt.n	8007344 <_printf_common+0xa4>
 80072f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80072f6:	6822      	ldr	r2, [r4, #0]
 80072f8:	3300      	adds	r3, #0
 80072fa:	bf18      	it	ne
 80072fc:	2301      	movne	r3, #1
 80072fe:	0692      	lsls	r2, r2, #26
 8007300:	d42d      	bmi.n	800735e <_printf_common+0xbe>
 8007302:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007306:	4639      	mov	r1, r7
 8007308:	4630      	mov	r0, r6
 800730a:	47c0      	blx	r8
 800730c:	3001      	adds	r0, #1
 800730e:	d020      	beq.n	8007352 <_printf_common+0xb2>
 8007310:	6823      	ldr	r3, [r4, #0]
 8007312:	68e5      	ldr	r5, [r4, #12]
 8007314:	f8d9 2000 	ldr.w	r2, [r9]
 8007318:	f003 0306 	and.w	r3, r3, #6
 800731c:	2b04      	cmp	r3, #4
 800731e:	bf08      	it	eq
 8007320:	1aad      	subeq	r5, r5, r2
 8007322:	68a3      	ldr	r3, [r4, #8]
 8007324:	6922      	ldr	r2, [r4, #16]
 8007326:	bf0c      	ite	eq
 8007328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800732c:	2500      	movne	r5, #0
 800732e:	4293      	cmp	r3, r2
 8007330:	bfc4      	itt	gt
 8007332:	1a9b      	subgt	r3, r3, r2
 8007334:	18ed      	addgt	r5, r5, r3
 8007336:	f04f 0900 	mov.w	r9, #0
 800733a:	341a      	adds	r4, #26
 800733c:	454d      	cmp	r5, r9
 800733e:	d11a      	bne.n	8007376 <_printf_common+0xd6>
 8007340:	2000      	movs	r0, #0
 8007342:	e008      	b.n	8007356 <_printf_common+0xb6>
 8007344:	2301      	movs	r3, #1
 8007346:	4652      	mov	r2, sl
 8007348:	4639      	mov	r1, r7
 800734a:	4630      	mov	r0, r6
 800734c:	47c0      	blx	r8
 800734e:	3001      	adds	r0, #1
 8007350:	d103      	bne.n	800735a <_printf_common+0xba>
 8007352:	f04f 30ff 	mov.w	r0, #4294967295
 8007356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800735a:	3501      	adds	r5, #1
 800735c:	e7c3      	b.n	80072e6 <_printf_common+0x46>
 800735e:	18e1      	adds	r1, r4, r3
 8007360:	1c5a      	adds	r2, r3, #1
 8007362:	2030      	movs	r0, #48	; 0x30
 8007364:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007368:	4422      	add	r2, r4
 800736a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800736e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007372:	3302      	adds	r3, #2
 8007374:	e7c5      	b.n	8007302 <_printf_common+0x62>
 8007376:	2301      	movs	r3, #1
 8007378:	4622      	mov	r2, r4
 800737a:	4639      	mov	r1, r7
 800737c:	4630      	mov	r0, r6
 800737e:	47c0      	blx	r8
 8007380:	3001      	adds	r0, #1
 8007382:	d0e6      	beq.n	8007352 <_printf_common+0xb2>
 8007384:	f109 0901 	add.w	r9, r9, #1
 8007388:	e7d8      	b.n	800733c <_printf_common+0x9c>
	...

0800738c <_printf_i>:
 800738c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007390:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007394:	460c      	mov	r4, r1
 8007396:	7e09      	ldrb	r1, [r1, #24]
 8007398:	b085      	sub	sp, #20
 800739a:	296e      	cmp	r1, #110	; 0x6e
 800739c:	4617      	mov	r7, r2
 800739e:	4606      	mov	r6, r0
 80073a0:	4698      	mov	r8, r3
 80073a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073a4:	f000 80b3 	beq.w	800750e <_printf_i+0x182>
 80073a8:	d822      	bhi.n	80073f0 <_printf_i+0x64>
 80073aa:	2963      	cmp	r1, #99	; 0x63
 80073ac:	d036      	beq.n	800741c <_printf_i+0x90>
 80073ae:	d80a      	bhi.n	80073c6 <_printf_i+0x3a>
 80073b0:	2900      	cmp	r1, #0
 80073b2:	f000 80b9 	beq.w	8007528 <_printf_i+0x19c>
 80073b6:	2958      	cmp	r1, #88	; 0x58
 80073b8:	f000 8083 	beq.w	80074c2 <_printf_i+0x136>
 80073bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80073c4:	e032      	b.n	800742c <_printf_i+0xa0>
 80073c6:	2964      	cmp	r1, #100	; 0x64
 80073c8:	d001      	beq.n	80073ce <_printf_i+0x42>
 80073ca:	2969      	cmp	r1, #105	; 0x69
 80073cc:	d1f6      	bne.n	80073bc <_printf_i+0x30>
 80073ce:	6820      	ldr	r0, [r4, #0]
 80073d0:	6813      	ldr	r3, [r2, #0]
 80073d2:	0605      	lsls	r5, r0, #24
 80073d4:	f103 0104 	add.w	r1, r3, #4
 80073d8:	d52a      	bpl.n	8007430 <_printf_i+0xa4>
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6011      	str	r1, [r2, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	da03      	bge.n	80073ea <_printf_i+0x5e>
 80073e2:	222d      	movs	r2, #45	; 0x2d
 80073e4:	425b      	negs	r3, r3
 80073e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80073ea:	486f      	ldr	r0, [pc, #444]	; (80075a8 <_printf_i+0x21c>)
 80073ec:	220a      	movs	r2, #10
 80073ee:	e039      	b.n	8007464 <_printf_i+0xd8>
 80073f0:	2973      	cmp	r1, #115	; 0x73
 80073f2:	f000 809d 	beq.w	8007530 <_printf_i+0x1a4>
 80073f6:	d808      	bhi.n	800740a <_printf_i+0x7e>
 80073f8:	296f      	cmp	r1, #111	; 0x6f
 80073fa:	d020      	beq.n	800743e <_printf_i+0xb2>
 80073fc:	2970      	cmp	r1, #112	; 0x70
 80073fe:	d1dd      	bne.n	80073bc <_printf_i+0x30>
 8007400:	6823      	ldr	r3, [r4, #0]
 8007402:	f043 0320 	orr.w	r3, r3, #32
 8007406:	6023      	str	r3, [r4, #0]
 8007408:	e003      	b.n	8007412 <_printf_i+0x86>
 800740a:	2975      	cmp	r1, #117	; 0x75
 800740c:	d017      	beq.n	800743e <_printf_i+0xb2>
 800740e:	2978      	cmp	r1, #120	; 0x78
 8007410:	d1d4      	bne.n	80073bc <_printf_i+0x30>
 8007412:	2378      	movs	r3, #120	; 0x78
 8007414:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007418:	4864      	ldr	r0, [pc, #400]	; (80075ac <_printf_i+0x220>)
 800741a:	e055      	b.n	80074c8 <_printf_i+0x13c>
 800741c:	6813      	ldr	r3, [r2, #0]
 800741e:	1d19      	adds	r1, r3, #4
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6011      	str	r1, [r2, #0]
 8007424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007428:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800742c:	2301      	movs	r3, #1
 800742e:	e08c      	b.n	800754a <_printf_i+0x1be>
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	6011      	str	r1, [r2, #0]
 8007434:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007438:	bf18      	it	ne
 800743a:	b21b      	sxthne	r3, r3
 800743c:	e7cf      	b.n	80073de <_printf_i+0x52>
 800743e:	6813      	ldr	r3, [r2, #0]
 8007440:	6825      	ldr	r5, [r4, #0]
 8007442:	1d18      	adds	r0, r3, #4
 8007444:	6010      	str	r0, [r2, #0]
 8007446:	0628      	lsls	r0, r5, #24
 8007448:	d501      	bpl.n	800744e <_printf_i+0xc2>
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	e002      	b.n	8007454 <_printf_i+0xc8>
 800744e:	0668      	lsls	r0, r5, #25
 8007450:	d5fb      	bpl.n	800744a <_printf_i+0xbe>
 8007452:	881b      	ldrh	r3, [r3, #0]
 8007454:	4854      	ldr	r0, [pc, #336]	; (80075a8 <_printf_i+0x21c>)
 8007456:	296f      	cmp	r1, #111	; 0x6f
 8007458:	bf14      	ite	ne
 800745a:	220a      	movne	r2, #10
 800745c:	2208      	moveq	r2, #8
 800745e:	2100      	movs	r1, #0
 8007460:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007464:	6865      	ldr	r5, [r4, #4]
 8007466:	60a5      	str	r5, [r4, #8]
 8007468:	2d00      	cmp	r5, #0
 800746a:	f2c0 8095 	blt.w	8007598 <_printf_i+0x20c>
 800746e:	6821      	ldr	r1, [r4, #0]
 8007470:	f021 0104 	bic.w	r1, r1, #4
 8007474:	6021      	str	r1, [r4, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d13d      	bne.n	80074f6 <_printf_i+0x16a>
 800747a:	2d00      	cmp	r5, #0
 800747c:	f040 808e 	bne.w	800759c <_printf_i+0x210>
 8007480:	4665      	mov	r5, ip
 8007482:	2a08      	cmp	r2, #8
 8007484:	d10b      	bne.n	800749e <_printf_i+0x112>
 8007486:	6823      	ldr	r3, [r4, #0]
 8007488:	07db      	lsls	r3, r3, #31
 800748a:	d508      	bpl.n	800749e <_printf_i+0x112>
 800748c:	6923      	ldr	r3, [r4, #16]
 800748e:	6862      	ldr	r2, [r4, #4]
 8007490:	429a      	cmp	r2, r3
 8007492:	bfde      	ittt	le
 8007494:	2330      	movle	r3, #48	; 0x30
 8007496:	f805 3c01 	strble.w	r3, [r5, #-1]
 800749a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800749e:	ebac 0305 	sub.w	r3, ip, r5
 80074a2:	6123      	str	r3, [r4, #16]
 80074a4:	f8cd 8000 	str.w	r8, [sp]
 80074a8:	463b      	mov	r3, r7
 80074aa:	aa03      	add	r2, sp, #12
 80074ac:	4621      	mov	r1, r4
 80074ae:	4630      	mov	r0, r6
 80074b0:	f7ff fef6 	bl	80072a0 <_printf_common>
 80074b4:	3001      	adds	r0, #1
 80074b6:	d14d      	bne.n	8007554 <_printf_i+0x1c8>
 80074b8:	f04f 30ff 	mov.w	r0, #4294967295
 80074bc:	b005      	add	sp, #20
 80074be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074c2:	4839      	ldr	r0, [pc, #228]	; (80075a8 <_printf_i+0x21c>)
 80074c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80074c8:	6813      	ldr	r3, [r2, #0]
 80074ca:	6821      	ldr	r1, [r4, #0]
 80074cc:	1d1d      	adds	r5, r3, #4
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6015      	str	r5, [r2, #0]
 80074d2:	060a      	lsls	r2, r1, #24
 80074d4:	d50b      	bpl.n	80074ee <_printf_i+0x162>
 80074d6:	07ca      	lsls	r2, r1, #31
 80074d8:	bf44      	itt	mi
 80074da:	f041 0120 	orrmi.w	r1, r1, #32
 80074de:	6021      	strmi	r1, [r4, #0]
 80074e0:	b91b      	cbnz	r3, 80074ea <_printf_i+0x15e>
 80074e2:	6822      	ldr	r2, [r4, #0]
 80074e4:	f022 0220 	bic.w	r2, r2, #32
 80074e8:	6022      	str	r2, [r4, #0]
 80074ea:	2210      	movs	r2, #16
 80074ec:	e7b7      	b.n	800745e <_printf_i+0xd2>
 80074ee:	064d      	lsls	r5, r1, #25
 80074f0:	bf48      	it	mi
 80074f2:	b29b      	uxthmi	r3, r3
 80074f4:	e7ef      	b.n	80074d6 <_printf_i+0x14a>
 80074f6:	4665      	mov	r5, ip
 80074f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80074fc:	fb02 3311 	mls	r3, r2, r1, r3
 8007500:	5cc3      	ldrb	r3, [r0, r3]
 8007502:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007506:	460b      	mov	r3, r1
 8007508:	2900      	cmp	r1, #0
 800750a:	d1f5      	bne.n	80074f8 <_printf_i+0x16c>
 800750c:	e7b9      	b.n	8007482 <_printf_i+0xf6>
 800750e:	6813      	ldr	r3, [r2, #0]
 8007510:	6825      	ldr	r5, [r4, #0]
 8007512:	6961      	ldr	r1, [r4, #20]
 8007514:	1d18      	adds	r0, r3, #4
 8007516:	6010      	str	r0, [r2, #0]
 8007518:	0628      	lsls	r0, r5, #24
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	d501      	bpl.n	8007522 <_printf_i+0x196>
 800751e:	6019      	str	r1, [r3, #0]
 8007520:	e002      	b.n	8007528 <_printf_i+0x19c>
 8007522:	066a      	lsls	r2, r5, #25
 8007524:	d5fb      	bpl.n	800751e <_printf_i+0x192>
 8007526:	8019      	strh	r1, [r3, #0]
 8007528:	2300      	movs	r3, #0
 800752a:	6123      	str	r3, [r4, #16]
 800752c:	4665      	mov	r5, ip
 800752e:	e7b9      	b.n	80074a4 <_printf_i+0x118>
 8007530:	6813      	ldr	r3, [r2, #0]
 8007532:	1d19      	adds	r1, r3, #4
 8007534:	6011      	str	r1, [r2, #0]
 8007536:	681d      	ldr	r5, [r3, #0]
 8007538:	6862      	ldr	r2, [r4, #4]
 800753a:	2100      	movs	r1, #0
 800753c:	4628      	mov	r0, r5
 800753e:	f7f8 fe4f 	bl	80001e0 <memchr>
 8007542:	b108      	cbz	r0, 8007548 <_printf_i+0x1bc>
 8007544:	1b40      	subs	r0, r0, r5
 8007546:	6060      	str	r0, [r4, #4]
 8007548:	6863      	ldr	r3, [r4, #4]
 800754a:	6123      	str	r3, [r4, #16]
 800754c:	2300      	movs	r3, #0
 800754e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007552:	e7a7      	b.n	80074a4 <_printf_i+0x118>
 8007554:	6923      	ldr	r3, [r4, #16]
 8007556:	462a      	mov	r2, r5
 8007558:	4639      	mov	r1, r7
 800755a:	4630      	mov	r0, r6
 800755c:	47c0      	blx	r8
 800755e:	3001      	adds	r0, #1
 8007560:	d0aa      	beq.n	80074b8 <_printf_i+0x12c>
 8007562:	6823      	ldr	r3, [r4, #0]
 8007564:	079b      	lsls	r3, r3, #30
 8007566:	d413      	bmi.n	8007590 <_printf_i+0x204>
 8007568:	68e0      	ldr	r0, [r4, #12]
 800756a:	9b03      	ldr	r3, [sp, #12]
 800756c:	4298      	cmp	r0, r3
 800756e:	bfb8      	it	lt
 8007570:	4618      	movlt	r0, r3
 8007572:	e7a3      	b.n	80074bc <_printf_i+0x130>
 8007574:	2301      	movs	r3, #1
 8007576:	464a      	mov	r2, r9
 8007578:	4639      	mov	r1, r7
 800757a:	4630      	mov	r0, r6
 800757c:	47c0      	blx	r8
 800757e:	3001      	adds	r0, #1
 8007580:	d09a      	beq.n	80074b8 <_printf_i+0x12c>
 8007582:	3501      	adds	r5, #1
 8007584:	68e3      	ldr	r3, [r4, #12]
 8007586:	9a03      	ldr	r2, [sp, #12]
 8007588:	1a9b      	subs	r3, r3, r2
 800758a:	42ab      	cmp	r3, r5
 800758c:	dcf2      	bgt.n	8007574 <_printf_i+0x1e8>
 800758e:	e7eb      	b.n	8007568 <_printf_i+0x1dc>
 8007590:	2500      	movs	r5, #0
 8007592:	f104 0919 	add.w	r9, r4, #25
 8007596:	e7f5      	b.n	8007584 <_printf_i+0x1f8>
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1ac      	bne.n	80074f6 <_printf_i+0x16a>
 800759c:	7803      	ldrb	r3, [r0, #0]
 800759e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075a6:	e76c      	b.n	8007482 <_printf_i+0xf6>
 80075a8:	080079db 	.word	0x080079db
 80075ac:	080079ec 	.word	0x080079ec

080075b0 <_putc_r>:
 80075b0:	b570      	push	{r4, r5, r6, lr}
 80075b2:	460d      	mov	r5, r1
 80075b4:	4614      	mov	r4, r2
 80075b6:	4606      	mov	r6, r0
 80075b8:	b118      	cbz	r0, 80075c2 <_putc_r+0x12>
 80075ba:	6983      	ldr	r3, [r0, #24]
 80075bc:	b90b      	cbnz	r3, 80075c2 <_putc_r+0x12>
 80075be:	f7ff f8e1 	bl	8006784 <__sinit>
 80075c2:	4b13      	ldr	r3, [pc, #76]	; (8007610 <_putc_r+0x60>)
 80075c4:	429c      	cmp	r4, r3
 80075c6:	d112      	bne.n	80075ee <_putc_r+0x3e>
 80075c8:	6874      	ldr	r4, [r6, #4]
 80075ca:	68a3      	ldr	r3, [r4, #8]
 80075cc:	3b01      	subs	r3, #1
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	60a3      	str	r3, [r4, #8]
 80075d2:	da16      	bge.n	8007602 <_putc_r+0x52>
 80075d4:	69a2      	ldr	r2, [r4, #24]
 80075d6:	4293      	cmp	r3, r2
 80075d8:	db02      	blt.n	80075e0 <_putc_r+0x30>
 80075da:	b2eb      	uxtb	r3, r5
 80075dc:	2b0a      	cmp	r3, #10
 80075de:	d110      	bne.n	8007602 <_putc_r+0x52>
 80075e0:	4622      	mov	r2, r4
 80075e2:	4629      	mov	r1, r5
 80075e4:	4630      	mov	r0, r6
 80075e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80075ea:	f7ff bba9 	b.w	8006d40 <__swbuf_r>
 80075ee:	4b09      	ldr	r3, [pc, #36]	; (8007614 <_putc_r+0x64>)
 80075f0:	429c      	cmp	r4, r3
 80075f2:	d101      	bne.n	80075f8 <_putc_r+0x48>
 80075f4:	68b4      	ldr	r4, [r6, #8]
 80075f6:	e7e8      	b.n	80075ca <_putc_r+0x1a>
 80075f8:	4b07      	ldr	r3, [pc, #28]	; (8007618 <_putc_r+0x68>)
 80075fa:	429c      	cmp	r4, r3
 80075fc:	bf08      	it	eq
 80075fe:	68f4      	ldreq	r4, [r6, #12]
 8007600:	e7e3      	b.n	80075ca <_putc_r+0x1a>
 8007602:	6823      	ldr	r3, [r4, #0]
 8007604:	1c5a      	adds	r2, r3, #1
 8007606:	6022      	str	r2, [r4, #0]
 8007608:	701d      	strb	r5, [r3, #0]
 800760a:	b2e8      	uxtb	r0, r5
 800760c:	bd70      	pop	{r4, r5, r6, pc}
 800760e:	bf00      	nop
 8007610:	0800797c 	.word	0x0800797c
 8007614:	0800799c 	.word	0x0800799c
 8007618:	0800795c 	.word	0x0800795c

0800761c <_read_r>:
 800761c:	b538      	push	{r3, r4, r5, lr}
 800761e:	4c07      	ldr	r4, [pc, #28]	; (800763c <_read_r+0x20>)
 8007620:	4605      	mov	r5, r0
 8007622:	4608      	mov	r0, r1
 8007624:	4611      	mov	r1, r2
 8007626:	2200      	movs	r2, #0
 8007628:	6022      	str	r2, [r4, #0]
 800762a:	461a      	mov	r2, r3
 800762c:	f7fa f8ec 	bl	8001808 <_read>
 8007630:	1c43      	adds	r3, r0, #1
 8007632:	d102      	bne.n	800763a <_read_r+0x1e>
 8007634:	6823      	ldr	r3, [r4, #0]
 8007636:	b103      	cbz	r3, 800763a <_read_r+0x1e>
 8007638:	602b      	str	r3, [r5, #0]
 800763a:	bd38      	pop	{r3, r4, r5, pc}
 800763c:	2000071c 	.word	0x2000071c

08007640 <__ascii_wctomb>:
 8007640:	b149      	cbz	r1, 8007656 <__ascii_wctomb+0x16>
 8007642:	2aff      	cmp	r2, #255	; 0xff
 8007644:	bf85      	ittet	hi
 8007646:	238a      	movhi	r3, #138	; 0x8a
 8007648:	6003      	strhi	r3, [r0, #0]
 800764a:	700a      	strbls	r2, [r1, #0]
 800764c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007650:	bf98      	it	ls
 8007652:	2001      	movls	r0, #1
 8007654:	4770      	bx	lr
 8007656:	4608      	mov	r0, r1
 8007658:	4770      	bx	lr
	...

0800765c <_fstat_r>:
 800765c:	b538      	push	{r3, r4, r5, lr}
 800765e:	4c07      	ldr	r4, [pc, #28]	; (800767c <_fstat_r+0x20>)
 8007660:	2300      	movs	r3, #0
 8007662:	4605      	mov	r5, r0
 8007664:	4608      	mov	r0, r1
 8007666:	4611      	mov	r1, r2
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	f7fa f912 	bl	8001892 <_fstat>
 800766e:	1c43      	adds	r3, r0, #1
 8007670:	d102      	bne.n	8007678 <_fstat_r+0x1c>
 8007672:	6823      	ldr	r3, [r4, #0]
 8007674:	b103      	cbz	r3, 8007678 <_fstat_r+0x1c>
 8007676:	602b      	str	r3, [r5, #0]
 8007678:	bd38      	pop	{r3, r4, r5, pc}
 800767a:	bf00      	nop
 800767c:	2000071c 	.word	0x2000071c

08007680 <_isatty_r>:
 8007680:	b538      	push	{r3, r4, r5, lr}
 8007682:	4c06      	ldr	r4, [pc, #24]	; (800769c <_isatty_r+0x1c>)
 8007684:	2300      	movs	r3, #0
 8007686:	4605      	mov	r5, r0
 8007688:	4608      	mov	r0, r1
 800768a:	6023      	str	r3, [r4, #0]
 800768c:	f7fa f911 	bl	80018b2 <_isatty>
 8007690:	1c43      	adds	r3, r0, #1
 8007692:	d102      	bne.n	800769a <_isatty_r+0x1a>
 8007694:	6823      	ldr	r3, [r4, #0]
 8007696:	b103      	cbz	r3, 800769a <_isatty_r+0x1a>
 8007698:	602b      	str	r3, [r5, #0]
 800769a:	bd38      	pop	{r3, r4, r5, pc}
 800769c:	2000071c 	.word	0x2000071c

080076a0 <_init>:
 80076a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a2:	bf00      	nop
 80076a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076a6:	bc08      	pop	{r3}
 80076a8:	469e      	mov	lr, r3
 80076aa:	4770      	bx	lr

080076ac <_fini>:
 80076ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ae:	bf00      	nop
 80076b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076b2:	bc08      	pop	{r3}
 80076b4:	469e      	mov	lr, r3
 80076b6:	4770      	bx	lr
